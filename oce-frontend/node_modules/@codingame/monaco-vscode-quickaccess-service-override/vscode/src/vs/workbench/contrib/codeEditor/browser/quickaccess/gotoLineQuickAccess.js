import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { localize2WithPath, localizeWithPath } from 'vscode/vscode/vs/nls';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';
import { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';
import { AbstractGotoLineQuickAccessProvider } from 'vscode/vscode/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { Extensions } from 'vscode/vscode/vs/platform/quickinput/common/quickAccess';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';
import { Action2, registerAction2 } from 'vscode/vscode/vs/platform/actions/common/actions';
import { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService.service';

const _moduleId = "vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess";
let GotoLineQuickAccessProvider = class GotoLineQuickAccessProvider extends AbstractGotoLineQuickAccessProvider {
    constructor(editorService, editorGroupService, configurationService) {
        super();
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.configurationService = configurationService;
        this.onDidActiveTextEditorControlChange = this.editorService.onDidActiveEditorChange;
    }
    get configuration() {
        const editorConfig = this.configurationService.getValue().workbench?.editor;
        return {
            openEditorPinned: !editorConfig?.enablePreviewFromQuickOpen || !editorConfig?.enablePreview
        };
    }
    get activeTextEditorControl() {
        return this.editorService.activeTextEditorControl;
    }
    gotoLocation(context, options) {
        if ((options.keyMods.alt || (this.configuration.openEditorPinned && options.keyMods.ctrlCmd) || options.forceSideBySide) && this.editorService.activeEditor) {
            context.restoreViewState?.();
            const editorOptions = {
                selection: options.range,
                pinned: options.keyMods.ctrlCmd || this.configuration.openEditorPinned,
                preserveFocus: options.preserveFocus
            };
            this.editorGroupService.sideGroup.openEditor(this.editorService.activeEditor, editorOptions);
        }
        else {
            super.gotoLocation(context, options);
        }
    }
};
GotoLineQuickAccessProvider = ( (__decorate([
    ( (__param(0, IEditorService))),
    ( (__param(1, IEditorGroupsService))),
    ( (__param(2, IConfigurationService)))
], GotoLineQuickAccessProvider)));
class GotoLineAction extends Action2 {
    static { this.ID = 'workbench.action.gotoLine'; }
    constructor() {
        super({
            id: GotoLineAction.ID,
            title: ( localize2WithPath(_moduleId, 0, 'Go to Line/Column...')),
            f1: true,
            keybinding: {
                weight: 200 ,
                when: null,
                primary: 2048  | 37 ,
                mac: { primary: 256  | 37  }
            }
        });
    }
    async run(accessor) {
        accessor.get(IQuickInputService).quickAccess.show(GotoLineQuickAccessProvider.PREFIX);
    }
}
registerAction2(GotoLineAction);
( (Registry.as(Extensions.Quickaccess))).registerQuickAccessProvider({
    ctor: GotoLineQuickAccessProvider,
    prefix: AbstractGotoLineQuickAccessProvider.PREFIX,
    placeholder: ( localizeWithPath(
        _moduleId,
        1,
        "Type the line number and optional column to go to (e.g. 42:5 for line 42 and column 5)."
    )),
    helpEntries: [{ description: ( localizeWithPath(_moduleId, 2, "Go to Line/Column")), commandId: GotoLineAction.ID }]
});

export { GotoLineQuickAccessProvider };
