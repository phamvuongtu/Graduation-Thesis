import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { WindowIdleValue } from 'vscode/vscode/vs/base/browser/dom';
import { mainWindow } from 'vscode/vscode/vs/base/browser/window';
import { matchesScheme, Schemas } from 'vscode/vscode/vs/base/common/network';
import Severity$1 from 'vscode/vscode/vs/base/common/severity';
import { URI } from 'vscode/vscode/vs/base/common/uri';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { IClipboardService } from 'vscode/vscode/vs/platform/clipboard/common/clipboardService.service';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';
import { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs.service';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { IOpenerService } from 'vscode/vscode/vs/platform/opener/common/opener.service';
import { IProductService } from 'vscode/vscode/vs/platform/product/common/productService.service';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';
import { IStorageService } from 'vscode/vscode/vs/platform/storage/common/storage.service';
import { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry.service';
import { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace.service';
import { IWorkspaceTrustManagementService } from 'vscode/vscode/vs/platform/workspace/common/workspaceTrust.service';
import { readAuthenticationTrustedDomains, readWorkspaceTrustedDomains, readStaticTrustedDomains, configureOpenerTrustedDomainsHandler } from './trustedDomains.js';
import { testUrlMatchesGlob } from 'vscode/vscode/vs/workbench/contrib/url/common/urlGlob';
import { IAuthenticationService } from 'vscode/vscode/vs/workbench/services/authentication/common/authentication.service';
import { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService.service';

const _moduleId = "vs/workbench/contrib/url/browser/trustedDomainsValidator";
let OpenerValidatorContributions = class OpenerValidatorContributions {
    constructor(_openerService, _storageService, _dialogService, _productService, _quickInputService, _editorService, _clipboardService, _telemetryService, _instantiationService, _authenticationService, _workspaceContextService, _configurationService, _workspaceTrustService) {
        this._openerService = _openerService;
        this._storageService = _storageService;
        this._dialogService = _dialogService;
        this._productService = _productService;
        this._quickInputService = _quickInputService;
        this._editorService = _editorService;
        this._clipboardService = _clipboardService;
        this._telemetryService = _telemetryService;
        this._instantiationService = _instantiationService;
        this._authenticationService = _authenticationService;
        this._workspaceContextService = _workspaceContextService;
        this._configurationService = _configurationService;
        this._workspaceTrustService = _workspaceTrustService;
        this._openerService.registerValidator({ shouldOpen: (uri, options) => this.validateLink(uri, options) });
        this._readAuthenticationTrustedDomainsResult = ( (new WindowIdleValue(
            mainWindow,
            () => this._instantiationService.invokeFunction(readAuthenticationTrustedDomains)
        )));
        this._authenticationService.onDidRegisterAuthenticationProvider(() => {
            this._readAuthenticationTrustedDomainsResult?.dispose();
            this._readAuthenticationTrustedDomainsResult = ( (new WindowIdleValue(
                mainWindow,
                () => this._instantiationService.invokeFunction(readAuthenticationTrustedDomains)
            )));
        });
        this._readWorkspaceTrustedDomainsResult = ( (new WindowIdleValue(
            mainWindow,
            () => this._instantiationService.invokeFunction(readWorkspaceTrustedDomains)
        )));
        this._workspaceContextService.onDidChangeWorkspaceFolders(() => {
            this._readWorkspaceTrustedDomainsResult?.dispose();
            this._readWorkspaceTrustedDomainsResult = ( (new WindowIdleValue(
                mainWindow,
                () => this._instantiationService.invokeFunction(readWorkspaceTrustedDomains)
            )));
        });
    }
    async validateLink(resource, openOptions) {
        if (!matchesScheme(resource, Schemas.http) && !matchesScheme(resource, Schemas.https)) {
            return true;
        }
        if (openOptions?.fromWorkspace && this._workspaceTrustService.isWorkspaceTrusted() && !this._configurationService.getValue('workbench.trustedDomains.promptInTrustedWorkspace')) {
            return true;
        }
        const originalResource = resource;
        let resourceUri;
        if (typeof resource === 'string') {
            resourceUri = ( (URI.parse(resource)));
        }
        else {
            resourceUri = resource;
        }
        const { scheme, authority, path, query, fragment } = resourceUri;
        const domainToOpen = `${scheme}://${authority}`;
        const [workspaceDomains, userDomains] = await Promise.all([this._readWorkspaceTrustedDomainsResult.value, this._readAuthenticationTrustedDomainsResult.value]);
        const { defaultTrustedDomains, trustedDomains, } = this._instantiationService.invokeFunction(readStaticTrustedDomains);
        const allTrustedDomains = [...defaultTrustedDomains, ...trustedDomains, ...userDomains, ...workspaceDomains];
        if (isURLDomainTrusted(resourceUri, allTrustedDomains)) {
            return true;
        }
        else {
            let formattedLink = `${scheme}://${authority}${path}`;
            const linkTail = `${query ? '?' + query : ''}${fragment ? '#' + fragment : ''}`;
            const remainingLength = Math.max(0, 60 - formattedLink.length);
            const linkTailLengthToKeep = Math.min(Math.max(5, remainingLength), linkTail.length);
            if (linkTailLengthToKeep === linkTail.length) {
                formattedLink += linkTail;
            }
            else {
                formattedLink += linkTail.charAt(0) + '...' + linkTail.substring(linkTail.length - linkTailLengthToKeep + 1);
            }
            const { result } = await this._dialogService.prompt({
                type: Severity$1.Info,
                message: ( localizeWithPath(
                    _moduleId,
                    0,
                    'Do you want {0} to open the external website?',
                    this._productService.nameShort
                )),
                detail: typeof originalResource === 'string' ? originalResource : formattedLink,
                buttons: [
                    {
                        label: ( localizeWithPath(_moduleId, 1, '&&Open')),
                        run: () => true
                    },
                    {
                        label: ( localizeWithPath(_moduleId, 2, '&&Copy')),
                        run: () => {
                            this._clipboardService.writeText(typeof originalResource === 'string' ? originalResource : ( (resourceUri.toString(true))));
                            return false;
                        }
                    },
                    {
                        label: ( localizeWithPath(_moduleId, 3, 'Configure &&Trusted Domains')),
                        run: async () => {
                            const pickedDomains = await configureOpenerTrustedDomainsHandler(trustedDomains, domainToOpen, resourceUri, this._quickInputService, this._storageService, this._editorService);
                            if (pickedDomains.indexOf('*') !== -1) {
                                return true;
                            }
                            if (isURLDomainTrusted(resourceUri, pickedDomains)) {
                                return true;
                            }
                            return false;
                        }
                    }
                ],
                cancelButton: {
                    run: () => false
                }
            });
            return result;
        }
    }
};
OpenerValidatorContributions = ( (__decorate([
    ( (__param(0, IOpenerService))),
    ( (__param(1, IStorageService))),
    ( (__param(2, IDialogService))),
    ( (__param(3, IProductService))),
    ( (__param(4, IQuickInputService))),
    ( (__param(5, IEditorService))),
    ( (__param(6, IClipboardService))),
    ( (__param(7, ITelemetryService))),
    ( (__param(8, IInstantiationService))),
    ( (__param(9, IAuthenticationService))),
    ( (__param(10, IWorkspaceContextService))),
    ( (__param(11, IConfigurationService))),
    ( (__param(12, IWorkspaceTrustManagementService)))
], OpenerValidatorContributions)));
const rLocalhost = /^localhost(:\d+)?$/i;
const r127 = /^127.0.0.1(:\d+)?$/;
function isLocalhostAuthority(authority) {
    return rLocalhost.test(authority) || r127.test(authority);
}
function normalizeURL(url) {
    const caseInsensitiveAuthorities = ['github.com'];
    try {
        const parsed = typeof url === 'string' ? ( (URI.parse(url, true))) : url;
        if (caseInsensitiveAuthorities.includes(parsed.authority)) {
            return (
                 (parsed.with({ path: parsed.path.toLowerCase() }).toString(true))
            );
        }
        else {
            return (
                 (parsed.toString(true))
            );
        }
    }
    catch {
        return (
             (url.toString())
        );
    }
}
function isURLDomainTrusted(url, trustedDomains) {
    url = ( (URI.parse(normalizeURL(url))));
    trustedDomains = ( (trustedDomains.map(normalizeURL)));
    if (isLocalhostAuthority(url.authority)) {
        return true;
    }
    for (let i = 0; i < trustedDomains.length; i++) {
        if (trustedDomains[i] === '*') {
            return true;
        }
        if (testUrlMatchesGlob(url, trustedDomains[i])) {
            return true;
        }
    }
    return false;
}

export { OpenerValidatorContributions, isURLDomainTrusted };
