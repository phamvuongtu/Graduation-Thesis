import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { DisposableStore } from 'vscode/vscode/vs/base/common/lifecycle';
import { IKeybindingService } from 'vscode/vscode/vs/platform/keybinding/common/keybinding.service';
import { Extensions } from 'vscode/vscode/vs/platform/quickinput/common/quickAccess';
import { IQuickInputService } from 'vscode/vscode/vs/platform/quickinput/common/quickInput.service';

var HelpQuickAccessProvider_1;
const _moduleId = "vs/platform/quickinput/browser/helpQuickAccess";
let HelpQuickAccessProvider = class HelpQuickAccessProvider {
    static { HelpQuickAccessProvider_1 = this; }
    static { this.PREFIX = '?'; }
    constructor(quickInputService, keybindingService) {
        this.quickInputService = quickInputService;
        this.keybindingService = keybindingService;
        this.registry = ( (Registry.as(Extensions.Quickaccess)));
    }
    provide(picker) {
        const disposables = ( (new DisposableStore()));
        disposables.add(picker.onDidAccept(() => {
            const [item] = picker.selectedItems;
            if (item) {
                this.quickInputService.quickAccess.show(item.prefix, { preserveValue: true });
            }
        }));
        disposables.add(picker.onDidChangeValue(value => {
            const providerDescriptor = this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider_1.PREFIX.length));
            if (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider_1.PREFIX) {
                this.quickInputService.quickAccess.show(providerDescriptor.prefix, { preserveValue: true });
            }
        }));
        picker.items = this.getQuickAccessProviders().filter(p => p.prefix !== HelpQuickAccessProvider_1.PREFIX);
        return disposables;
    }
    getQuickAccessProviders() {
        const providers = this.registry
            .getQuickAccessProviders()
            .sort((providerA, providerB) => providerA.prefix.localeCompare(providerB.prefix))
            .flatMap(provider => this.createPicks(provider));
        return providers;
    }
    createPicks(provider) {
        return (
             (provider.helpEntries.map(helpEntry => {
                const prefix = helpEntry.prefix || provider.prefix;
                const label = prefix || '\u2026' ;
                return {
                    prefix,
                    label,
                    keybinding: helpEntry.commandId ? this.keybindingService.lookupKeybinding(helpEntry.commandId) : undefined,
                    ariaLabel: ( localizeWithPath(_moduleId, 0, "{0}, {1}", label, helpEntry.description)),
                    description: helpEntry.description
                };
            }))
        );
    }
};
HelpQuickAccessProvider = HelpQuickAccessProvider_1 = ( (__decorate([
    ( (__param(0, IQuickInputService))),
    ( (__param(1, IKeybindingService)))
], HelpQuickAccessProvider)));

export { HelpQuickAccessProvider };
