import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { raceCancellation } from 'vscode/vscode/vs/base/common/async';
import { CancellationTokenSource } from 'vscode/vscode/vs/base/common/cancellation';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';
import { IProgressService } from 'vscode/vscode/vs/platform/progress/common/progress.service';
import { Disposable, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { insert } from 'vscode/vscode/vs/base/common/arrays';

const _moduleId = "vs/workbench/services/textfile/common/textFileSaveParticipant";
let TextFileSaveParticipant = class TextFileSaveParticipant extends Disposable {
    constructor(progressService, logService) {
        super();
        this.progressService = progressService;
        this.logService = logService;
        this.saveParticipants = [];
    }
    addSaveParticipant(participant) {
        const remove = insert(this.saveParticipants, participant);
        return toDisposable(() => remove());
    }
    participate(model, context, token) {
        const cts = ( (new CancellationTokenSource(token)));
        return this.progressService.withProgress({
            title: ( localizeWithPath(_moduleId, 0, "Saving '{0}'", model.name)),
            location: 15 ,
            cancellable: true,
            delay: model.isDirty() ? 3000 : 5000
        }, async (progress) => {
            model.textEditorModel?.pushStackElement();
            for (const saveParticipant of this.saveParticipants) {
                if (cts.token.isCancellationRequested || !model.textEditorModel ) {
                    break;
                }
                try {
                    const promise = saveParticipant.participate(model, context, progress, cts.token);
                    await raceCancellation(promise, cts.token);
                }
                catch (err) {
                    this.logService.error(err);
                }
            }
            model.textEditorModel?.pushStackElement();
        }, () => {
            cts.cancel();
        }).finally(() => {
            cts.dispose();
        });
    }
    dispose() {
        this.saveParticipants.splice(0, this.saveParticipants.length);
        super.dispose();
    }
};
TextFileSaveParticipant = ( (__decorate([
    ( (__param(0, IProgressService))),
    ( (__param(1, ILogService)))
], TextFileSaveParticipant)));

export { TextFileSaveParticipant };
