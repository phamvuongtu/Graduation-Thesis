import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';
import { LanguagePackBaseService } from 'vscode/vscode/vs/platform/languagePacks/common/languagePacks';
import { ILanguagePackService } from 'vscode/vscode/vs/platform/languagePacks/common/languagePacks.service';
import { ILocaleService } from 'vscode/vscode/vs/workbench/services/localization/common/locale.service';
import { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs.service';
import { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';
import { IProductService } from 'vscode/vscode/vs/platform/product/common/productService.service';
import { URI } from 'vscode/vscode/vs/base/common/uri';
import { AbstractLocaleService } from './vscode/src/vs/workbench/services/localization/browser/localeService.js';
import { IExtensionGalleryService } from 'vscode/vscode/vs/platform/extensionManagement/common/extensionManagement.service';
import { setAvailableLocales, getBuiltInExtensionTranslationsUris } from 'vscode/l10n';
import './vscode/src/vs/workbench/contrib/localization/browser/localization.contribution.js';

let LocaleService = class LocaleService extends AbstractLocaleService {
    constructor(options, dialogService, hostService, productService) {
        super(dialogService, hostService, productService);
        this.options = options;
    }
    async storeLocale(locale) {
        if (locale == null) {
            await this.options.clearLocale();
        }
        else {
            await this.options.setLocale(locale);
        }
    }
    async clearLocale() {
        await this.options.clearLocale();
    }
};
LocaleService = __decorate([
    ( __param(1, IDialogService)),
    ( __param(2, IHostService)),
    ( __param(3, IProductService))
], LocaleService);
let LanguagePackService = class LanguagePackService extends LanguagePackBaseService {
    constructor(options, extensionGalleryService) {
        super(extensionGalleryService);
        this.options = options;
        setAvailableLocales(new Set(( options.availableLanguages.map(lang => lang.locale))));
    }
    async getAvailableLanguages() {
        return ( this.options.availableLanguages.map(({ locale, languageName }) => {
            return this.createQuickPickItem(locale, languageName);
        }));
    }
    async getInstalledLanguages() {
        return [];
    }
    async getBuiltInExtensionTranslationsUri(id, language) {
        const uri = getBuiltInExtensionTranslationsUris(language)?.[id];
        return uri != null ? ( URI.parse(uri)) : undefined;
    }
};
LanguagePackService = __decorate([
    ( __param(1, IExtensionGalleryService))
], LanguagePackService);
function getServiceOverride(options) {
    return {
        [( ILocaleService.toString())]: new SyncDescriptor(LocaleService, [options], true),
        [( ILanguagePackService.toString())]: new SyncDescriptor(LanguagePackService, [options], true)
    };
}

export { getServiceOverride as default };
