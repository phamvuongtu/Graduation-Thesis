import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { Language } from 'vscode/vscode/vs/base/common/platform';
import { IDialogService } from 'vscode/vscode/vs/platform/dialogs/common/dialogs.service';
import 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host.service';
import { IProductService } from 'vscode/vscode/vs/platform/product/common/productService.service';
import 'vscode/vscode/vs/base/common/cancellation';

const _moduleId = "vs/workbench/services/localization/browser/localeService";
let AbstractLocaleService = class AbstractLocaleService {
    static { this._LOCAL_STORAGE_EXTENSION_ID_KEY = 'vscode.nls.languagePackExtensionId'; }
    static { this._LOCAL_STORAGE_LOCALE_KEY = 'vscode.nls.locale'; }
    constructor(dialogService, hostService, productService) {
        this.dialogService = dialogService;
        this.hostService = hostService;
        this.productService = productService;
    }
    async setLocale(languagePackItem, _skipDialog = false) {
        const locale = languagePackItem.id;
        if (locale === Language.value() || (!locale && Language.value() === navigator.language.toLowerCase())) {
            return;
        }
        this.storeLocale(locale, languagePackItem.extensionId);
        const restartDialog = await this.dialogService.confirm({
            type: 'info',
            message: ( localizeWithPath(
                _moduleId,
                0,
                "To change the display language, {0} needs to reload",
                this.productService.nameLong
            )),
            detail: ( localizeWithPath(
                _moduleId,
                1,
                "Press the reload button to refresh the page and set the display language to {0}.",
                languagePackItem.label
            )),
            primaryButton: ( localizeWithPath(_moduleId, 2, "&&Reload")),
        });
        if (restartDialog.confirmed) {
            this.hostService.restart();
        }
    }
    async clearLocalePreference() {
        this.clearLocale();
        if (Language.value() === navigator.language.toLowerCase()) {
            return;
        }
        const restartDialog = await this.dialogService.confirm({
            type: 'info',
            message: ( localizeWithPath(
                _moduleId,
                3,
                "To change the display language, {0} needs to reload",
                this.productService.nameLong
            )),
            detail: ( localizeWithPath(
                _moduleId,
                4,
                "Press the reload button to refresh the page and use your browser's language."
            )),
            primaryButton: ( localizeWithPath(_moduleId, 2, "&&Reload")),
        });
        if (restartDialog.confirmed) {
            this.hostService.restart();
        }
    }
};
AbstractLocaleService = ( (__decorate([
    ( (__param(0, IDialogService))),
    ( (__param(1, IHostService))),
    ( (__param(2, IProductService)))
], AbstractLocaleService)));

export { AbstractLocaleService };
