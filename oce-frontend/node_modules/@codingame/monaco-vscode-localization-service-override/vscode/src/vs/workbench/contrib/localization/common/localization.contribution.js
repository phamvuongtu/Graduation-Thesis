import { Disposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { registerAction2 } from 'vscode/vscode/vs/platform/actions/common/actions';
import { SyncDescriptor } from 'vscode/vscode/vs/platform/instantiation/common/descriptors';
import { Registry } from 'vscode/vscode/vs/platform/registry/common/platform';
import { ConfigureDisplayLanguageAction, ClearDisplayLanguageAction } from './localizationsActions.js';
import { Extensions } from 'vscode/vscode/vs/workbench/services/extensionManagement/common/extensionFeatures';
import { ExtensionsRegistry } from 'vscode/vscode/vs/workbench/services/extensions/common/extensionsRegistry';

const _moduleId = "vs/workbench/contrib/localization/common/localization.contribution";
class BaseLocalizationWorkbenchContribution extends Disposable {
    constructor() {
        super();
        registerAction2(ConfigureDisplayLanguageAction);
        registerAction2(ClearDisplayLanguageAction);
        ExtensionsRegistry.registerExtensionPoint({
            extensionPoint: 'localizations',
            defaultExtensionKind: ['ui', 'workspace'],
            jsonSchema: {
                description: ( localizeWithPath(_moduleId, 0, "Contributes localizations to the editor")),
                type: 'array',
                default: [],
                items: {
                    type: 'object',
                    required: ['languageId', 'translations'],
                    defaultSnippets: [{ body: { languageId: '', languageName: '', localizedLanguageName: '', translations: [{ id: 'vscode', path: '' }] } }],
                    properties: {
                        languageId: {
                            description: ( localizeWithPath(
                                _moduleId,
                                1,
                                'Id of the language into which the display strings are translated.'
                            )),
                            type: 'string'
                        },
                        languageName: {
                            description: ( localizeWithPath(_moduleId, 2, 'Name of the language in English.')),
                            type: 'string'
                        },
                        localizedLanguageName: {
                            description: ( localizeWithPath(_moduleId, 3, 'Name of the language in contributed language.')),
                            type: 'string'
                        },
                        translations: {
                            description: ( localizeWithPath(_moduleId, 4, 'List of translations associated to the language.')),
                            type: 'array',
                            default: [{ id: 'vscode', path: '' }],
                            items: {
                                type: 'object',
                                required: ['id', 'path'],
                                properties: {
                                    id: {
                                        type: 'string',
                                        description: ( localizeWithPath(
                                            _moduleId,
                                            5,
                                            "Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`."
                                        )),
                                        pattern: '^((vscode)|([a-z0-9A-Z][a-z0-9A-Z-]*)\\.([a-z0-9A-Z][a-z0-9A-Z-]*))$',
                                        patternErrorMessage: ( localizeWithPath(
                                            _moduleId,
                                            6,
                                            "Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively."
                                        ))
                                    },
                                    path: {
                                        type: 'string',
                                        description: ( localizeWithPath(
                                            _moduleId,
                                            7,
                                            "A relative path to a file containing translations for the language."
                                        ))
                                    }
                                },
                                defaultSnippets: [{ body: { id: '', path: '' } }],
                            },
                        }
                    }
                }
            }
        });
    }
}
class LocalizationsDataRenderer extends Disposable {
    constructor() {
        super(...arguments);
        this.type = 'table';
    }
    shouldRender(manifest) {
        return !!manifest.contributes?.localizations;
    }
    render(manifest) {
        const localizations = manifest.contributes?.localizations || [];
        if (!localizations.length) {
            return { data: { headers: [], rows: [] }, dispose: () => { } };
        }
        const headers = [
            ( localizeWithPath(_moduleId, 8, "Language ID")),
            ( localizeWithPath(_moduleId, 9, "Language Name")),
            ( localizeWithPath(_moduleId, 10, "Language Name (Localized)")),
        ];
        const rows = ( (localizations
            .sort((a, b) => a.languageId.localeCompare(b.languageId))
            .map(localization => {
            return [
                localization.languageId,
                localization.languageName ?? '',
                localization.localizedLanguageName ?? ''
            ];
        })));
        return {
            data: {
                headers,
                rows
            },
            dispose: () => { }
        };
    }
}
( (Registry.as(Extensions.ExtensionFeaturesRegistry))).registerExtensionFeature({
    id: 'localizations',
    label: ( localizeWithPath(_moduleId, 11, "Langauage Packs")),
    access: {
        canToggle: false
    },
    renderer: ( (new SyncDescriptor(LocalizationsDataRenderer))),
});

export { BaseLocalizationWorkbenchContribution };
