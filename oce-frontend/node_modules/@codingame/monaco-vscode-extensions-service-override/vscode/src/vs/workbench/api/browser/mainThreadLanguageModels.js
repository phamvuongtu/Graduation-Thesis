import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { coalesce } from 'vscode/vscode/vs/base/common/arrays';
import { Event, Emitter } from 'vscode/vscode/vs/base/common/event';
import { DisposableStore, DisposableMap, Disposable, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { localizeWithPath } from 'vscode/vscode/vs/nls';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';
import { Progress } from 'vscode/vscode/vs/platform/progress/common/progress';
import { ExtHostContext, MainContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { ILanguageModelStatsService } from 'vscode/vscode/vs/workbench/contrib/chat/common/languageModelStats.service';
import { ILanguageModelsService } from 'vscode/vscode/vs/workbench/contrib/chat/common/languageModels.service';
import { IAuthenticationAccessService } from 'vscode/vscode/vs/workbench/services/authentication/browser/authenticationAccessService.service';
import { INTERNAL_AUTH_PROVIDER_PREFIX } from 'vscode/vscode/vs/workbench/services/authentication/common/authentication';
import { IAuthenticationService } from 'vscode/vscode/vs/workbench/services/authentication/common/authentication.service';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { IExtensionService } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions.service';

const _moduleId = "vs/workbench/api/browser/mainThreadLanguageModels";
let MainThreadLanguageModels = class MainThreadLanguageModels {
    constructor(extHostContext, _chatProviderService, _languageModelStatsService, _logService, _authenticationService, _authenticationAccessService, _extensionService) {
        this._chatProviderService = _chatProviderService;
        this._languageModelStatsService = _languageModelStatsService;
        this._logService = _logService;
        this._authenticationService = _authenticationService;
        this._authenticationAccessService = _authenticationAccessService;
        this._extensionService = _extensionService;
        this._store = ( (new DisposableStore()));
        this._providerRegistrations = ( (new DisposableMap()));
        this._pendingProgress = ( (new Map()));
        this._proxy = ( (extHostContext.getProxy(ExtHostContext.ExtHostChatProvider)));
        this._proxy.$updateLanguageModels({ added: coalesce(( (_chatProviderService.getLanguageModelIds().map(id => _chatProviderService.lookupLanguageModel(id))))) });
        this._store.add(_chatProviderService.onDidChangeLanguageModels(this._proxy.$updateLanguageModels, this._proxy));
    }
    dispose() {
        this._providerRegistrations.dispose();
        this._store.dispose();
    }
    $registerLanguageModelProvider(handle, identifier, metadata) {
        const dipsosables = ( (new DisposableStore()));
        dipsosables.add(this._chatProviderService.registerLanguageModelChat(identifier, {
            metadata,
            provideChatResponse: async (messages, from, options, progress, token) => {
                const requestId = (Math.random() * 1e6) | 0;
                this._pendingProgress.set(requestId, progress);
                try {
                    await this._proxy.$provideLanguageModelResponse(handle, requestId, from, messages, options, token);
                }
                finally {
                    this._pendingProgress.delete(requestId);
                }
            },
            provideTokenCount: (str, token) => {
                return this._proxy.$provideTokenLength(handle, str, token);
            },
        }));
        if (metadata.auth) {
            dipsosables.add(this._registerAuthenticationProvider(metadata.extension, metadata.auth));
        }
        this._providerRegistrations.set(handle, dipsosables);
    }
    async $handleProgressChunk(requestId, chunk) {
        this._pendingProgress.get(requestId)?.report(chunk);
    }
    $unregisterProvider(handle) {
        this._providerRegistrations.deleteAndDispose(handle);
    }
    $whenLanguageModelChatRequestMade(identifier, extensionId, participant, tokenCount) {
        this._languageModelStatsService.update(identifier, extensionId, participant, tokenCount);
    }
    async $prepareChatAccess(extension, providerId, justification) {
        const activate = this._extensionService.activateByEvent(`onLanguageModelAccess:${providerId}`);
        const metadata = this._chatProviderService.lookupLanguageModel(providerId);
        if (metadata) {
            return metadata;
        }
        await Promise.race([
            activate,
            Event.toPromise(Event.filter(this._chatProviderService.onDidChangeLanguageModels, e => Boolean(e.added?.some(value => value.identifier === providerId))))
        ]);
        return this._chatProviderService.lookupLanguageModel(providerId);
    }
    async $fetchResponse(extension, providerId, requestId, messages, options, token) {
        this._logService.debug('[CHAT] extension request STARTED', extension.value, requestId);
        const task = this._chatProviderService.makeLanguageModelChatRequest(providerId, extension, messages, options, ( (new Progress(value => {
            this._proxy.$handleResponseFragment(requestId, value);
        }))), token);
        task.catch(err => {
            this._logService.error('[CHAT] extension request ERRORED', err, extension.value, requestId);
            throw err;
        }).finally(() => {
            this._logService.debug('[CHAT] extension request DONE', extension.value, requestId);
        });
        return task;
    }
    $countTokens(provider, value, token) {
        return this._chatProviderService.computeTokenLength(provider, value, token);
    }
    _registerAuthenticationProvider(extension, auth) {
        const authProviderId = INTERNAL_AUTH_PROVIDER_PREFIX + extension.value;
        if (this._authenticationService.getProviderIds().includes(authProviderId)) {
            return Disposable.None;
        }
        const accountLabel = auth.accountLabel ?? ( localizeWithPath(_moduleId, 0, 'Language Models'));
        const disposables = ( (new DisposableStore()));
        this._authenticationService.registerAuthenticationProvider(authProviderId, ( (new LanguageModelAccessAuthProvider(authProviderId, auth.providerLabel, accountLabel))));
        disposables.add(toDisposable(() => {
            this._authenticationService.unregisterAuthenticationProvider(authProviderId);
        }));
        disposables.add(this._authenticationAccessService.onDidChangeExtensionSessionAccess(async (e) => {
            const allowedExtensions = this._authenticationAccessService.readAllowedExtensions(authProviderId, accountLabel);
            const accessList = [];
            for (const allowedExtension of allowedExtensions) {
                const from = await this._extensionService.getExtension(allowedExtension.id);
                if (from) {
                    accessList.push({
                        from: from.identifier,
                        to: extension,
                        enabled: allowedExtension.allowed ?? true
                    });
                }
            }
            this._proxy.$updateModelAccesslist(accessList);
        }));
        return disposables;
    }
};
MainThreadLanguageModels = __decorate([
    extHostNamedCustomer(MainContext.MainThreadLanguageModels),
    ( (__param(1, ILanguageModelsService))),
    ( (__param(2, ILanguageModelStatsService))),
    ( (__param(3, ILogService))),
    ( (__param(4, IAuthenticationService))),
    ( (__param(5, IAuthenticationAccessService))),
    ( (__param(6, IExtensionService)))
], MainThreadLanguageModels);
class LanguageModelAccessAuthProvider {
    constructor(id, label, _accountLabel) {
        this.id = id;
        this.label = label;
        this._accountLabel = _accountLabel;
        this.supportsMultipleAccounts = false;
        this._onDidChangeSessions = ( (new Emitter()));
        this.onDidChangeSessions = this._onDidChangeSessions.event;
    }
    async getSessions(scopes) {
        if (scopes === undefined && !this._session) {
            return [];
        }
        if (this._session) {
            return [this._session];
        }
        return [await this.createSession(scopes || [], {})];
    }
    async createSession(scopes, options) {
        this._session = this._createFakeSession(scopes);
        this._onDidChangeSessions.fire({ added: [this._session], changed: [], removed: [] });
        return this._session;
    }
    removeSession(sessionId) {
        if (this._session) {
            this._onDidChangeSessions.fire({ added: [], changed: [], removed: [this._session] });
            this._session = undefined;
        }
        return Promise.resolve();
    }
    _createFakeSession(scopes) {
        return {
            id: 'fake-session',
            account: {
                id: this.id,
                label: this._accountLabel,
            },
            accessToken: 'fake-access-token',
            scopes,
        };
    }
}

export { MainThreadLanguageModels };
