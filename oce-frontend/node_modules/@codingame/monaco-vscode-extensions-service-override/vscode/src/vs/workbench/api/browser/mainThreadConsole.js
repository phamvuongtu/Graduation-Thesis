import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { MainContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { IEnvironmentService } from 'vscode/vscode/vs/platform/environment/common/environment.service';
import { log } from '../../../base/common/console.js';
import { logRemoteEntry, logRemoteEntryIfError } from '../../services/extensions/common/remoteConsoleUtil.js';
import { parseExtensionDevOptions } from '../../services/extensions/common/extensionDevOptions.js';
import { ILogService } from 'vscode/vscode/vs/platform/log/common/log.service';

let MainThreadConsole = class MainThreadConsole {
    constructor(_extHostContext, _environmentService, _logService) {
        this._environmentService = _environmentService;
        this._logService = _logService;
        const devOpts = parseExtensionDevOptions(this._environmentService);
        this._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;
    }
    dispose() {
    }
    $logExtensionHostMessage(entry) {
        if (this._isExtensionDevTestFromCli) {
            logRemoteEntry(this._logService, entry);
        }
        else {
            logRemoteEntryIfError(this._logService, entry, 'Extension Host');
            log(entry, 'Extension Host');
        }
    }
};
MainThreadConsole = __decorate([
    extHostNamedCustomer(MainContext.MainThreadConsole),
    ( __param(1, IEnvironmentService)),
    ( __param(2, ILogService))
], MainThreadConsole);

export { MainThreadConsole };
