import { first } from 'vscode/vscode/vs/base/common/async';
import { Disposable, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import 'vscode/vscode/vs/base/common/path';
import 'vscode/vscode/vs/base/common/platform';
import 'vscode/vscode/vs/platform/instantiation/common/instantiation';

class AbstractURLService extends Disposable {
    constructor() {
        super(...arguments);
        this.handlers = ( new Set());
    }
    open(uri, options) {
        const handlers = [...( this.handlers.values())];
        return first(( handlers.map(h => () => h.handleURL(uri, options))), undefined, false).then(val => val || false);
    }
    registerHandler(handler) {
        this.handlers.add(handler);
        return toDisposable(() => this.handlers.delete(handler));
    }
}

export { AbstractURLService };
