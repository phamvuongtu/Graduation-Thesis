import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { CancellationToken } from 'vscode/vscode/vs/base/common/cancellation';
import { Schemas } from 'vscode/vscode/vs/base/common/network';
import { IFileService } from 'vscode/vscode/vs/platform/files/common/files.service';
import { asTextOrError } from 'vscode/vscode/vs/platform/request/common/request';
import { IRequestService } from 'vscode/vscode/vs/platform/request/common/request.service';

let DownloadService = class DownloadService {
    constructor(requestService, fileService) {
        this.requestService = requestService;
        this.fileService = fileService;
    }
    async download(resource, target, cancellationToken = CancellationToken.None) {
        if (resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote) {
            await this.fileService.copy(resource, target);
            return;
        }
        const options = { type: 'GET', url: ( resource.toString(true)) };
        const context = await this.requestService.request(options, cancellationToken);
        if (context.res.statusCode === 200) {
            await this.fileService.writeFile(target, context.stream);
        }
        else {
            const message = await asTextOrError(context);
            throw ( new Error(`Expected 200, got back ${context.res.statusCode} instead.\n\n${message}`));
        }
    }
};
DownloadService = ( __decorate([
    ( __param(0, IRequestService)),
    ( __param(1, IFileService))
], DownloadService));

export { DownloadService };
