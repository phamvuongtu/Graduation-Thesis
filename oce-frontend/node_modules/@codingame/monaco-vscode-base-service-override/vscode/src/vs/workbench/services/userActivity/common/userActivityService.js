import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { RunOnceScheduler, runWhenGlobalIdle } from 'vscode/vscode/vs/base/common/async';
import { Emitter } from 'vscode/vscode/vs/base/common/event';
import { Disposable, toDisposable } from 'vscode/vscode/vs/base/common/lifecycle';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { userActivityRegistry } from './userActivityRegistry.js';

let UserActivityService = class UserActivityService extends Disposable {
    constructor(instantiationService) {
        super();
        this.markInactive = this._register(( new RunOnceScheduler(() => {
            this.isActive = false;
            this.changeEmitter.fire(false);
        }, 10_000)));
        this.changeEmitter = this._register(( new Emitter()));
        this.active = 0;
        this.isActive = true;
        this.onDidChangeIsActive = this.changeEmitter.event;
        this._register(runWhenGlobalIdle(() => userActivityRegistry.take(this, instantiationService)));
    }
    markActive() {
        if (++this.active === 1) {
            this.isActive = true;
            this.changeEmitter.fire(true);
            this.markInactive.cancel();
        }
        return toDisposable(() => {
            if (--this.active === 0) {
                this.markInactive.schedule();
            }
        });
    }
};
UserActivityService = ( __decorate([
    ( __param(0, IInstantiationService))
], UserActivityService));

export { UserActivityService };
