import { __decorate, __param } from 'vscode/external/tslib/tslib.es6.js';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration.service';
import { ILoggerService } from 'vscode/vscode/vs/platform/log/common/log.service';
import { RequestChannelClient } from '../../../../platform/request/common/requestIpc.js';
import { IRemoteAgentService } from 'vscode/vscode/vs/workbench/services/remote/common/remoteAgentService.service';
import { RequestService } from '../../../../platform/request/browser/requestService.js';
import { CommandsRegistry } from 'vscode/vscode/vs/platform/commands/common/commands';

let BrowserRequestService = class BrowserRequestService extends RequestService {
    constructor(remoteAgentService, configurationService, loggerService) {
        super(configurationService, loggerService);
        this.remoteAgentService = remoteAgentService;
    }
    async request(options, token) {
        try {
            const context = await super.request(options, token);
            const connection = this.remoteAgentService.getConnection();
            if (connection && context.res.statusCode === 405) {
                return this._makeRemoteRequest(connection, options, token);
            }
            return context;
        }
        catch (error) {
            const connection = this.remoteAgentService.getConnection();
            if (connection) {
                return this._makeRemoteRequest(connection, options, token);
            }
            throw error;
        }
    }
    _makeRemoteRequest(connection, options, token) {
        return connection.withChannel('request', channel => ( new RequestChannelClient(channel)).request(options, token));
    }
};
BrowserRequestService = ( __decorate([
    ( __param(0, IRemoteAgentService)),
    ( __param(1, IConfigurationService)),
    ( __param(2, ILoggerService))
], BrowserRequestService));
CommandsRegistry.registerCommand('_workbench.fetchJSON', async function (accessor, url, method) {
    const result = await fetch(url, { method, headers: { Accept: 'application/json' } });
    if (result.ok) {
        return result.json();
    }
    else {
        throw ( new Error(result.statusText));
    }
});

export { BrowserRequestService };
