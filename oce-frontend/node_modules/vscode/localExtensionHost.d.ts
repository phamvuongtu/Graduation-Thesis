import { IMessagePassingProtocol } from './vscode/src/vs/base/parts/ipc/common/ipc.js';
import { LocalProcessRunningLocation } from './vscode/src/vs/workbench/services/extensions/common/extensionRunningLocation.js';
import { IExtensionHost, ExtensionHostStartup, ExtensionHostExtensions } from './vscode/src/vs/workbench/services/extensions/common/extensions.js';
import { IWebWorkerExtensionHostDataProvider } from './vscode/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.js';
import { ITelemetryService } from './vscode/src/vs/platform/telemetry/common/telemetry.service.js';
import { IWorkspaceContextService } from './vscode/src/vs/platform/workspace/common/workspace.service.js';
import { ILabelService } from './vscode/src/vs/platform/label/common/label.service.js';
import { ILogService, ILoggerService } from './vscode/src/vs/platform/log/common/log.service.js';
import { IBrowserWorkbenchEnvironmentService } from './vscode/src/vs/workbench/services/environment/browser/environmentService.service.js';
import { IProductService } from './vscode/src/vs/platform/product/common/productService.service.js';
import { IUserDataProfilesService } from './vscode/src/vs/platform/userDataProfile/common/userDataProfile.service.js';
import { Event } from './vscode/src/vs/base/common/event.js';

declare class LocalExtensionHost implements IExtensionHost {
    readonly runningLocation: LocalProcessRunningLocation;
    readonly startup: ExtensionHostStartup;
    private readonly _initDataProvider;
    private readonly _telemetryService;
    private readonly _contextService;
    private readonly _labelService;
    private readonly _logService;
    private readonly _loggerService;
    private readonly _environmentService;
    private readonly _productService;
    private readonly _userDataProfilesService;
    readonly remoteAuthority: null;
    extensions: ExtensionHostExtensions | null;
    private readonly _extensionHostLogsLocation;
    private _protocolPromise;
    pid: null;
    constructor(runningLocation: LocalProcessRunningLocation, startup: ExtensionHostStartup, _initDataProvider: IWebWorkerExtensionHostDataProvider, _telemetryService: ITelemetryService, _contextService: IWorkspaceContextService, _labelService: ILabelService, _logService: ILogService, _loggerService: ILoggerService, _environmentService: IBrowserWorkbenchEnvironmentService, _productService: IProductService, _userDataProfilesService: IUserDataProfilesService);
    onExit: Event<any>;
    start(): Promise<IMessagePassingProtocol>;
    _start(): Promise<IMessagePassingProtocol>;
    private _createExtHostInitData;
    getInspectPort(): {
        port: number;
        host: string;
    } | undefined;
    enableInspectPort(): Promise<boolean>;
    dispose(): void;
}

export { LocalExtensionHost };
