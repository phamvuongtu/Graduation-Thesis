import { IDisposable } from '../vscode/src/vs/base/common/lifecycle.js';
import { IStorageItemsChangeEvent, IStorage } from '../vscode/src/vs/base/parts/storage/common/storage.js';
import { IEditorOverrideServices } from '../vscode/src/vs/editor/standalone/browser/standaloneServices.js';
import { AbstractStorageService, StorageScope as StorageScope$1 } from '../vscode/src/vs/platform/storage/common/storage.js';
import { IUserDataProfile } from '../vscode/src/vs/platform/userDataProfile/common/userDataProfile.js';
import { IAnyWorkspaceIdentifier } from '../vscode/src/vs/platform/workspace/common/workspace.js';
import { BrowserStorageService } from '../vscode/src/vs/workbench/services/storage/browser/storageService.js';
import { ILogService } from '../vscode/src/vs/platform/log/common/log.service.js';
import { IUserDataProfileService } from '../vscode/src/vs/workbench/services/userDataProfile/common/userDataProfile.service.js';

declare enum StorageScope {
    APPLICATION = -1,
    PROFILE = 0,
    WORKSPACE = 1
}
interface IStorageProvider {
    read(scope: StorageScope): Map<string, string> | undefined;
    write(scope: StorageScope, data: Map<string, string>): Promise<void>;
    close?(scope: StorageScope): Promise<void>;
    onDidChange?(listener: (event: IStorageItemsChangeEvent) => void): IDisposable;
    optimize?(scope: StorageScope): Promise<void>;
}
declare class ExternalStorageService extends AbstractStorageService {
    protected readonly provider: IStorageProvider;
    private fallbackOverride?;
    private readonly applicationStorage;
    private readonly profileStorage;
    private readonly workspaceStorage;
    constructor(provider: IStorageProvider, fallbackOverride?: Record<string, unknown> | undefined);
    protected getStorage(scope: StorageScope$1): IStorage;
    protected getLogDetails(scope: StorageScope$1): string | undefined;
    protected doInitialize(): Promise<void>;
    protected switchToProfile(): Promise<void>;
    protected switchToWorkspace(): Promise<void>;
    hasScope(_scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;
    get(key: string, scope: StorageScope$1, fallbackValue: string): string;
    get(key: string, scope: StorageScope$1): string | undefined;
    getBoolean(key: string, scope: StorageScope$1, fallbackValue: boolean): boolean;
    getBoolean(key: string, scope: StorageScope$1): boolean | undefined;
    getNumber(key: string, scope: StorageScope$1, fallbackValue: number): number;
    getNumber(key: string, scope: StorageScope$1): number | undefined;
    getObject(key: string, scope: StorageScope$1, fallbackValue: object): object;
    getObject(key: string, scope: StorageScope$1): object | undefined;
}
declare class InjectedBrowserStorageService extends BrowserStorageService {
    private fallbackOverride;
    constructor(fallbackOverride: Record<string, unknown> | undefined, userDataProfileService: IUserDataProfileService, logService: ILogService);
    get(key: string, scope: StorageScope$1, fallbackValue: string): string;
    get(key: string, scope: StorageScope$1): string | undefined;
    getBoolean(key: string, scope: StorageScope$1, fallbackValue: boolean): boolean;
    getBoolean(key: string, scope: StorageScope$1): boolean | undefined;
    getNumber(key: string, scope: StorageScope$1, fallbackValue: number): number;
    getNumber(key: string, scope: StorageScope$1): number | undefined;
    getObject(key: string, scope: StorageScope$1, fallbackValue: object): object;
    getObject(key: string, scope: StorageScope$1): object | undefined;
}
interface StorageServiceParameters {
    customProvider?: IStorageProvider;
    /**
     * Allows to override the storage key default values
     */
    fallbackOverride?: Record<string, unknown>;
}
declare function getStorageServiceOverride({ customProvider, fallbackOverride }?: StorageServiceParameters): IEditorOverrideServices;

export { InjectedBrowserStorageService as BrowserStorageService, ExternalStorageService, IStorageItemsChangeEvent, type IStorageProvider, StorageScope, getStorageServiceOverride as default };
