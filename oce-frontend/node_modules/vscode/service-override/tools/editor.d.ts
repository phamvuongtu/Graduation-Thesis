import { IEditorPane, IUntypedEditorInput, IUntitledTextResourceEditorInput, IResourceDiffEditorInput, ITextDiffEditorPane } from '../../vscode/src/vs/workbench/common/editor.js';
import { IReference } from '../../vscode/src/vs/base/common/lifecycle.js';
import { IInstantiationService } from '../../vscode/src/vs/platform/instantiation/common/instantiation.js';
import { EditorInput } from '../../vscode/src/vs/workbench/common/editor/editorInput.js';
import { IEditorOptions, IResourceEditorInput, ITextResourceEditorInput } from '../../vscode/src/vs/platform/editor/common/editor.js';
import { IConfigurationService } from '../../vscode/src/vs/platform/configuration/common/configuration.service.js';
import { PreferredGroup } from '../../vscode/src/vs/workbench/services/editor/common/editorService.js';
import '../../vscode/src/vs/editor/editor.api.js';
import { ICodeEditor, IDiffEditor } from '../../vscode/src/vs/editor/browser/editorBrowser.js';
import { IFileService } from '../../vscode/src/vs/platform/files/common/files.service.js';
import { IUriIdentityService } from '../../vscode/src/vs/platform/uriIdentity/common/uriIdentity.service.js';
import { IHostService } from '../../vscode/src/vs/workbench/services/host/browser/host.service.js';
import { IResolvedTextEditorModel, ITextModelService } from '../../vscode/src/vs/editor/common/services/resolverService.js';
import { EditorService } from '../../vscode/src/vs/workbench/services/editor/browser/editorService.js';
import { IEditorGroupsService } from '../../vscode/src/vs/workbench/services/editor/common/editorGroupsService.service.js';
import { IWorkspaceTrustRequestService } from '../../vscode/src/vs/platform/workspace/common/workspaceTrust.service.js';
import { IEditorResolverService } from '../../vscode/src/vs/workbench/services/editor/common/editorResolverService.service.js';
import { IWorkspaceContextService } from '../../vscode/src/vs/platform/workspace/common/workspace.service.js';
import { ITextEditorService } from '../../vscode/src/vs/workbench/services/textfile/common/textEditorService.service.js';

type OpenEditor = (modelRef: IReference<IResolvedTextEditorModel>, options: IEditorOptions | undefined, sideBySide?: boolean) => Promise<ICodeEditor | undefined>;
declare class MonacoEditorService extends EditorService {
    private _isEditorPartVisible;
    constructor(_openEditorFallback: OpenEditor | undefined, _isEditorPartVisible: () => boolean, _editorGroupService: IEditorGroupsService, instantiationService: IInstantiationService, fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, uriIdentityService: IUriIdentityService, editorResolverService: IEditorResolverService, workspaceTrustRequestService: IWorkspaceTrustRequestService, hostService: IHostService, textEditorService: ITextEditorService, textModelService: ITextModelService);
    get activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined;
    openEditor(editor: EditorInput, options?: IEditorOptions, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IUntypedEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: ITextResourceEditorInput | IUntitledTextResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceDiffEditorInput, group?: PreferredGroup): Promise<ITextDiffEditorPane | undefined>;
    openEditor(editor: EditorInput | IUntypedEditorInput, optionsOrPreferredGroup?: IEditorOptions | PreferredGroup, preferredGroup?: PreferredGroup): Promise<IEditorPane | undefined>;
}

export { MonacoEditorService, type OpenEditor };
