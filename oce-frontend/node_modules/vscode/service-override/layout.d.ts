import { IEditorOverrideServices } from '../vscode/src/vs/editor/standalone/browser/standaloneServices.js';
import { Parts, Position, PanelAlignment } from '../vscode/src/vs/workbench/services/layout/browser/layoutService.js';
import { IWorkbenchLayoutService } from '../vscode/src/vs/workbench/services/layout/browser/layoutService.service.js';
import { ILayoutOffsetInfo } from '../vscode/src/vs/platform/layout/browser/layoutService.js';
import { ILayoutService } from '../vscode/src/vs/platform/layout/browser/layoutService.service.js';
import { Event } from '../vscode/src/vs/base/common/event.js';
import { IDimension, Dimension } from '../vscode/src/vs/base/browser/dom.js';
import { Part } from '../vscode/src/vs/workbench/browser/part.js';
import { ServicesAccessor } from '../vscode/src/vs/platform/instantiation/common/instantiation.js';
import { Disposable, DisposableStore } from '../vscode/src/vs/base/common/lifecycle.js';
import { IDisposable } from '@xterm/headless';

declare class LayoutService extends Disposable implements ILayoutService, IWorkbenchLayoutService {
    mainContainer: HTMLElement;
    readonly _serviceBrand: undefined;
    private paneCompositeService;
    private editorGroupService;
    private statusBarService;
    private viewDescriptorService;
    private configurationService;
    private auxiliaryWindowService;
    private hostService;
    private activeContainerId;
    private sideBarPosition;
    private panelPosition;
    constructor(mainContainer?: HTMLElement);
    whenContainerStylesLoaded(): undefined;
    onDidChangeMainEditorCenteredLayout: Event<any>;
    whenActiveContainerStylesLoaded: Promise<void>;
    hasMainWindowBorder(): boolean;
    getMainWindowBorderRadius(): string | undefined;
    isMainEditorLayoutCentered(): boolean;
    centerMainEditorLayout(): void;
    private readonly _onDidLayoutContainer;
    readonly onDidLayoutContainer: Event<{
        readonly container: HTMLElement;
        readonly dimension: IDimension;
    }>;
    private readonly _onDidAddContainer;
    readonly onDidAddContainer: Event<{
        readonly container: HTMLElement;
        readonly disposables: DisposableStore;
    }>;
    private readonly _onDidRemoveContainer;
    readonly onDidRemoveContainer: Event<HTMLElement>;
    private readonly _onDidLayoutMainContainer;
    readonly onDidLayoutMainContainer: Event<IDimension>;
    private readonly _onDidLayoutActiveContainer;
    readonly onDidLayoutActiveContainer: Event<IDimension>;
    private readonly _onDidChangeActiveContainer;
    readonly onDidChangeActiveContainer: Event<void>;
    get activeContainer(): HTMLElement;
    get containers(): Iterable<HTMLElement>;
    private getContainerFromDocument;
    mainContainerOffset: {
        top: number;
        quickPickTop: number;
    };
    activeContainerOffset: {
        top: number;
        quickPickTop: number;
    };
    onDidChangeFullscreen: Event<any>;
    onDidChangeZenMode: Event<any>;
    onDidChangeWindowMaximized: Event<any>;
    onDidChangeCenteredLayout: Event<any>;
    private readonly _onDidChangePanelPosition;
    readonly onDidChangePanelPosition: Event<string>;
    private readonly _onDidChangeSideBarPosition;
    readonly onDidChangeSideBarPosition: Event<string>;
    onDidChangePanelAlignment: Event<any>;
    onDidChangeNotificationsVisibility: Event<any>;
    openedDefaultEditors: boolean;
    whenRestored: Promise<void>;
    init(accessor: ServicesAccessor): void;
    private handleContainerDidLayout;
    private getActiveContainerId;
    private onActiveWindowChanged;
    private isActivityBarHidden;
    focusPart(part: Parts): void;
    getDimension(part: Parts): Dimension | undefined;
    toggleMaximizedPanel(): void;
    toggleMenuBar(): void;
    setPanelPosition(position: Position): void;
    getPanelAlignment(): PanelAlignment;
    setPanelAlignment(): void;
    toggleZenMode(): void;
    isEditorLayoutCentered(): boolean;
    centerEditorLayout(): void;
    resizePart(): void;
    isWindowMaximized(): boolean;
    updateWindowMaximizedState(): void;
    getVisibleNeighborPart(): Parts | undefined;
    getMaximumEditorDimensions(): Dimension;
    isPanelMaximized(): boolean;
    getPanelPosition(): Position;
    private readonly parts;
    hasFocus(part: Parts): boolean;
    getContainer(window: Window): HTMLElement;
    getContainer(part: Parts): HTMLElement | undefined;
    getPart(key: Parts): Part | undefined;
    private hiddenParts;
    private hasViews;
    setPartHidden(hidden: boolean, part: Parts): void;
    isVisible(part: Parts): boolean;
    getSideBarPosition(): Position;
    setSideBarPosition(position: Position): void;
    registerPart(part: Part): IDisposable;
    isRestored(): boolean;
    private _onDidChangePartVisibility;
    onDidChangePartVisibility: Event<void>;
    readonly offset: ILayoutOffsetInfo;
    private readonly _onDidLayout;
    readonly onDidLayout: Event<IDimension>;
    private _mainContainerDimension;
    get mainContainerDimension(): IDimension;
    get activeContainerDimension(): IDimension;
    layout(): void;
    get hasContainer(): boolean;
    focus(): void;
}
declare function getServiceOverride(): IEditorOverrideServices;
/**
 * @deprecated Provide container via the services `initialize` function
 */
declare function getServiceOverride(container?: HTMLElement): IEditorOverrideServices;

export { LayoutService, getServiceOverride as default };
