import { IDisposable } from '../vscode/src/vs/base/common/lifecycle.js';
import { URI } from '../vscode/src/vs/base/common/uri.js';
import { IEditorOverrideServices } from '../vscode/src/vs/editor/standalone/browser/standaloneServices.js';
import { IConfigurationRegistry } from '../vscode/src/vs/platform/configuration/common/configurationRegistry.js';
export { ConfigurationScope, IConfigurationDefaults, IConfigurationNode } from '../vscode/src/vs/platform/configuration/common/configurationRegistry.js';
import { IFileWriteOptions } from '../vscode/src/vs/platform/files/common/files.js';
import { IAnyWorkspaceIdentifier } from '../vscode/src/vs/platform/workspace/common/workspace.js';
export { IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from '../vscode/src/vs/platform/workspace/common/workspace.js';
export { IStoredWorkspace, IWorkspaceFolderCreationData } from '../vscode/src/vs/platform/workspaces/common/workspaces.js';
export { IColorCustomizations, IThemeScopedColorCustomizations } from '../vscode/src/vs/workbench/services/themes/common/workbenchThemeService.js';

declare const defaultUserConfigurationFile: URI;
/**
 * Should be called only BEFORE the service are initialized to initialize the file on the filesystem before the configuration service initializes
 */
declare function initUserConfiguration(configurationJson: string, options?: Partial<IFileWriteOptions>, file?: URI): Promise<void>;
/**
 * Can be called at any time after the services are initialized to update the user configuration
 */
declare function updateUserConfiguration(configurationJson: string): Promise<void>;
declare function getUserConfiguration(): Promise<string>;
declare function onUserConfigurationChange(callback: () => void): IDisposable;
declare const configurationRegistry: IConfigurationRegistry;
declare function reinitializeWorkspace(workspace: IAnyWorkspaceIdentifier): Promise<void>;
declare function getServiceOverride(): IEditorOverrideServices;
/**
 * @deprecated Provide workspace via the services `initialize` function `configuration.workspaceProvider` parameter
 */
declare function getServiceOverride(defaultWorkspace?: URI | IAnyWorkspaceIdentifier): IEditorOverrideServices;

export { IAnyWorkspaceIdentifier, configurationRegistry, getServiceOverride as default, defaultUserConfigurationFile, getUserConfiguration, initUserConfiguration, onUserConfigurationChange, reinitializeWorkspace, updateUserConfiguration };
