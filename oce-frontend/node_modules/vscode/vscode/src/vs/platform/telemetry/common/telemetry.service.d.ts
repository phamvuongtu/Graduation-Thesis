import { ServiceIdentifier } from '../../instantiation/common/instantiation.js';
import { ClassifiedEvent, OmitMetadata, IGDPRProperty, StrictPropertyCheck } from './gdprTypings.js';
import { TelemetryLevel, ITelemetryData } from './telemetry.js';

declare const ITelemetryService: ServiceIdentifier<ITelemetryService>;
interface ITelemetryService {
    readonly _serviceBrand: undefined;
    readonly telemetryLevel: TelemetryLevel;
    readonly sessionId: string;
    readonly machineId: string;
    readonly sqmId: string;
    readonly firstSessionDate: string;
    readonly msftInternal?: boolean;
    /**
    * Whether error telemetry will get sent. If false, `publicLogError` will no-op.
    */
    readonly sendErrorTelemetry: boolean;
    /**
    * @deprecated Use publicLog2 and the typescript GDPR annotation where possible
    */
    publicLog(eventName: string, data?: ITelemetryData): void;
    /**
    * Sends a telemetry event that has been privacy approved.
    * Do not call this unless you have been given approval.
    */
    publicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;
    /**
    * @deprecated Use publicLogError2 and the typescript GDPR annotation where possible
    */
    publicLogError(errorEventName: string, data?: ITelemetryData): void;
    publicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;
    setExperimentProperty(name: string, value: string): void;
}

export { ITelemetryService };
