declare const enum RemoteConnectionType {
    WebSocket = 0,
    Managed = 1
}
declare class ManagedRemoteConnection {
    readonly id: number;
    readonly type = RemoteConnectionType.Managed;
    constructor(id: number);
    toString(): string;
}
declare class WebSocketRemoteConnection {
    readonly host: string;
    readonly port: number;
    readonly type = RemoteConnectionType.WebSocket;
    constructor(host: string, port: number);
    toString(): string;
}
type RemoteConnection = WebSocketRemoteConnection | ManagedRemoteConnection;
type RemoteConnectionOfType<T extends RemoteConnectionType> = RemoteConnection & {
    type: T;
};
interface ResolvedAuthority {
    readonly authority: string;
    readonly connectTo: RemoteConnection;
    readonly connectionToken: string | undefined;
}
interface ResolvedOptions {
    readonly extensionHostEnv?: {
        [key: string]: string | null;
    };
    readonly isTrusted?: boolean;
    readonly authenticationSession?: {
        id: string;
        providerId: string;
    };
}
interface TunnelDescription {
    remoteAddress: {
        port: number;
        host: string;
    };
    localAddress: {
        port: number;
        host: string;
    } | string;
    privacy?: string;
    protocol?: string;
}
interface TunnelPrivacy {
    themeIcon: string;
    id: string;
    label: string;
}
interface TunnelInformation {
    environmentTunnels?: TunnelDescription[];
    features?: {
        elevation: boolean;
        public?: boolean;
        privacyOptions: TunnelPrivacy[];
        protocol: boolean;
    };
}
interface ResolverResult {
    authority: ResolvedAuthority;
    options?: ResolvedOptions;
    tunnelInformation?: TunnelInformation;
}
interface IRemoteConnectionData {
    connectTo: RemoteConnection;
    connectionToken: string | undefined;
}
declare enum RemoteAuthorityResolverErrorCode {
    Unknown = "Unknown",
    NotAvailable = "NotAvailable",
    TemporarilyNotAvailable = "TemporarilyNotAvailable",
    NoResolverFound = "NoResolverFound",
    InvalidAuthority = "InvalidAuthority"
}

export { type IRemoteConnectionData, ManagedRemoteConnection, RemoteAuthorityResolverErrorCode, type RemoteConnection, type RemoteConnectionOfType, RemoteConnectionType, type ResolvedAuthority, type ResolvedOptions, type ResolverResult, type TunnelDescription, type TunnelInformation, type TunnelPrivacy, WebSocketRemoteConnection };
