import { RunOnceScheduler } from '../../../base/common/async.js';
import { Color } from '../../../base/common/color.js';
import { Emitter } from '../../../base/common/event.js';
import { localizeWithPath } from '../../../nls.js';
import { Extensions as Extensions$1 } from '../../jsonschemas/common/jsonContributionRegistry.js';
import { Registry } from '../../registry/common/platform.js';
const _moduleId = "vs/platform/theme/common/tokenClassificationRegistry";
const TOKEN_TYPE_WILDCARD = '*';
const TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR = ':';
const CLASSIFIER_MODIFIER_SEPARATOR = '.';
const idPattern = '\\w+[-_\\w+]*';
const typeAndModifierIdPattern = `^${idPattern}$`;
const selectorPattern = `^(${idPattern}|\\*)(\\${CLASSIFIER_MODIFIER_SEPARATOR}${idPattern})*(${TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR}${idPattern})?$`;
const fontStylePattern = '^(\\s*(italic|bold|underline|strikethrough))*\\s*$';
class TokenStyle {
    constructor(foreground, bold, underline, strikethrough, italic) {
        this.foreground = foreground;
        this.bold = bold;
        this.underline = underline;
        this.strikethrough = strikethrough;
        this.italic = italic;
    }
}
( ((function(TokenStyle) {
    function toJSONObject(style) {
        return {
            _foreground: style.foreground === undefined ? null : Color.Format.CSS.formatHexA(style.foreground, true),
            _bold: style.bold === undefined ? null : style.bold,
            _underline: style.underline === undefined ? null : style.underline,
            _italic: style.italic === undefined ? null : style.italic,
            _strikethrough: style.strikethrough === undefined ? null : style.strikethrough,
        };
    }
    TokenStyle.toJSONObject = toJSONObject;
    function fromJSONObject(obj) {
        if (obj) {
            const boolOrUndef = (b) => (typeof b === 'boolean') ? b : undefined;
            const colorOrUndef = (s) => (typeof s === 'string') ? ( (Color.fromHex(s))) : undefined;
            return (
                 (new TokenStyle(
                    colorOrUndef(obj._foreground),
                    boolOrUndef(obj._bold),
                    boolOrUndef(obj._underline),
                    boolOrUndef(obj._strikethrough),
                    boolOrUndef(obj._italic)
                ))
            );
        }
        return undefined;
    }
    TokenStyle.fromJSONObject = fromJSONObject;
    function equals(s1, s2) {
        if (s1 === s2) {
            return true;
        }
        return s1 !== undefined && s2 !== undefined
            && (s1.foreground instanceof Color ? s1.foreground.equals(s2.foreground) : s2.foreground === undefined)
            && s1.bold === s2.bold
            && s1.underline === s2.underline
            && s1.strikethrough === s2.strikethrough
            && s1.italic === s2.italic;
    }
    TokenStyle.equals = equals;
    function is(s) {
        return s instanceof TokenStyle;
    }
    TokenStyle.is = is;
    function fromData(data) {
        return (
             (new TokenStyle(
                data.foreground,
                data.bold,
                data.underline,
                data.strikethrough,
                data.italic
            ))
        );
    }
    TokenStyle.fromData = fromData;
    function fromSettings(foreground, fontStyle, bold, underline, strikethrough, italic) {
        let foregroundColor = undefined;
        if (foreground !== undefined) {
            foregroundColor = ( (Color.fromHex(foreground)));
        }
        if (fontStyle !== undefined) {
            bold = italic = underline = strikethrough = false;
            const expression = /italic|bold|underline|strikethrough/g;
            let match;
            while ((match = expression.exec(fontStyle))) {
                switch (match[0]) {
                    case 'bold':
                        bold = true;
                        break;
                    case 'italic':
                        italic = true;
                        break;
                    case 'underline':
                        underline = true;
                        break;
                    case 'strikethrough':
                        strikethrough = true;
                        break;
                }
            }
        }
        return (
             (new TokenStyle(foregroundColor, bold, underline, strikethrough, italic))
        );
    }
    TokenStyle.fromSettings = fromSettings;
})(TokenStyle || (TokenStyle = {}))));
var SemanticTokenRule;
( ((function(SemanticTokenRule) {
    function fromJSONObject(registry, o) {
        if (o && typeof o._selector === 'string' && o._style) {
            const style = TokenStyle.fromJSONObject(o._style);
            if (style) {
                try {
                    return { selector: registry.parseTokenSelector(o._selector), style };
                }
                catch (_ignore) {
                }
            }
        }
        return undefined;
    }
    SemanticTokenRule.fromJSONObject = fromJSONObject;
    function toJSONObject(rule) {
        return {
            _selector: rule.selector.id,
            _style: TokenStyle.toJSONObject(rule.style)
        };
    }
    SemanticTokenRule.toJSONObject = toJSONObject;
    function equals(r1, r2) {
        if (r1 === r2) {
            return true;
        }
        return r1 !== undefined && r2 !== undefined
            && r1.selector && r2.selector && r1.selector.id === r2.selector.id
            && TokenStyle.equals(r1.style, r2.style);
    }
    SemanticTokenRule.equals = equals;
    function is(r) {
        return r && r.selector && typeof r.selector.id === 'string' && TokenStyle.is(r.style);
    }
    SemanticTokenRule.is = is;
})(SemanticTokenRule || (SemanticTokenRule = {}))));
const Extensions = {
    TokenClassificationContribution: 'base.contributions.tokenClassification'
};
class TokenClassificationRegistry {
    constructor() {
        this._onDidChangeSchema = ( (new Emitter()));
        this.onDidChangeSchema = this._onDidChangeSchema.event;
        this.currentTypeNumber = 0;
        this.currentModifierBit = 1;
        this.tokenStylingDefaultRules = [];
        this.tokenStylingSchema = {
            type: 'object',
            properties: {},
            patternProperties: {
                [selectorPattern]: getStylingSchemeEntry()
            },
            additionalProperties: false,
            definitions: {
                style: {
                    type: 'object',
                    description: ( localizeWithPath(_moduleId, 0, 'Colors and styles for the token.')),
                    properties: {
                        foreground: {
                            type: 'string',
                            description: ( localizeWithPath(_moduleId, 1, 'Foreground color for the token.')),
                            format: 'color-hex',
                            default: '#ff0000'
                        },
                        background: {
                            type: 'string',
                            deprecationMessage: ( localizeWithPath(_moduleId, 2, 'Token background colors are currently not supported.'))
                        },
                        fontStyle: {
                            type: 'string',
                            description: ( localizeWithPath(
                                _moduleId,
                                3,
                                'Sets the all font styles of the rule: \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'
                            )),
                            pattern: fontStylePattern,
                            patternErrorMessage: ( localizeWithPath(
                                _moduleId,
                                4,
                                'Font style must be \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. The empty string unsets all styles.'
                            )),
                            defaultSnippets: [
                                { label: ( localizeWithPath(_moduleId, 5, 'None (clear inherited style)')), bodyText: '""' },
                                { body: 'italic' },
                                { body: 'bold' },
                                { body: 'underline' },
                                { body: 'strikethrough' },
                                { body: 'italic bold' },
                                { body: 'italic underline' },
                                { body: 'italic strikethrough' },
                                { body: 'bold underline' },
                                { body: 'bold strikethrough' },
                                { body: 'underline strikethrough' },
                                { body: 'italic bold underline' },
                                { body: 'italic bold strikethrough' },
                                { body: 'italic underline strikethrough' },
                                { body: 'bold underline strikethrough' },
                                { body: 'italic bold underline strikethrough' }
                            ]
                        },
                        bold: {
                            type: 'boolean',
                            description: ( localizeWithPath(
                                _moduleId,
                                6,
                                'Sets or unsets the font style to bold. Note, the presence of \'fontStyle\' overrides this setting.'
                            )),
                        },
                        italic: {
                            type: 'boolean',
                            description: ( localizeWithPath(
                                _moduleId,
                                7,
                                'Sets or unsets the font style to italic. Note, the presence of \'fontStyle\' overrides this setting.'
                            )),
                        },
                        underline: {
                            type: 'boolean',
                            description: ( localizeWithPath(
                                _moduleId,
                                8,
                                'Sets or unsets the font style to underline. Note, the presence of \'fontStyle\' overrides this setting.'
                            )),
                        },
                        strikethrough: {
                            type: 'boolean',
                            description: ( localizeWithPath(
                                _moduleId,
                                9,
                                'Sets or unsets the font style to strikethrough. Note, the presence of \'fontStyle\' overrides this setting.'
                            )),
                        }
                    },
                    defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]
                }
            }
        };
        this.tokenTypeById = Object.create(null);
        this.tokenModifierById = Object.create(null);
        this.typeHierarchy = Object.create(null);
    }
    registerTokenType(id, description, superType, deprecationMessage) {
        if (!id.match(typeAndModifierIdPattern)) {
            throw ( (new Error('Invalid token type id.')));
        }
        if (superType && !superType.match(typeAndModifierIdPattern)) {
            throw ( (new Error('Invalid token super type id.')));
        }
        const num = this.currentTypeNumber++;
        const tokenStyleContribution = { num, id, superType, description, deprecationMessage };
        this.tokenTypeById[id] = tokenStyleContribution;
        const stylingSchemeEntry = getStylingSchemeEntry(description, deprecationMessage);
        this.tokenStylingSchema.properties[id] = stylingSchemeEntry;
        this.typeHierarchy = Object.create(null);
    }
    registerTokenModifier(id, description, deprecationMessage) {
        if (!id.match(typeAndModifierIdPattern)) {
            throw ( (new Error('Invalid token modifier id.')));
        }
        const num = this.currentModifierBit;
        this.currentModifierBit = this.currentModifierBit * 2;
        const tokenStyleContribution = { num, id, description, deprecationMessage };
        this.tokenModifierById[id] = tokenStyleContribution;
        this.tokenStylingSchema.properties[`*.${id}`] = getStylingSchemeEntry(description, deprecationMessage);
    }
    parseTokenSelector(selectorString, language) {
        const selector = parseClassifierString(selectorString, language);
        if (!selector.type) {
            return {
                match: () => -1,
                id: '$invalid'
            };
        }
        return {
            match: (type, modifiers, language) => {
                let score = 0;
                if (selector.language !== undefined) {
                    if (selector.language !== language) {
                        return -1;
                    }
                    score += 10;
                }
                if (selector.type !== TOKEN_TYPE_WILDCARD) {
                    const hierarchy = this.getTypeHierarchy(type);
                    const level = hierarchy.indexOf(selector.type);
                    if (level === -1) {
                        return -1;
                    }
                    score += (100 - level);
                }
                for (const selectorModifier of selector.modifiers) {
                    if (modifiers.indexOf(selectorModifier) === -1) {
                        return -1;
                    }
                }
                return score + selector.modifiers.length * 100;
            },
            id: `${[selector.type, ...selector.modifiers.sort()].join('.')}${selector.language !== undefined ? ':' + selector.language : ''}`
        };
    }
    registerTokenStyleDefault(selector, defaults) {
        this.tokenStylingDefaultRules.push({ selector, defaults });
    }
    deregisterTokenStyleDefault(selector) {
        const selectorString = selector.id;
        this.tokenStylingDefaultRules = this.tokenStylingDefaultRules.filter(r => r.selector.id !== selectorString);
    }
    deregisterTokenType(id) {
        delete this.tokenTypeById[id];
        delete this.tokenStylingSchema.properties[id];
        this.typeHierarchy = Object.create(null);
    }
    deregisterTokenModifier(id) {
        delete this.tokenModifierById[id];
        delete this.tokenStylingSchema.properties[`*.${id}`];
    }
    getTokenTypes() {
        return (
             (( (Object.keys(this.tokenTypeById))).map(id => this.tokenTypeById[id]))
        );
    }
    getTokenModifiers() {
        return (
             (( (Object.keys(this.tokenModifierById))).map(id => this.tokenModifierById[id]))
        );
    }
    getTokenStylingSchema() {
        return this.tokenStylingSchema;
    }
    getTokenStylingDefaultRules() {
        return this.tokenStylingDefaultRules;
    }
    getTypeHierarchy(typeId) {
        let hierarchy = this.typeHierarchy[typeId];
        if (!hierarchy) {
            this.typeHierarchy[typeId] = hierarchy = [typeId];
            let type = this.tokenTypeById[typeId];
            while (type && type.superType) {
                hierarchy.push(type.superType);
                type = this.tokenTypeById[type.superType];
            }
        }
        return hierarchy;
    }
    toString() {
        const sorter = (a, b) => {
            const cat1 = a.indexOf('.') === -1 ? 0 : 1;
            const cat2 = b.indexOf('.') === -1 ? 0 : 1;
            if (cat1 !== cat2) {
                return cat1 - cat2;
            }
            return a.localeCompare(b);
        };
        return ( (( (Object.keys(this.tokenTypeById))).sort(sorter).map(k => `- \`${k}\`: ${this.tokenTypeById[k].description}`))).join('\n');
    }
}
const CHAR_LANGUAGE = TOKEN_CLASSIFIER_LANGUAGE_SEPARATOR.charCodeAt(0);
const CHAR_MODIFIER = CLASSIFIER_MODIFIER_SEPARATOR.charCodeAt(0);
function parseClassifierString(s, defaultLanguage) {
    let k = s.length;
    let language = defaultLanguage;
    const modifiers = [];
    for (let i = k - 1; i >= 0; i--) {
        const ch = s.charCodeAt(i);
        if (ch === CHAR_LANGUAGE || ch === CHAR_MODIFIER) {
            const segment = s.substring(i + 1, k);
            k = i;
            if (ch === CHAR_LANGUAGE) {
                language = segment;
            }
            else {
                modifiers.push(segment);
            }
        }
    }
    const type = s.substring(0, k);
    return { type, modifiers, language };
}
const tokenClassificationRegistry = createDefaultTokenClassificationRegistry();
Registry.add(Extensions.TokenClassificationContribution, tokenClassificationRegistry);
function createDefaultTokenClassificationRegistry() {
    const registry = ( (new TokenClassificationRegistry()));
    function registerTokenType(id, description, scopesToProbe = [], superType, deprecationMessage) {
        registry.registerTokenType(id, description, superType, deprecationMessage);
        if (scopesToProbe) {
            registerTokenStyleDefault(id, scopesToProbe);
        }
        return id;
    }
    function registerTokenStyleDefault(selectorString, scopesToProbe) {
        try {
            const selector = registry.parseTokenSelector(selectorString);
            registry.registerTokenStyleDefault(selector, { scopesToProbe });
        }
        catch (e) {
            console.log(e);
        }
    }
    registerTokenType('comment', ( localizeWithPath(_moduleId, 10, "Style for comments.")), [['comment']]);
    registerTokenType('string', ( localizeWithPath(_moduleId, 11, "Style for strings.")), [['string']]);
    registerTokenType('keyword', ( localizeWithPath(_moduleId, 12, "Style for keywords.")), [['keyword.control']]);
    registerTokenType('number', ( localizeWithPath(_moduleId, 13, "Style for numbers.")), [['constant.numeric']]);
    registerTokenType('regexp', ( localizeWithPath(_moduleId, 14, "Style for expressions.")), [['constant.regexp']]);
    registerTokenType('operator', ( localizeWithPath(_moduleId, 15, "Style for operators.")), [['keyword.operator']]);
    registerTokenType('namespace', ( localizeWithPath(_moduleId, 16, "Style for namespaces.")), [['entity.name.namespace']]);
    registerTokenType('type', ( localizeWithPath(_moduleId, 17, "Style for types.")), [['entity.name.type'], ['support.type']]);
    registerTokenType('struct', ( localizeWithPath(_moduleId, 18, "Style for structs.")), [['entity.name.type.struct']]);
    registerTokenType('class', ( localizeWithPath(_moduleId, 19, "Style for classes.")), [['entity.name.type.class'], ['support.class']]);
    registerTokenType('interface', ( localizeWithPath(_moduleId, 20, "Style for interfaces.")), [['entity.name.type.interface']]);
    registerTokenType('enum', ( localizeWithPath(_moduleId, 21, "Style for enums.")), [['entity.name.type.enum']]);
    registerTokenType('typeParameter', ( localizeWithPath(_moduleId, 22, "Style for type parameters.")), [['entity.name.type.parameter']]);
    registerTokenType('function', ( localizeWithPath(_moduleId, 23, "Style for functions")), [['entity.name.function'], ['support.function']]);
    registerTokenType('member', ( localizeWithPath(_moduleId, 24, "Style for member functions")), [], 'method', 'Deprecated use `method` instead');
    registerTokenType('method', ( localizeWithPath(_moduleId, 25, "Style for method (member functions)")), [['entity.name.function.member'], ['support.function']]);
    registerTokenType('macro', ( localizeWithPath(_moduleId, 26, "Style for macros.")), [['entity.name.function.preprocessor']]);
    registerTokenType('variable', ( localizeWithPath(_moduleId, 27, "Style for variables.")), [['variable.other.readwrite'], ['entity.name.variable']]);
    registerTokenType('parameter', ( localizeWithPath(_moduleId, 28, "Style for parameters.")), [['variable.parameter']]);
    registerTokenType('property', ( localizeWithPath(_moduleId, 29, "Style for properties.")), [['variable.other.property']]);
    registerTokenType('enumMember', ( localizeWithPath(_moduleId, 30, "Style for enum members.")), [['variable.other.enummember']]);
    registerTokenType('event', ( localizeWithPath(_moduleId, 31, "Style for events.")), [['variable.other.event']]);
    registerTokenType('decorator', ( localizeWithPath(_moduleId, 32, "Style for decorators & annotations.")), [['entity.name.decorator'], ['entity.name.function']]);
    registerTokenType('label', ( localizeWithPath(_moduleId, 33, "Style for labels. ")), undefined);
    registry.registerTokenModifier('declaration', ( localizeWithPath(_moduleId, 34, "Style for all symbol declarations.")), undefined);
    registry.registerTokenModifier('documentation', ( localizeWithPath(_moduleId, 35, "Style to use for references in documentation.")), undefined);
    registry.registerTokenModifier('static', ( localizeWithPath(_moduleId, 36, "Style to use for symbols that are static.")), undefined);
    registry.registerTokenModifier('abstract', ( localizeWithPath(_moduleId, 37, "Style to use for symbols that are abstract.")), undefined);
    registry.registerTokenModifier('deprecated', ( localizeWithPath(_moduleId, 38, "Style to use for symbols that are deprecated.")), undefined);
    registry.registerTokenModifier('modification', ( localizeWithPath(_moduleId, 39, "Style to use for write accesses.")), undefined);
    registry.registerTokenModifier('async', ( localizeWithPath(_moduleId, 40, "Style to use for symbols that are async.")), undefined);
    registry.registerTokenModifier('readonly', ( localizeWithPath(_moduleId, 41, "Style to use for symbols that are read-only.")), undefined);
    registerTokenStyleDefault('variable.readonly', [['variable.other.constant']]);
    registerTokenStyleDefault('property.readonly', [['variable.other.constant.property']]);
    registerTokenStyleDefault('type.defaultLibrary', [['support.type']]);
    registerTokenStyleDefault('class.defaultLibrary', [['support.class']]);
    registerTokenStyleDefault('interface.defaultLibrary', [['support.class']]);
    registerTokenStyleDefault('variable.defaultLibrary', [['support.variable'], ['support.other.variable']]);
    registerTokenStyleDefault('variable.defaultLibrary.readonly', [['support.constant']]);
    registerTokenStyleDefault('property.defaultLibrary', [['support.variable.property']]);
    registerTokenStyleDefault('property.defaultLibrary.readonly', [['support.constant.property']]);
    registerTokenStyleDefault('function.defaultLibrary', [['support.function']]);
    registerTokenStyleDefault('member.defaultLibrary', [['support.function']]);
    return registry;
}
function getTokenClassificationRegistry() {
    return tokenClassificationRegistry;
}
function getStylingSchemeEntry(description, deprecationMessage) {
    return {
        description,
        deprecationMessage,
        defaultSnippets: [{ body: '${1:#ff0000}' }],
        anyOf: [
            {
                type: 'string',
                format: 'color-hex'
            },
            {
                $ref: '#/definitions/style'
            }
        ]
    };
}
const tokenStylingSchemaId = 'vscode://schemas/token-styling';
const schemaRegistry = ( Registry.as(Extensions$1.JSONContribution));
schemaRegistry.registerSchema(tokenStylingSchemaId, tokenClassificationRegistry.getTokenStylingSchema());
const delayer = ( (new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(tokenStylingSchemaId), 200)));
tokenClassificationRegistry.onDidChangeSchema(() => {
    if (!delayer.isScheduled()) {
        delayer.schedule();
    }
});
export { SemanticTokenRule, TokenStyle, getTokenClassificationRegistry, parseClassifierString, tokenStylingSchemaId, typeAndModifierIdPattern };
