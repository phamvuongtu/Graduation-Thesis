import { URI, UriComponents } from '../../../base/common/uri.js';

interface IConfigurationOverrides {
    overrideIdentifier?: string | null;
    resource?: URI | null;
}
type IConfigurationUpdateOverrides = Omit<IConfigurationOverrides, 'overrideIdentifier'> & {
    overrideIdentifiers?: string[] | null;
};
declare const enum ConfigurationTarget {
    APPLICATION = 1,
    USER = 2,
    USER_LOCAL = 3,
    USER_REMOTE = 4,
    WORKSPACE = 5,
    WORKSPACE_FOLDER = 6,
    DEFAULT = 7,
    MEMORY = 8
}
interface IConfigurationChange {
    keys: string[];
    overrides: [
        string,
        string[]
    ][];
}
interface IConfigurationChangeEvent {
    readonly source: ConfigurationTarget;
    readonly affectedKeys: ReadonlySet<string>;
    readonly change: IConfigurationChange;
    affectsConfiguration(configuration: string, overrides?: IConfigurationOverrides): boolean;
}
interface IInspectValue<T> {
    readonly value?: T;
    readonly override?: T;
    readonly overrides?: {
        readonly identifiers: string[];
        readonly value: T;
    }[];
}
interface IConfigurationValue<T> {
    readonly defaultValue?: T;
    readonly applicationValue?: T;
    readonly userValue?: T;
    readonly userLocalValue?: T;
    readonly userRemoteValue?: T;
    readonly workspaceValue?: T;
    readonly workspaceFolderValue?: T;
    readonly memoryValue?: T;
    readonly policyValue?: T;
    readonly value?: T;
    readonly default?: IInspectValue<T>;
    readonly application?: IInspectValue<T>;
    readonly user?: IInspectValue<T>;
    readonly userLocal?: IInspectValue<T>;
    readonly userRemote?: IInspectValue<T>;
    readonly workspace?: IInspectValue<T>;
    readonly workspaceFolder?: IInspectValue<T>;
    readonly memory?: IInspectValue<T>;
    readonly policy?: {
        value?: T;
    };
    readonly overrideIdentifiers?: string[];
}
interface IConfigurationUpdateOptions {
    /**
     * If `true`, do not notifies the error to user by showing the message box. Default is `false`.
     */
    donotNotifyError?: boolean;
    /**
     * How to handle dirty file when updating the configuration.
     */
    handleDirtyFile?: 'save' | 'revert';
}
interface IConfigurationModel {
    contents: any;
    keys: string[];
    overrides: IOverrides[];
}
interface IOverrides {
    keys: string[];
    contents: any;
    identifiers: string[];
}
interface IConfigurationData {
    defaults: IConfigurationModel;
    policy: IConfigurationModel;
    application: IConfigurationModel;
    user: IConfigurationModel;
    workspace: IConfigurationModel;
    folders: [
        UriComponents,
        IConfigurationModel
    ][];
}

export { ConfigurationTarget, type IConfigurationChange, type IConfigurationChangeEvent, type IConfigurationData, type IConfigurationModel, type IConfigurationOverrides, type IConfigurationUpdateOptions, type IConfigurationUpdateOverrides, type IConfigurationValue, type IInspectValue, type IOverrides };
