import { URI } from '../../../base/common/uri.js';

declare const enum ProfileResourceType {
    Settings = "settings",
    Keybindings = "keybindings",
    Snippets = "snippets",
    Tasks = "tasks",
    Extensions = "extensions",
    GlobalState = "globalState"
}
/**
 * Flags to indicate whether to use the default profile or not.
 */
type UseDefaultProfileFlags = {
    [key in ProfileResourceType]?: boolean;
};
interface IUserDataProfile {
    readonly id: string;
    readonly isDefault: boolean;
    readonly name: string;
    readonly shortName?: string;
    readonly icon?: string;
    readonly location: URI;
    readonly globalStorageHome: URI;
    readonly settingsResource: URI;
    readonly keybindingsResource: URI;
    readonly tasksResource: URI;
    readonly snippetsHome: URI;
    readonly extensionsResource: URI;
    readonly cacheHome: URI;
    readonly useDefaultFlags?: UseDefaultProfileFlags;
    readonly isTransient?: boolean;
}
type DidChangeProfilesEvent = {
    readonly added: readonly IUserDataProfile[];
    readonly removed: readonly IUserDataProfile[];
    readonly updated: readonly IUserDataProfile[];
    readonly all: readonly IUserDataProfile[];
};
interface IUserDataProfileOptions {
    readonly shortName?: string;
    readonly icon?: string;
    readonly useDefaultFlags?: UseDefaultProfileFlags;
    readonly transient?: boolean;
}
interface IUserDataProfileUpdateOptions extends Omit<IUserDataProfileOptions, 'icon'> {
    readonly name?: string;
    readonly icon?: string | null;
}

export { type DidChangeProfilesEvent, type IUserDataProfile, type IUserDataProfileOptions, type IUserDataProfileUpdateOptions, ProfileResourceType, type UseDefaultProfileFlags };
