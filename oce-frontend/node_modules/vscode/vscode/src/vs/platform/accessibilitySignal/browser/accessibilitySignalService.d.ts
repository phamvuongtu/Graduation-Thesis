/** Make sure you understand the doc comments of the method you want to call when using this token! */
declare const AcknowledgeDocCommentsToken: unique symbol;
type AccessibilityModality = 'sound' | 'announcement';
interface IAccessbilitySignalOptions {
    allowManyInParallel?: boolean;
    modality?: AccessibilityModality;
    /**
     * The source that triggered the signal (e.g. "diffEditor.cursorPositionChanged").
     */
    source?: string;
    /**
     * For actions like save or format, depending on the
     * configured value, we will only
     * play the sound if the user triggered the action.
     */
    userGesture?: boolean;
}
/**
 * Corresponds to the audio files in ./media.
*/
declare class Sound {
    readonly fileName: string;
    private static register;
    static readonly error: Sound;
    static readonly warning: Sound;
    static readonly foldedArea: Sound;
    static readonly break: Sound;
    static readonly quickFixes: Sound;
    static readonly taskCompleted: Sound;
    static readonly taskFailed: Sound;
    static readonly terminalBell: Sound;
    static readonly diffLineInserted: Sound;
    static readonly diffLineDeleted: Sound;
    static readonly diffLineModified: Sound;
    static readonly chatRequestSent: Sound;
    static readonly chatResponseReceived1: Sound;
    static readonly chatResponseReceived2: Sound;
    static readonly chatResponseReceived3: Sound;
    static readonly chatResponseReceived4: Sound;
    static readonly clear: Sound;
    static readonly save: Sound;
    static readonly format: Sound;
    static readonly voiceRecordingStarted: Sound;
    static readonly voiceRecordingStopped: Sound;
    static readonly progress: Sound;
    private constructor();
}
declare class SoundSource {
    readonly randomOneOf: Sound[];
    constructor(randomOneOf: Sound[]);
    getSound(deterministic?: boolean): Sound;
}
declare class AccessibilitySignal {
    readonly sound: SoundSource;
    readonly name: string;
    readonly legacySoundSettingsKey: string | undefined;
    readonly settingsKey: string;
    readonly legacyAnnouncementSettingsKey: string | undefined;
    readonly announcementMessage: string | undefined;
    private constructor();
    private static _signals;
    private static register;
    static get allAccessibilitySignals(): AccessibilitySignal[];
    static readonly errorAtPosition: AccessibilitySignal;
    static readonly warningAtPosition: AccessibilitySignal;
    static readonly errorOnLine: AccessibilitySignal;
    static readonly warningOnLine: AccessibilitySignal;
    static readonly foldedArea: AccessibilitySignal;
    static readonly break: AccessibilitySignal;
    static readonly inlineSuggestion: AccessibilitySignal;
    static readonly terminalQuickFix: AccessibilitySignal;
    static readonly onDebugBreak: AccessibilitySignal;
    static readonly noInlayHints: AccessibilitySignal;
    static readonly taskCompleted: AccessibilitySignal;
    static readonly taskFailed: AccessibilitySignal;
    static readonly terminalCommandFailed: AccessibilitySignal;
    static readonly terminalBell: AccessibilitySignal;
    static readonly notebookCellCompleted: AccessibilitySignal;
    static readonly notebookCellFailed: AccessibilitySignal;
    static readonly diffLineInserted: AccessibilitySignal;
    static readonly diffLineDeleted: AccessibilitySignal;
    static readonly diffLineModified: AccessibilitySignal;
    static readonly chatRequestSent: AccessibilitySignal;
    static readonly chatResponseReceived: AccessibilitySignal;
    static readonly progress: AccessibilitySignal;
    static readonly clear: AccessibilitySignal;
    static readonly save: AccessibilitySignal;
    static readonly format: AccessibilitySignal;
    static readonly voiceRecordingStarted: AccessibilitySignal;
    static readonly voiceRecordingStopped: AccessibilitySignal;
}

export { type AccessibilityModality, AccessibilitySignal, AcknowledgeDocCommentsToken, type IAccessbilitySignalOptions, Sound, SoundSource };
