import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { CachedFunction } from '../../../base/common/cache.js';
import { getStructuralKey } from '../../../base/common/equals.js';
import { Disposable, toDisposable } from '../../../base/common/lifecycle.js';
import { FileAccess } from '../../../base/common/network.js';
import { derived } from '../../../base/common/observableInternal/derived.js';
import '../../../base/common/observableInternal/autorun.js';
import { observableFromEvent, ValueWithChangeEventFromObservable } from '../../../base/common/observableInternal/utils.js';
import '../../../base/common/cancellation.js';
import { localizeWithPath } from '../../../nls.js';
import { IAccessibilityService } from '../../accessibility/common/accessibility.service.js';
import { IConfigurationService } from '../../configuration/common/configuration.service.js';
import { ITelemetryService } from '../../telemetry/common/telemetry.service.js';
const _moduleId = "vs/platform/accessibilitySignal/browser/accessibilitySignalService";
const AcknowledgeDocCommentsToken = Symbol('AcknowledgeDocCommentsToken');
let AccessibilitySignalService = class AccessibilitySignalService extends Disposable {
    constructor(configurationService, accessibilityService, telemetryService) {
        super();
        this.configurationService = configurationService;
        this.accessibilityService = accessibilityService;
        this.telemetryService = telemetryService;
        this.sounds = ( (new Map()));
        this.screenReaderAttached = observableFromEvent(this.accessibilityService.onDidChangeScreenReaderOptimized, () =>  this.accessibilityService.isScreenReaderOptimized());
        this.sentTelemetry = ( (new Set()));
        this.playingSounds = ( (new Set()));
        this._signalConfigValue = ( (new CachedFunction(
            (signal) => observableConfigValue(signal.settingsKey, this.configurationService)
        )));
        this._signalEnabledState = ( (new CachedFunction({ getCacheKey: getStructuralKey }, (arg) => {
            return derived(reader => {
                const setting = this._signalConfigValue.get(arg.signal).read(reader);
                if (arg.modality === 'sound' || arg.modality === undefined) {
                    if (checkEnabledState(setting.sound, () => this.screenReaderAttached.read(reader), arg.userGesture)) {
                        return true;
                    }
                }
                if (arg.modality === 'announcement' || arg.modality === undefined) {
                    if (checkEnabledState(setting.announcement, () => this.screenReaderAttached.read(reader), arg.userGesture)) {
                        return true;
                    }
                }
                return false;
            }).recomputeInitiallyAndOnChange(this._store);
        })));
    }
    getEnabledState(signal, userGesture, modality) {
        return (
             (new ValueWithChangeEventFromObservable(this._signalEnabledState.get({ signal, userGesture, modality })))
        );
    }
    async playSignal(signal, options = {}) {
        const shouldPlayAnnouncement = options.modality === 'announcement' || options.modality === undefined;
        const announcementMessage = signal.announcementMessage;
        if (shouldPlayAnnouncement && this.isAnnouncementEnabled(signal, options.userGesture) && announcementMessage) {
            this.accessibilityService.status(announcementMessage);
        }
        const shouldPlaySound = options.modality === 'sound' || options.modality === undefined;
        if (shouldPlaySound && this.isSoundEnabled(signal, options.userGesture)) {
            this.sendSignalTelemetry(signal, options.source);
            await this.playSound(signal.sound.getSound(), options.allowManyInParallel);
        }
    }
    async playSignals(signals) {
        for (const signal of signals) {
            this.sendSignalTelemetry('signal' in signal ? signal.signal : signal, 'source' in signal ? signal.source : undefined);
        }
        const signalArray = ( (signals.map(s => 'signal' in s ? s.signal : s)));
        const announcements = ( (signalArray.filter(signal => this.isAnnouncementEnabled(signal)).map(s => s.announcementMessage)));
        if (announcements.length) {
            this.accessibilityService.status(announcements.join(', '));
        }
        const sounds = ( (new Set(
             (signalArray.filter(signal => this.isSoundEnabled(signal)).map(signal => signal.sound.getSound()))
        )));
        await Promise.all(( (Array.from(sounds).map(sound => this.playSound(sound, true)))));
    }
    sendSignalTelemetry(signal, source) {
        const isScreenReaderOptimized = this.accessibilityService.isScreenReaderOptimized();
        const key = signal.name + (source ? `::${source}` : '') + (isScreenReaderOptimized ? '{screenReaderOptimized}' : '');
        if (( (this.sentTelemetry.has(key))) || this.getVolumeInPercent() === 0) {
            return;
        }
        this.sentTelemetry.add(key);
        this.telemetryService.publicLog2('signal.played', {
            signal: signal.name,
            source: source ?? '',
            isScreenReaderOptimized,
        });
    }
    getVolumeInPercent() {
        const volume = this.configurationService.getValue('accessibilitySignals.volume');
        if (typeof volume !== 'number') {
            return 50;
        }
        return Math.max(Math.min(volume, 100), 0);
    }
    async playSound(sound, allowManyInParallel = false) {
        if (!allowManyInParallel && ( (this.playingSounds.has(sound)))) {
            return;
        }
        this.playingSounds.add(sound);
        const url = ( (( (FileAccess.asBrowserUri(`vs/platform/accessibilitySignal/browser/media/${sound.fileName}`))).toString(true)));
        try {
            const sound = this.sounds.get(url);
            if (sound) {
                sound.volume = this.getVolumeInPercent() / 100;
                sound.currentTime = 0;
                await sound.play();
            }
            else {
                const playedSound = await playAudio(url, this.getVolumeInPercent() / 100);
                this.sounds.set(url, playedSound);
            }
        }
        catch (e) {
            if (!e.message.includes('play() can only be initiated by a user gesture')) {
                console.error('Error while playing sound', e);
            }
        }
        finally {
            this.playingSounds.delete(sound);
        }
    }
    playSignalLoop(signal, milliseconds) {
        let playing = true;
        const playSound = () => {
            if (playing) {
                this.playSignal(signal, { allowManyInParallel: true }).finally(() => {
                    setTimeout(() => {
                        if (playing) {
                            playSound();
                        }
                    }, milliseconds);
                });
            }
        };
        playSound();
        return toDisposable(() => playing = false);
    }
    isAnnouncementEnabled(signal, userGesture) {
        if (!signal.announcementMessage) {
            return false;
        }
        return this._signalEnabledState.get({ signal, userGesture: !!userGesture, modality: 'announcement' }).get();
    }
    isSoundEnabled(signal, userGesture) {
        return this._signalEnabledState.get({ signal, userGesture: !!userGesture, modality: 'sound' }).get();
    }
    onSoundEnabledChanged(signal) {
        return this.getEnabledState(signal, false).onDidChange;
    }
};
AccessibilitySignalService = ( (__decorate([
    ( (__param(0, IConfigurationService))),
    ( (__param(1, IAccessibilityService))),
    ( (__param(2, ITelemetryService)))
], AccessibilitySignalService)));
function checkEnabledState(state, getScreenReaderAttached, isTriggeredByUserGesture) {
    return state === 'on' || state === 'always' || (state === 'auto' && getScreenReaderAttached()) || state === 'userGesture' && isTriggeredByUserGesture;
}
function playAudio(url, volume) {
    return (
         (new Promise((resolve, reject) => {
            const audio = ( (new Audio(url)));
            audio.volume = volume;
            audio.addEventListener('ended', () => {
                resolve(audio);
            });
            audio.addEventListener('error', (e) => {
                reject(e.error);
            });
            audio.play().catch(e => {
                reject(e);
            });
        }))
    );
}
class Sound {
    static register(options) {
        const sound = ( (new Sound(options.fileName)));
        return sound;
    }
    static { this.error = Sound.register({ fileName: 'error.mp3' }); }
    static { this.warning = Sound.register({ fileName: 'warning.mp3' }); }
    static { this.foldedArea = Sound.register({ fileName: 'foldedAreas.mp3' }); }
    static { this.break = Sound.register({ fileName: 'break.mp3' }); }
    static { this.quickFixes = Sound.register({ fileName: 'quickFixes.mp3' }); }
    static { this.taskCompleted = Sound.register({ fileName: 'taskCompleted.mp3' }); }
    static { this.taskFailed = Sound.register({ fileName: 'taskFailed.mp3' }); }
    static { this.terminalBell = Sound.register({ fileName: 'terminalBell.mp3' }); }
    static { this.diffLineInserted = Sound.register({ fileName: 'diffLineInserted.mp3' }); }
    static { this.diffLineDeleted = Sound.register({ fileName: 'diffLineDeleted.mp3' }); }
    static { this.diffLineModified = Sound.register({ fileName: 'diffLineModified.mp3' }); }
    static { this.chatRequestSent = Sound.register({ fileName: 'chatRequestSent.mp3' }); }
    static { this.chatResponseReceived1 = Sound.register({ fileName: 'chatResponseReceived1.mp3' }); }
    static { this.chatResponseReceived2 = Sound.register({ fileName: 'chatResponseReceived2.mp3' }); }
    static { this.chatResponseReceived3 = Sound.register({ fileName: 'chatResponseReceived3.mp3' }); }
    static { this.chatResponseReceived4 = Sound.register({ fileName: 'chatResponseReceived4.mp3' }); }
    static { this.clear = Sound.register({ fileName: 'clear.mp3' }); }
    static { this.save = Sound.register({ fileName: 'save.mp3' }); }
    static { this.format = Sound.register({ fileName: 'format.mp3' }); }
    static { this.voiceRecordingStarted = Sound.register({ fileName: 'voiceRecordingStarted.mp3' }); }
    static { this.voiceRecordingStopped = Sound.register({ fileName: 'voiceRecordingStopped.mp3' }); }
    static { this.progress = Sound.register({ fileName: 'progress.mp3' }); }
    constructor(fileName) {
        this.fileName = fileName;
    }
}
class SoundSource {
    constructor(randomOneOf) {
        this.randomOneOf = randomOneOf;
    }
    getSound(deterministic = false) {
        if (deterministic || this.randomOneOf.length === 1) {
            return this.randomOneOf[0];
        }
        else {
            const index = Math.floor(Math.random() * this.randomOneOf.length);
            return this.randomOneOf[index];
        }
    }
}
class AccessibilitySignal {
    constructor(sound, name, legacySoundSettingsKey, settingsKey, legacyAnnouncementSettingsKey, announcementMessage) {
        this.sound = sound;
        this.name = name;
        this.legacySoundSettingsKey = legacySoundSettingsKey;
        this.settingsKey = settingsKey;
        this.legacyAnnouncementSettingsKey = legacyAnnouncementSettingsKey;
        this.announcementMessage = announcementMessage;
    }
    static { this._signals = ( (new Set())); }
    static register(options) {
        const soundSource = ( (new SoundSource(
            'randomOneOf' in options.sound ? options.sound.randomOneOf : [options.sound]
        )));
        const signal = ( (new AccessibilitySignal(
            soundSource,
            options.name,
            options.legacySoundSettingsKey,
            options.settingsKey,
            options.legacyAnnouncementSettingsKey,
            options.announcementMessage
        )));
        AccessibilitySignal._signals.add(signal);
        return signal;
    }
    static get allAccessibilitySignals() {
        return [...this._signals];
    }
    static { this.errorAtPosition = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 0, 'Error at Position')),
        sound: Sound.error,
        announcementMessage: ( localizeWithPath(_moduleId, 1, 'Error')),
        settingsKey: 'accessibility.signals.positionHasError',
    }); }
    static { this.warningAtPosition = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 2, 'Warning at Position')),
        sound: Sound.warning,
        announcementMessage: ( localizeWithPath(_moduleId, 3, 'Warning')),
        settingsKey: 'accessibility.signals.positionHasWarning',
    }); }
    static { this.errorOnLine = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 4, 'Error on Line')),
        sound: Sound.error,
        legacySoundSettingsKey: 'audioCues.lineHasError',
        legacyAnnouncementSettingsKey: "accessibility.alert.error" ,
        announcementMessage: ( localizeWithPath(_moduleId, 5, 'Error on Line')),
        settingsKey: 'accessibility.signals.lineHasError',
    }); }
    static { this.warningOnLine = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 6, 'Warning on Line')),
        sound: Sound.warning,
        legacySoundSettingsKey: 'audioCues.lineHasWarning',
        legacyAnnouncementSettingsKey: "accessibility.alert.warning" ,
        announcementMessage: ( localizeWithPath(_moduleId, 7, 'Warning on Line')),
        settingsKey: 'accessibility.signals.lineHasWarning',
    }); }
    static { this.foldedArea = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 8, 'Folded Area on Line')),
        sound: Sound.foldedArea,
        legacySoundSettingsKey: 'audioCues.lineHasFoldedArea',
        legacyAnnouncementSettingsKey: "accessibility.alert.foldedArea" ,
        announcementMessage: ( localizeWithPath(_moduleId, 9, 'Folded')),
        settingsKey: 'accessibility.signals.lineHasFoldedArea',
    }); }
    static { this.break = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 10, 'Breakpoint on Line')),
        sound: Sound.break,
        legacySoundSettingsKey: 'audioCues.lineHasBreakpoint',
        legacyAnnouncementSettingsKey: "accessibility.alert.breakpoint" ,
        announcementMessage: ( localizeWithPath(_moduleId, 11, 'Breakpoint')),
        settingsKey: 'accessibility.signals.lineHasBreakpoint',
    }); }
    static { this.inlineSuggestion = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 12, 'Inline Suggestion on Line')),
        sound: Sound.quickFixes,
        legacySoundSettingsKey: 'audioCues.lineHasInlineSuggestion',
        settingsKey: 'accessibility.signals.lineHasInlineSuggestion',
    }); }
    static { this.terminalQuickFix = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 13, 'Terminal Quick Fix')),
        sound: Sound.quickFixes,
        legacySoundSettingsKey: 'audioCues.terminalQuickFix',
        legacyAnnouncementSettingsKey: "accessibility.alert.terminalQuickFix" ,
        announcementMessage: ( localizeWithPath(_moduleId, 14, 'Quick Fix')),
        settingsKey: 'accessibility.signals.terminalQuickFix',
    }); }
    static { this.onDebugBreak = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 15, 'Debugger Stopped on Breakpoint')),
        sound: Sound.break,
        legacySoundSettingsKey: 'audioCues.onDebugBreak',
        legacyAnnouncementSettingsKey: "accessibility.alert.onDebugBreak" ,
        announcementMessage: ( localizeWithPath(_moduleId, 16, 'Breakpoint')),
        settingsKey: 'accessibility.signals.onDebugBreak',
    }); }
    static { this.noInlayHints = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 17, 'No Inlay Hints on Line')),
        sound: Sound.error,
        legacySoundSettingsKey: 'audioCues.noInlayHints',
        legacyAnnouncementSettingsKey: "accessibility.alert.noInlayHints" ,
        announcementMessage: ( localizeWithPath(_moduleId, 18, 'No Inlay Hints')),
        settingsKey: 'accessibility.signals.noInlayHints',
    }); }
    static { this.taskCompleted = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 19, 'Task Completed')),
        sound: Sound.taskCompleted,
        legacySoundSettingsKey: 'audioCues.taskCompleted',
        legacyAnnouncementSettingsKey: "accessibility.alert.taskCompleted" ,
        announcementMessage: ( localizeWithPath(_moduleId, 20, 'Task Completed')),
        settingsKey: 'accessibility.signals.taskCompleted',
    }); }
    static { this.taskFailed = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 21, 'Task Failed')),
        sound: Sound.taskFailed,
        legacySoundSettingsKey: 'audioCues.taskFailed',
        legacyAnnouncementSettingsKey: "accessibility.alert.taskFailed" ,
        announcementMessage: ( localizeWithPath(_moduleId, 22, 'Task Failed')),
        settingsKey: 'accessibility.signals.taskFailed',
    }); }
    static { this.terminalCommandFailed = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 23, 'Terminal Command Failed')),
        sound: Sound.error,
        legacySoundSettingsKey: 'audioCues.terminalCommandFailed',
        legacyAnnouncementSettingsKey: "accessibility.alert.terminalCommandFailed" ,
        announcementMessage: ( localizeWithPath(_moduleId, 24, 'Command Failed')),
        settingsKey: 'accessibility.signals.terminalCommandFailed',
    }); }
    static { this.terminalBell = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 25, 'Terminal Bell')),
        sound: Sound.terminalBell,
        legacySoundSettingsKey: 'audioCues.terminalBell',
        legacyAnnouncementSettingsKey: "accessibility.alert.terminalBell" ,
        announcementMessage: ( localizeWithPath(_moduleId, 26, 'Terminal Bell')),
        settingsKey: 'accessibility.signals.terminalBell',
    }); }
    static { this.notebookCellCompleted = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 27, 'Notebook Cell Completed')),
        sound: Sound.taskCompleted,
        legacySoundSettingsKey: 'audioCues.notebookCellCompleted',
        legacyAnnouncementSettingsKey: "accessibility.alert.notebookCellCompleted" ,
        announcementMessage: ( localizeWithPath(_moduleId, 28, 'Notebook Cell Completed')),
        settingsKey: 'accessibility.signals.notebookCellCompleted',
    }); }
    static { this.notebookCellFailed = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 29, 'Notebook Cell Failed')),
        sound: Sound.taskFailed,
        legacySoundSettingsKey: 'audioCues.notebookCellFailed',
        legacyAnnouncementSettingsKey: "accessibility.alert.notebookCellFailed" ,
        announcementMessage: ( localizeWithPath(_moduleId, 30, 'Notebook Cell Failed')),
        settingsKey: 'accessibility.signals.notebookCellFailed',
    }); }
    static { this.diffLineInserted = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 31, 'Diff Line Inserted')),
        sound: Sound.diffLineInserted,
        legacySoundSettingsKey: 'audioCues.diffLineInserted',
        settingsKey: 'accessibility.signals.diffLineInserted',
    }); }
    static { this.diffLineDeleted = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 32, 'Diff Line Deleted')),
        sound: Sound.diffLineDeleted,
        legacySoundSettingsKey: 'audioCues.diffLineDeleted',
        settingsKey: 'accessibility.signals.diffLineDeleted',
    }); }
    static { this.diffLineModified = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 33, 'Diff Line Modified')),
        sound: Sound.diffLineModified,
        legacySoundSettingsKey: 'audioCues.diffLineModified',
        settingsKey: 'accessibility.signals.diffLineModified',
    }); }
    static { this.chatRequestSent = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 34, 'Chat Request Sent')),
        sound: Sound.chatRequestSent,
        legacySoundSettingsKey: 'audioCues.chatRequestSent',
        legacyAnnouncementSettingsKey: "accessibility.alert.chatRequestSent" ,
        announcementMessage: ( localizeWithPath(_moduleId, 35, 'Chat Request Sent')),
        settingsKey: 'accessibility.signals.chatRequestSent',
    }); }
    static { this.chatResponseReceived = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 36, 'Chat Response Received')),
        legacySoundSettingsKey: 'audioCues.chatResponseReceived',
        sound: {
            randomOneOf: [
                Sound.chatResponseReceived1,
                Sound.chatResponseReceived2,
                Sound.chatResponseReceived3,
                Sound.chatResponseReceived4
            ]
        },
        settingsKey: 'accessibility.signals.chatResponseReceived'
    }); }
    static { this.progress = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 37, 'Progress')),
        sound: Sound.progress,
        legacySoundSettingsKey: 'audioCues.chatResponsePending',
        legacyAnnouncementSettingsKey: "accessibility.alert.chatResponseProgress" ,
        announcementMessage: ( localizeWithPath(_moduleId, 38, 'Progress')),
        settingsKey: 'accessibility.signals.progress'
    }); }
    static { this.clear = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 39, 'Clear')),
        sound: Sound.clear,
        legacySoundSettingsKey: 'audioCues.clear',
        legacyAnnouncementSettingsKey: "accessibility.alert.clear" ,
        announcementMessage: ( localizeWithPath(_moduleId, 40, 'Clear')),
        settingsKey: 'accessibility.signals.clear'
    }); }
    static { this.save = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 41, 'Save')),
        sound: Sound.save,
        legacySoundSettingsKey: 'audioCues.save',
        legacyAnnouncementSettingsKey: "accessibility.alert.save" ,
        announcementMessage: ( localizeWithPath(_moduleId, 42, 'Save')),
        settingsKey: 'accessibility.signals.save'
    }); }
    static { this.format = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 43, 'Format')),
        sound: Sound.format,
        legacySoundSettingsKey: 'audioCues.format',
        legacyAnnouncementSettingsKey: "accessibility.alert.format" ,
        announcementMessage: ( localizeWithPath(_moduleId, 44, 'Format')),
        settingsKey: 'accessibility.signals.format'
    }); }
    static { this.voiceRecordingStarted = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 45, 'Voice Recording Started')),
        sound: Sound.voiceRecordingStarted,
        legacySoundSettingsKey: 'audioCues.voiceRecordingStarted',
        settingsKey: 'accessibility.signals.voiceRecordingStarted'
    }); }
    static { this.voiceRecordingStopped = AccessibilitySignal.register({
        name: ( localizeWithPath(_moduleId, 46, 'Voice Recording Stopped')),
        sound: Sound.voiceRecordingStopped,
        legacySoundSettingsKey: 'audioCues.voiceRecordingStopped',
        settingsKey: 'accessibility.signals.voiceRecordingStopped'
    }); }
}
function observableConfigValue(key, configurationService) {
    return observableFromEvent((handleChange) => configurationService.onDidChangeConfiguration(e => {
        if (e.affectsConfiguration(key)) {
            handleChange(e);
        }
    }), () => configurationService.getValue(key));
}
export { AccessibilitySignal, AccessibilitySignalService, AcknowledgeDocCommentsToken, Sound, SoundSource, observableConfigValue };
