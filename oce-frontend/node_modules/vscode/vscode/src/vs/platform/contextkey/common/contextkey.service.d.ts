import { ServiceIdentifier } from '../../instantiation/common/instantiation.js';
import { Event } from '../../../base/common/event.js';
import { IContextKeyChangeEvent, ContextKeyValue, IContextKey, ContextKeyExpression, IContextKeyServiceTarget, IScopedContextKeyService, IContext } from './contextkey.js';

declare const IContextKeyService: ServiceIdentifier<IContextKeyService>;
interface IContextKeyService {
    readonly _serviceBrand: undefined;
    onDidChangeContext: Event<IContextKeyChangeEvent>;
    bufferChangeEvents(callback: Function): void;
    createKey<T extends ContextKeyValue>(key: string, defaultValue: T | undefined): IContextKey<T>;
    contextMatchesRules(rules: ContextKeyExpression | undefined): boolean;
    getContextKeyValue<T>(key: string): T | undefined;
    createScoped(target: IContextKeyServiceTarget): IScopedContextKeyService;
    createOverlay(overlay: Iterable<[
        string,
        any
    ]>): IContextKeyService;
    getContext(target: IContextKeyServiceTarget | null): IContext;
    updateParent(parentContextKeyService: IContextKeyService): void;
}

export { IContextKeyService };
