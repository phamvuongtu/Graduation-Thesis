import { localizeWithPath } from '../../nls.js';
import { RawContextKey } from '../../platform/contextkey/common/contextkey.js';
const _moduleId = "vs/editor/common/editorContextKeys";
var EditorContextKeys;
( ((function(EditorContextKeys) {
    EditorContextKeys.editorSimpleInput = ( (new RawContextKey('editorSimpleInput', false, true)));
    EditorContextKeys.editorTextFocus = ( (new RawContextKey('editorTextFocus', false, ( localizeWithPath(_moduleId, 0, "Whether the editor text has focus (cursor is blinking)")))));
    EditorContextKeys.focus = ( (new RawContextKey('editorFocus', false, ( localizeWithPath(
     _moduleId,
     1,
     "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"
    )))));
    EditorContextKeys.textInputFocus = ( (new RawContextKey('textInputFocus', false, ( localizeWithPath(
     _moduleId,
     2,
     "Whether an editor or a rich text input has focus (cursor is blinking)"
    )))));
    EditorContextKeys.readOnly = ( (new RawContextKey('editorReadonly', false, ( localizeWithPath(_moduleId, 3, "Whether the editor is read-only")))));
    EditorContextKeys.inDiffEditor = ( (new RawContextKey('inDiffEditor', false, ( localizeWithPath(_moduleId, 4, "Whether the context is a diff editor")))));
    EditorContextKeys.isEmbeddedDiffEditor = ( (new RawContextKey('isEmbeddedDiffEditor', false, ( localizeWithPath(_moduleId, 5, "Whether the context is an embedded diff editor")))));
    EditorContextKeys.inMultiDiffEditor = ( (new RawContextKey('inMultiDiffEditor', false, ( localizeWithPath(_moduleId, 6, "Whether the context is a multi diff editor")))));
    EditorContextKeys.multiDiffEditorAllCollapsed = ( (new RawContextKey('multiDiffEditorAllCollapsed', undefined, ( localizeWithPath(_moduleId, 7, "Whether all files in multi diff editor are collapsed")))));
    EditorContextKeys.hasChanges = ( (new RawContextKey('diffEditorHasChanges', false, ( localizeWithPath(_moduleId, 8, "Whether the diff editor has changes")))));
    EditorContextKeys.comparingMovedCode = ( (new RawContextKey('comparingMovedCode', false, ( localizeWithPath(_moduleId, 9, "Whether a moved code block is selected for comparison")))));
    EditorContextKeys.accessibleDiffViewerVisible = ( (new RawContextKey('accessibleDiffViewerVisible', false, ( localizeWithPath(_moduleId, 10, "Whether the accessible diff viewer is visible")))));
    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = ( (new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, ( localizeWithPath(
     _moduleId,
     11,
     "Whether the diff editor render side by side inline breakpoint is reached"
    )))));
    EditorContextKeys.diffEditorInlineMode = ( (new RawContextKey('diffEditorInlineMode', false, ( localizeWithPath(_moduleId, 12, "Whether inline mode is active")))));
    EditorContextKeys.diffEditorOriginalWritable = ( (new RawContextKey('diffEditorOriginalWritable', false, ( localizeWithPath(_moduleId, 13, "Whether modified is writable in the diff editor")))));
    EditorContextKeys.diffEditorModifiedWritable = ( (new RawContextKey('diffEditorModifiedWritable', false, ( localizeWithPath(_moduleId, 14, "Whether modified is writable in the diff editor")))));
    EditorContextKeys.diffEditorOriginalUri = ( (new RawContextKey('diffEditorOriginalUri', '', ( localizeWithPath(_moduleId, 15, "The uri of the original document")))));
    EditorContextKeys.diffEditorModifiedUri = ( (new RawContextKey('diffEditorModifiedUri', '', ( localizeWithPath(_moduleId, 16, "The uri of the modified document")))));
    EditorContextKeys.columnSelection = ( (new RawContextKey('editorColumnSelection', false, ( localizeWithPath(_moduleId, 17, "Whether `editor.columnSelection` is enabled")))));
    EditorContextKeys.writable = ( (EditorContextKeys.readOnly.toNegated()));
    EditorContextKeys.hasNonEmptySelection = ( (new RawContextKey('editorHasSelection', false, ( localizeWithPath(_moduleId, 18, "Whether the editor has text selected")))));
    EditorContextKeys.hasOnlyEmptySelection = ( (EditorContextKeys.hasNonEmptySelection.toNegated()));
    EditorContextKeys.hasMultipleSelections = ( (new RawContextKey('editorHasMultipleSelections', false, ( localizeWithPath(_moduleId, 19, "Whether the editor has multiple selections")))));
    EditorContextKeys.hasSingleSelection = ( (EditorContextKeys.hasMultipleSelections.toNegated()));
    EditorContextKeys.tabMovesFocus = ( (new RawContextKey('editorTabMovesFocus', false, ( localizeWithPath(_moduleId, 20, "Whether `Tab` will move focus out of the editor")))));
    EditorContextKeys.tabDoesNotMoveFocus = ( (EditorContextKeys.tabMovesFocus.toNegated()));
    EditorContextKeys.isInEmbeddedEditor = ( (new RawContextKey('isInEmbeddedEditor', false, true)));
    EditorContextKeys.canUndo = ( (new RawContextKey('canUndo', false, true)));
    EditorContextKeys.canRedo = ( (new RawContextKey('canRedo', false, true)));
    EditorContextKeys.hoverVisible = ( (new RawContextKey('editorHoverVisible', false, ( localizeWithPath(_moduleId, 21, "Whether the editor hover is visible")))));
    EditorContextKeys.hoverFocused = ( (new RawContextKey('editorHoverFocused', false, ( localizeWithPath(_moduleId, 22, "Whether the editor hover is focused")))));
    EditorContextKeys.stickyScrollFocused = ( (new RawContextKey('stickyScrollFocused', false, ( localizeWithPath(_moduleId, 23, "Whether the sticky scroll is focused")))));
    EditorContextKeys.stickyScrollVisible = ( (new RawContextKey('stickyScrollVisible', false, ( localizeWithPath(_moduleId, 24, "Whether the sticky scroll is visible")))));
    EditorContextKeys.standaloneColorPickerVisible = ( (new RawContextKey('standaloneColorPickerVisible', false, ( localizeWithPath(_moduleId, 25, "Whether the standalone color picker is visible")))));
    EditorContextKeys.standaloneColorPickerFocused = ( (new RawContextKey('standaloneColorPickerFocused', false, ( localizeWithPath(_moduleId, 26, "Whether the standalone color picker is focused")))));
    EditorContextKeys.inCompositeEditor = ( (new RawContextKey('inCompositeEditor', undefined, ( localizeWithPath(
     _moduleId,
     27,
     "Whether the editor is part of a larger editor (e.g. notebooks)"
    )))));
    EditorContextKeys.notInCompositeEditor = ( (EditorContextKeys.inCompositeEditor.toNegated()));
    EditorContextKeys.languageId = ( (new RawContextKey('editorLangId', '', ( localizeWithPath(_moduleId, 28, "The language identifier of the editor")))));
    EditorContextKeys.hasCompletionItemProvider = ( (new RawContextKey('editorHasCompletionItemProvider', false, ( localizeWithPath(_moduleId, 29, "Whether the editor has a completion item provider")))));
    EditorContextKeys.hasCodeActionsProvider = ( (new RawContextKey('editorHasCodeActionsProvider', false, ( localizeWithPath(_moduleId, 30, "Whether the editor has a code actions provider")))));
    EditorContextKeys.hasCodeLensProvider = ( (new RawContextKey('editorHasCodeLensProvider', false, ( localizeWithPath(_moduleId, 31, "Whether the editor has a code lens provider")))));
    EditorContextKeys.hasDefinitionProvider = ( (new RawContextKey('editorHasDefinitionProvider', false, ( localizeWithPath(_moduleId, 32, "Whether the editor has a definition provider")))));
    EditorContextKeys.hasDeclarationProvider = ( (new RawContextKey('editorHasDeclarationProvider', false, ( localizeWithPath(_moduleId, 33, "Whether the editor has a declaration provider")))));
    EditorContextKeys.hasImplementationProvider = ( (new RawContextKey('editorHasImplementationProvider', false, ( localizeWithPath(_moduleId, 34, "Whether the editor has an implementation provider")))));
    EditorContextKeys.hasTypeDefinitionProvider = ( (new RawContextKey('editorHasTypeDefinitionProvider', false, ( localizeWithPath(_moduleId, 35, "Whether the editor has a type definition provider")))));
    EditorContextKeys.hasHoverProvider = ( (new RawContextKey('editorHasHoverProvider', false, ( localizeWithPath(_moduleId, 36, "Whether the editor has a hover provider")))));
    EditorContextKeys.hasDocumentHighlightProvider = ( (new RawContextKey('editorHasDocumentHighlightProvider', false, ( localizeWithPath(_moduleId, 37, "Whether the editor has a document highlight provider")))));
    EditorContextKeys.hasDocumentSymbolProvider = ( (new RawContextKey('editorHasDocumentSymbolProvider', false, ( localizeWithPath(_moduleId, 38, "Whether the editor has a document symbol provider")))));
    EditorContextKeys.hasReferenceProvider = ( (new RawContextKey('editorHasReferenceProvider', false, ( localizeWithPath(_moduleId, 39, "Whether the editor has a reference provider")))));
    EditorContextKeys.hasRenameProvider = ( (new RawContextKey('editorHasRenameProvider', false, ( localizeWithPath(_moduleId, 40, "Whether the editor has a rename provider")))));
    EditorContextKeys.hasSignatureHelpProvider = ( (new RawContextKey('editorHasSignatureHelpProvider', false, ( localizeWithPath(_moduleId, 41, "Whether the editor has a signature help provider")))));
    EditorContextKeys.hasInlayHintsProvider = ( (new RawContextKey('editorHasInlayHintsProvider', false, ( localizeWithPath(_moduleId, 42, "Whether the editor has an inline hints provider")))));
    EditorContextKeys.hasDocumentFormattingProvider = ( (new RawContextKey('editorHasDocumentFormattingProvider', false, ( localizeWithPath(_moduleId, 43, "Whether the editor has a document formatting provider")))));
    EditorContextKeys.hasDocumentSelectionFormattingProvider = ( (new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, ( localizeWithPath(
     _moduleId,
     44,
     "Whether the editor has a document selection formatting provider"
    )))));
    EditorContextKeys.hasMultipleDocumentFormattingProvider = ( (new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, ( localizeWithPath(
     _moduleId,
     45,
     "Whether the editor has multiple document formatting providers"
    )))));
    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = ( (new RawContextKey(
     'editorHasMultipleDocumentSelectionFormattingProvider',
     false,
     ( localizeWithPath(
      _moduleId,
      46,
      "Whether the editor has multiple document selection formatting providers"
     ))
    )));
})(EditorContextKeys || (EditorContextKeys = {}))));
export { EditorContextKeys };
