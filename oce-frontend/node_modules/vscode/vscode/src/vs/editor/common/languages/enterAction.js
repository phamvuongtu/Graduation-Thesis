import { IndentAction } from './languageConfiguration.js';
import { getScopedLineTokens, getIndentationAtPosition } from './languageConfigurationRegistry.js';
function getEnterAction(autoIndent, model, range, languageConfigurationService) {
    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);
    const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);
    if (!richEditSupport) {
        return null;
    }
    const scopedLineText = scopedLineTokens.getLineContent();
    const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);
    let afterEnterText;
    if (range.isEmpty()) {
        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);
    }
    else {
        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);
        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);
    }
    let previousLineText = '';
    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {
        const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);
        if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {
            previousLineText = oneLineAboveScopedLineTokens.getLineContent();
        }
    }
    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);
    if (!enterResult) {
        return null;
    }
    const indentAction = enterResult.indentAction;
    let appendText = enterResult.appendText;
    const removeText = enterResult.removeText || 0;
    if (!appendText) {
        if ((indentAction === IndentAction.Indent) ||
            (indentAction === IndentAction.IndentOutdent)) {
            appendText = '\t';
        }
        else {
            appendText = '';
        }
    }
    else if (indentAction === IndentAction.Indent) {
        appendText = '\t' + appendText;
    }
    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);
    if (removeText) {
        indentation = indentation.substring(0, indentation.length - removeText);
    }
    return {
        indentAction: indentAction,
        appendText: appendText,
        removeText: removeText,
        indentation: indentation
    };
}
export { getEnterAction };
