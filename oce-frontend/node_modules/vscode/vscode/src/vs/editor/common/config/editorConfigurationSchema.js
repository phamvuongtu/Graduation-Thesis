import { diffEditorDefaultOptions } from './diffEditor.js';
import { editorOptionsRegistry } from './editorOptions.js';
import { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';
import { localizeWithPath } from '../../../nls.js';
import { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';
import { Registry } from '../../../platform/registry/common/platform.js';
const _moduleId = "vs/editor/common/config/editorConfigurationSchema";
const editorConfigurationBaseNode = ( (Object.freeze({
    id: 'editor',
    order: 5,
    type: 'object',
    title: ( localizeWithPath(_moduleId, 0, "Editor")),
    scope: 5 ,
})));
const editorConfiguration = {
    ...editorConfigurationBaseNode,
    properties: {
        'editor.tabSize': {
            type: 'number',
            default: EDITOR_MODEL_DEFAULTS.tabSize,
            minimum: 1,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                1,
                "The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.",
                '`#editor.detectIndentation#`'
            ))
        },
        'editor.indentSize': {
            'anyOf': [
                {
                    type: 'string',
                    enum: ['tabSize']
                },
                {
                    type: 'number',
                    minimum: 1
                }
            ],
            default: 'tabSize',
            markdownDescription: ( localizeWithPath(
                _moduleId,
                2,
                "The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."
            ))
        },
        'editor.insertSpaces': {
            type: 'boolean',
            default: EDITOR_MODEL_DEFAULTS.insertSpaces,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                3,
                "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.",
                '`#editor.detectIndentation#`'
            ))
        },
        'editor.detectIndentation': {
            type: 'boolean',
            default: EDITOR_MODEL_DEFAULTS.detectIndentation,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                4,
                "Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.",
                '`#editor.tabSize#`',
                '`#editor.insertSpaces#`'
            ))
        },
        'editor.trimAutoWhitespace': {
            type: 'boolean',
            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,
            description: ( localizeWithPath(_moduleId, 5, "Remove trailing auto inserted whitespace."))
        },
        'editor.largeFileOptimizations': {
            type: 'boolean',
            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,
            description: ( localizeWithPath(
                _moduleId,
                6,
                "Special handling for large files to disable certain memory intensive features."
            ))
        },
        'editor.wordBasedSuggestions': {
            enum: ['off', 'currentDocument', 'matchingDocuments', 'allDocuments'],
            default: 'matchingDocuments',
            enumDescriptions: [
                ( localizeWithPath(_moduleId, 7, 'Turn off Word Based Suggestions.')),
                ( localizeWithPath(_moduleId, 8, 'Only suggest words from the active document.')),
                ( localizeWithPath(
                    _moduleId,
                    9,
                    'Suggest words from all open documents of the same language.'
                )),
                ( localizeWithPath(_moduleId, 10, 'Suggest words from all open documents.'))
            ],
            description: ( localizeWithPath(
                _moduleId,
                11,
                "Controls whether completions should be computed based on words in the document and from which documents they are computed."
            ))
        },
        'editor.semanticHighlighting.enabled': {
            enum: [true, false, 'configuredByTheme'],
            enumDescriptions: [
                ( localizeWithPath(_moduleId, 12, 'Semantic highlighting enabled for all color themes.')),
                ( localizeWithPath(_moduleId, 13, 'Semantic highlighting disabled for all color themes.')),
                ( localizeWithPath(
                    _moduleId,
                    14,
                    'Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.'
                ))
            ],
            default: 'configuredByTheme',
            description: ( localizeWithPath(
                _moduleId,
                15,
                "Controls whether the semanticHighlighting is shown for the languages that support it."
            ))
        },
        'editor.stablePeek': {
            type: 'boolean',
            default: false,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                16,
                "Keep peek editors open even when double-clicking their content or when hitting `Escape`."
            ))
        },
        'editor.maxTokenizationLineLength': {
            type: 'integer',
            default: 20_000,
            description: ( localizeWithPath(
                _moduleId,
                17,
                "Lines above this length will not be tokenized for performance reasons"
            ))
        },
        'editor.experimental.asyncTokenization': {
            type: 'boolean',
            default: false,
            description: ( localizeWithPath(
                _moduleId,
                18,
                "Controls whether the tokenization should happen asynchronously on a web worker."
            )),
            tags: ['experimental'],
        },
        'editor.experimental.asyncTokenizationLogging': {
            type: 'boolean',
            default: false,
            description: ( localizeWithPath(
                _moduleId,
                19,
                "Controls whether async tokenization should be logged. For debugging only."
            )),
        },
        'editor.experimental.asyncTokenizationVerification': {
            type: 'boolean',
            default: false,
            description: ( localizeWithPath(
                _moduleId,
                20,
                "Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only."
            )),
            tags: ['experimental'],
        },
        'editor.language.brackets': {
            type: ['array', 'null'],
            default: null,
            description: ( localizeWithPath(
                _moduleId,
                21,
                'Defines the bracket symbols that increase or decrease the indentation.'
            )),
            items: {
                type: 'array',
                items: [
                    {
                        type: 'string',
                        description: ( localizeWithPath(_moduleId, 22, 'The opening bracket character or string sequence.'))
                    },
                    {
                        type: 'string',
                        description: ( localizeWithPath(_moduleId, 23, 'The closing bracket character or string sequence.'))
                    }
                ]
            }
        },
        'editor.language.colorizedBracketPairs': {
            type: ['array', 'null'],
            default: null,
            description: ( localizeWithPath(
                _moduleId,
                24,
                'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'
            )),
            items: {
                type: 'array',
                items: [
                    {
                        type: 'string',
                        description: ( localizeWithPath(_moduleId, 22, 'The opening bracket character or string sequence.'))
                    },
                    {
                        type: 'string',
                        description: ( localizeWithPath(_moduleId, 23, 'The closing bracket character or string sequence.'))
                    }
                ]
            }
        },
        'diffEditor.maxComputationTime': {
            type: 'number',
            default: diffEditorDefaultOptions.maxComputationTime,
            description: ( localizeWithPath(
                _moduleId,
                25,
                "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout."
            ))
        },
        'diffEditor.maxFileSize': {
            type: 'number',
            default: diffEditorDefaultOptions.maxFileSize,
            description: ( localizeWithPath(
                _moduleId,
                26,
                "Maximum file size in MB for which to compute diffs. Use 0 for no limit."
            ))
        },
        'diffEditor.renderSideBySide': {
            type: 'boolean',
            default: diffEditorDefaultOptions.renderSideBySide,
            description: ( localizeWithPath(
                _moduleId,
                27,
                "Controls whether the diff editor shows the diff side by side or inline."
            ))
        },
        'diffEditor.renderSideBySideInlineBreakpoint': {
            type: 'number',
            default: diffEditorDefaultOptions.renderSideBySideInlineBreakpoint,
            description: ( localizeWithPath(
                _moduleId,
                28,
                "If the diff editor width is smaller than this value, the inline view is used."
            ))
        },
        'diffEditor.useInlineViewWhenSpaceIsLimited': {
            type: 'boolean',
            default: diffEditorDefaultOptions.useInlineViewWhenSpaceIsLimited,
            description: ( localizeWithPath(
                _moduleId,
                29,
                "If enabled and the editor width is too small, the inline view is used."
            ))
        },
        'diffEditor.renderMarginRevertIcon': {
            type: 'boolean',
            default: diffEditorDefaultOptions.renderMarginRevertIcon,
            description: ( localizeWithPath(
                _moduleId,
                30,
                "When enabled, the diff editor shows arrows in its glyph margin to revert changes."
            ))
        },
        'diffEditor.renderGutterMenu': {
            type: 'boolean',
            default: diffEditorDefaultOptions.renderGutterMenu,
            description: ( localizeWithPath(
                _moduleId,
                31,
                "When enabled, the diff editor shows a special gutter for revert and stage actions."
            ))
        },
        'diffEditor.ignoreTrimWhitespace': {
            type: 'boolean',
            default: diffEditorDefaultOptions.ignoreTrimWhitespace,
            description: ( localizeWithPath(
                _moduleId,
                32,
                "When enabled, the diff editor ignores changes in leading or trailing whitespace."
            ))
        },
        'diffEditor.renderIndicators': {
            type: 'boolean',
            default: diffEditorDefaultOptions.renderIndicators,
            description: ( localizeWithPath(
                _moduleId,
                33,
                "Controls whether the diff editor shows +/- indicators for added/removed changes."
            ))
        },
        'diffEditor.codeLens': {
            type: 'boolean',
            default: diffEditorDefaultOptions.diffCodeLens,
            description: ( localizeWithPath(_moduleId, 34, "Controls whether the editor shows CodeLens."))
        },
        'diffEditor.wordWrap': {
            type: 'string',
            enum: ['off', 'on', 'inherit'],
            default: diffEditorDefaultOptions.diffWordWrap,
            markdownEnumDescriptions: [
                ( localizeWithPath(_moduleId, 35, "Lines will never wrap.")),
                ( localizeWithPath(_moduleId, 36, "Lines will wrap at the viewport width.")),
                ( localizeWithPath(
                    _moduleId,
                    37,
                    "Lines will wrap according to the {0} setting.",
                    '`#editor.wordWrap#`'
                )),
            ]
        },
        'diffEditor.diffAlgorithm': {
            type: 'string',
            enum: ['legacy', 'advanced'],
            default: diffEditorDefaultOptions.diffAlgorithm,
            markdownEnumDescriptions: [
                ( localizeWithPath(_moduleId, 38, "Uses the legacy diffing algorithm.")),
                ( localizeWithPath(_moduleId, 39, "Uses the advanced diffing algorithm.")),
            ],
            tags: ['experimental'],
        },
        'diffEditor.hideUnchangedRegions.enabled': {
            type: 'boolean',
            default: diffEditorDefaultOptions.hideUnchangedRegions.enabled,
            markdownDescription: ( localizeWithPath(_moduleId, 40, "Controls whether the diff editor shows unchanged regions.")),
        },
        'diffEditor.hideUnchangedRegions.revealLineCount': {
            type: 'integer',
            default: diffEditorDefaultOptions.hideUnchangedRegions.revealLineCount,
            markdownDescription: ( localizeWithPath(_moduleId, 41, "Controls how many lines are used for unchanged regions.")),
            minimum: 1,
        },
        'diffEditor.hideUnchangedRegions.minimumLineCount': {
            type: 'integer',
            default: diffEditorDefaultOptions.hideUnchangedRegions.minimumLineCount,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                42,
                "Controls how many lines are used as a minimum for unchanged regions."
            )),
            minimum: 1,
        },
        'diffEditor.hideUnchangedRegions.contextLineCount': {
            type: 'integer',
            default: diffEditorDefaultOptions.hideUnchangedRegions.contextLineCount,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                43,
                "Controls how many lines are used as context when comparing unchanged regions."
            )),
            minimum: 1,
        },
        'diffEditor.experimental.showMoves': {
            type: 'boolean',
            default: diffEditorDefaultOptions.experimental.showMoves,
            markdownDescription: ( localizeWithPath(
                _moduleId,
                44,
                "Controls whether the diff editor should show detected code moves."
            ))
        },
        'diffEditor.experimental.showEmptyDecorations': {
            type: 'boolean',
            default: diffEditorDefaultOptions.experimental.showEmptyDecorations,
            description: ( localizeWithPath(
                _moduleId,
                45,
                "Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted."
            )),
        }
    }
};
function isConfigurationPropertySchema(x) {
    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');
}
for (const editorOption of editorOptionsRegistry) {
    const schema = editorOption.schema;
    if (typeof schema !== 'undefined') {
        if (isConfigurationPropertySchema(schema)) {
            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;
        }
        else {
            for (const key in schema) {
                if (Object.hasOwnProperty.call(schema, key)) {
                    editorConfiguration.properties[key] = schema[key];
                }
            }
        }
    }
}
let cachedEditorConfigurationKeys = null;
function getEditorConfigurationKeys() {
    if (cachedEditorConfigurationKeys === null) {
        cachedEditorConfigurationKeys = Object.create(null);
        ( (Object.keys(editorConfiguration.properties))).forEach((prop) => {
            cachedEditorConfigurationKeys[prop] = true;
        });
    }
    return cachedEditorConfigurationKeys;
}
function isEditorConfigurationKey(key) {
    const editorConfigurationKeys = getEditorConfigurationKeys();
    return (editorConfigurationKeys[`editor.${key}`] || false);
}
function isDiffEditorConfigurationKey(key) {
    const editorConfigurationKeys = getEditorConfigurationKeys();
    return (editorConfigurationKeys[`diffEditor.${key}`] || false);
}
const configurationRegistry = ( (Registry.as(Extensions.Configuration)));
configurationRegistry.registerConfiguration(editorConfiguration);
export { editorConfigurationBaseNode, isDiffEditorConfigurationKey, isEditorConfigurationKey };
