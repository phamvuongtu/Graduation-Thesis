import { StopWatch } from '../../../../base/common/stopwatch.js';
import { registerEditorAction, EditorAction } from '../../../browser/editorExtensions.js';
import { localizeWithPath } from '../../../../nls.js';
const _moduleId = "vs/editor/contrib/tokenization/browser/tokenization";
class ForceRetokenizeAction extends EditorAction {
    constructor() {
        super({
            id: 'editor.action.forceRetokenize',
            label: ( localizeWithPath(_moduleId, 0, "Developer: Force Retokenize")),
            alias: 'Developer: Force Retokenize',
            precondition: undefined
        });
    }
    run(accessor, editor) {
        if (!editor.hasModel()) {
            return;
        }
        const model = editor.getModel();
        model.tokenization.resetTokenization();
        const sw = ( (new StopWatch()));
        model.tokenization.forceTokenization(model.getLineCount());
        sw.stop();
        console.log(`tokenization took ${sw.elapsed()}`);
    }
}
registerEditorAction(ForceRetokenizeAction);
