import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { basename } from '../../../../base/common/resources.js';
import { registerEditorContribution } from '../../../browser/editorExtensions.js';
import { ICodeEditorService } from '../../../browser/services/codeEditorService.js';
import { localizeWithPath } from '../../../../nls.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.service.js';
const _moduleId = "vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators";
const ignoreUnusualLineTerminators = 'ignoreUnusualLineTerminators';
function writeIgnoreState(codeEditorService, model, state) {
    codeEditorService.setModelProperty(model.uri, ignoreUnusualLineTerminators, state);
}
function readIgnoreState(codeEditorService, model) {
    return codeEditorService.getModelProperty(model.uri, ignoreUnusualLineTerminators);
}
let UnusualLineTerminatorsDetector = class UnusualLineTerminatorsDetector extends Disposable {
    static { this.ID = 'editor.contrib.unusualLineTerminatorsDetector'; }
    constructor(_editor, _dialogService, _codeEditorService) {
        super();
        this._editor = _editor;
        this._dialogService = _dialogService;
        this._codeEditorService = _codeEditorService;
        this._isPresentingDialog = false;
        this._config = this._editor.getOption(126 );
        this._register(this._editor.onDidChangeConfiguration((e) => {
            if (e.hasChanged(126 )) {
                this._config = this._editor.getOption(126 );
                this._checkForUnusualLineTerminators();
            }
        }));
        this._register(this._editor.onDidChangeModel(() => {
            this._checkForUnusualLineTerminators();
        }));
        this._register(this._editor.onDidChangeModelContent((e) => {
            if (e.isUndoing) {
                return;
            }
            this._checkForUnusualLineTerminators();
        }));
        this._checkForUnusualLineTerminators();
    }
    async _checkForUnusualLineTerminators() {
        if (this._config === 'off') {
            return;
        }
        if (!this._editor.hasModel()) {
            return;
        }
        const model = this._editor.getModel();
        if (!model.mightContainUnusualLineTerminators()) {
            return;
        }
        const ignoreState = readIgnoreState(this._codeEditorService, model);
        if (ignoreState === true) {
            return;
        }
        if (this._editor.getOption(91 )) {
            return;
        }
        if (this._config === 'auto') {
            model.removeUnusualLineTerminators(this._editor.getSelections());
            return;
        }
        if (this._isPresentingDialog) {
            return;
        }
        let result;
        try {
            this._isPresentingDialog = true;
            result = await this._dialogService.confirm({
                title: ( localizeWithPath(_moduleId, 0, "Unusual Line Terminators")),
                message: ( localizeWithPath(_moduleId, 1, "Detected unusual line terminators")),
                detail: ( localizeWithPath(
                    _moduleId,
                    2,
                    "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.",
                    basename(model.uri)
                )),
                primaryButton: ( localizeWithPath(_moduleId, 3, "&&Remove Unusual Line Terminators")),
                cancelButton: ( localizeWithPath(_moduleId, 4, "Ignore"))
            });
        }
        finally {
            this._isPresentingDialog = false;
        }
        if (!result.confirmed) {
            writeIgnoreState(this._codeEditorService, model, true);
            return;
        }
        model.removeUnusualLineTerminators(this._editor.getSelections());
    }
};
UnusualLineTerminatorsDetector = ( (__decorate([
    ( (__param(1, IDialogService))),
    ( (__param(2, ICodeEditorService)))
], UnusualLineTerminatorsDetector)));
registerEditorContribution(UnusualLineTerminatorsDetector.ID, UnusualLineTerminatorsDetector, 1 );
export { UnusualLineTerminatorsDetector };
