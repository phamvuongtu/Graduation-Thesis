import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Color, RGBA } from '../../../../base/common/color.js';
import { EditorWorkerClient } from '../../../browser/services/editorWorkerService.js';
import { IModelService } from '../../../common/services/model.js';
import { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';
import { Disposable } from '../../../../base/common/lifecycle.js';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';
import { registerEditorFeature } from '../../../common/editorFeatures.js';
class DefaultDocumentColorProvider {
    constructor(modelService, languageConfigurationService) {
        this._editorWorkerClient = ( new EditorWorkerClient(modelService, false, 'editorWorkerService', languageConfigurationService));
    }
    async provideDocumentColors(model, _token) {
        return this._editorWorkerClient.computeDefaultDocumentColors(model.uri);
    }
    provideColorPresentations(_model, colorInfo, _token) {
        const range = colorInfo.range;
        const colorFromInfo = colorInfo.color;
        const alpha = colorFromInfo.alpha;
        const color = ( new Color(( new RGBA(
            Math.round(255 * colorFromInfo.red),
            Math.round(255 * colorFromInfo.green),
            Math.round(255 * colorFromInfo.blue),
            alpha
        ))));
        const rgb = alpha ? Color.Format.CSS.formatRGB(color) : Color.Format.CSS.formatRGBA(color);
        const hsl = alpha ? Color.Format.CSS.formatHSL(color) : Color.Format.CSS.formatHSLA(color);
        const hex = alpha ? Color.Format.CSS.formatHex(color) : Color.Format.CSS.formatHexA(color);
        const colorPresentations = [];
        colorPresentations.push({ label: rgb, textEdit: { range: range, text: rgb } });
        colorPresentations.push({ label: hsl, textEdit: { range: range, text: hsl } });
        colorPresentations.push({ label: hex, textEdit: { range: range, text: hex } });
        return colorPresentations;
    }
}
let DefaultDocumentColorProviderFeature = class DefaultDocumentColorProviderFeature extends Disposable {
    constructor(_modelService, _languageConfigurationService, _languageFeaturesService) {
        super();
        this._register(_languageFeaturesService.colorProvider.register('*', ( new DefaultDocumentColorProvider(_modelService, _languageConfigurationService))));
    }
};
DefaultDocumentColorProviderFeature = ( __decorate([
    ( __param(0, IModelService)),
    ( __param(1, ILanguageConfigurationService)),
    ( __param(2, ILanguageFeaturesService))
], DefaultDocumentColorProviderFeature));
registerEditorFeature(DefaultDocumentColorProviderFeature);
export { DefaultDocumentColorProvider };
