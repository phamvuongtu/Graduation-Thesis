import { equals } from './arrays.js';
const strictEquals = (a, b) => a === b;
function itemsEquals(itemEquals = strictEquals) {
    return (a, b) => equals(a, b, itemEquals);
}
function itemEquals() {
    return (a, b) => a.equals(b);
}
function equalsIfDefined(v1, v2, equals) {
    if (!v1 || !v2) {
        return v1 === v2;
    }
    return equals(v1, v2);
}
function getStructuralKey(t) {
    return JSON.stringify(toNormalizedJsonStructure(t));
}
let objectId = 0;
const objIds = ( new WeakMap());
function toNormalizedJsonStructure(t) {
    if (Array.isArray(t)) {
        return ( t.map(toNormalizedJsonStructure));
    }
    if (t && typeof t === 'object') {
        if (Object.getPrototypeOf(t) === Object.prototype) {
            const tObj = t;
            const res = Object.create(null);
            for (const key of ( Object.keys(tObj)).sort()) {
                res[key] = toNormalizedJsonStructure(tObj[key]);
            }
            return res;
        }
        else {
            let objId = objIds.get(t);
            if (objId === undefined) {
                objId = objectId++;
                objIds.set(t, objId);
            }
            return objId + '----2b76a038c20c4bcc';
        }
    }
    return t;
}
export { equalsIfDefined, getStructuralKey, itemEquals, itemsEquals, strictEquals };
