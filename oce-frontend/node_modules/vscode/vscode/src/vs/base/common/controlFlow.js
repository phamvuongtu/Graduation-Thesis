import { BugIndicatingError } from './errors.js';
class ReentrancyBarrier {
    constructor() {
        this._isOccupied = false;
    }
    runExclusivelyOrSkip(runner) {
        if (this._isOccupied) {
            return;
        }
        this._isOccupied = true;
        try {
            runner();
        }
        finally {
            this._isOccupied = false;
        }
    }
    runExclusivelyOrThrow(runner) {
        if (this._isOccupied) {
            throw ( new BugIndicatingError(`ReentrancyBarrier: reentrant call detected!`));
        }
        this._isOccupied = true;
        try {
            runner();
        }
        finally {
            this._isOccupied = false;
        }
    }
    get isOccupied() {
        return this._isOccupied;
    }
    makeExclusiveOrSkip(fn) {
        return ((...args) => {
            if (this._isOccupied) {
                return;
            }
            this._isOccupied = true;
            try {
                return fn(...args);
            }
            finally {
                this._isOccupied = false;
            }
        });
    }
}
export { ReentrancyBarrier };
