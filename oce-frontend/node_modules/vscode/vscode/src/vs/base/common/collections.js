function groupBy(data, groupFn) {
    const result = Object.create(null);
    for (const element of data) {
        const key = groupFn(element);
        let target = result[key];
        if (!target) {
            target = result[key] = [];
        }
        target.push(element);
    }
    return result;
}
function diffSets(before, after) {
    const removed = [];
    const added = [];
    for (const element of before) {
        if (!( after.has(element))) {
            removed.push(element);
        }
    }
    for (const element of after) {
        if (!( before.has(element))) {
            added.push(element);
        }
    }
    return { removed, added };
}
function diffMaps(before, after) {
    const removed = [];
    const added = [];
    for (const [index, value] of before) {
        if (!( after.has(index))) {
            removed.push(value);
        }
    }
    for (const [index, value] of after) {
        if (!( before.has(index))) {
            added.push(value);
        }
    }
    return { removed, added };
}
function intersection(setA, setB) {
    const result = ( new Set());
    for (const elem of setB) {
        if (( setA.has(elem))) {
            result.add(elem);
        }
    }
    return result;
}
export { diffMaps, diffSets, groupBy, intersection };
