import { createTrustedTypesPolicy } from './trustedTypes.js';
import { onUnexpectedError } from '../common/errors.js';
import { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';
import { Disposable, toDisposable } from '../common/lifecycle.js';
const ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });
function createBlobWorker(blobUrl, options) {
    if (!blobUrl.startsWith('blob:')) {
        throw ( new URIError('Not a blob-url: ' + blobUrl));
    }
    return ( new Worker(ttPolicy ? ttPolicy.createScriptURL(blobUrl) : blobUrl, options));
}
function getWorker(label) {
    const monacoEnvironment = globalThis.MonacoEnvironment;
    if (monacoEnvironment) {
        if (typeof monacoEnvironment.getWorker === 'function') {
            return monacoEnvironment.getWorker('workerMain.js', label);
        }
        if (typeof monacoEnvironment.getWorkerUrl === 'function') {
            const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);
            return ( new Worker(
                ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl,
                { name: label }
            ));
        }
    }
    throw ( new Error(
        `You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`
    ));
}
function isPromiseLike(obj) {
    if (typeof obj.then === 'function') {
        return true;
    }
    return false;
}
class WebWorker extends Disposable {
    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {
        super();
        this.id = id;
        this.label = label;
        const workerOrPromise = getWorker(label);
        if (isPromiseLike(workerOrPromise)) {
            this.worker = workerOrPromise;
        }
        else {
            this.worker = Promise.resolve(workerOrPromise);
        }
        this.postMessage(moduleId, []);
        this.worker.then((w) => {
            w.onmessage = function (ev) {
                onMessageCallback(ev.data);
            };
            w.onmessageerror = onErrorCallback;
            if (typeof w.addEventListener === 'function') {
                w.addEventListener('error', onErrorCallback);
            }
        });
        this._register(toDisposable(() => {
            this.worker?.then(w => {
                w.onmessage = null;
                w.onmessageerror = null;
                w.removeEventListener('error', onErrorCallback);
                w.terminate();
            });
            this.worker = null;
        }));
    }
    getId() {
        return this.id;
    }
    postMessage(message, transfer) {
        this.worker?.then(w => {
            try {
                w.postMessage(message, transfer);
            }
            catch (err) {
                onUnexpectedError(err);
                onUnexpectedError(( new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err })));
            }
        });
    }
}
class DefaultWorkerFactory {
    static { this.LAST_WORKER_ID = 0; }
    constructor(label) {
        this._label = label;
        this._webWorkerFailedBeforeError = false;
    }
    create(moduleId, onMessageCallback, onErrorCallback) {
        const workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);
        if (this._webWorkerFailedBeforeError) {
            throw this._webWorkerFailedBeforeError;
        }
        return ( new WebWorker(
            moduleId,
            workerId,
            this._label || 'anonymous' + workerId,
            onMessageCallback,
            (err) => {
                logOnceWebWorkerWarning(err);
                this._webWorkerFailedBeforeError = err;
                onErrorCallback(err);
            }
        ));
    }
}
export { DefaultWorkerFactory, createBlobWorker };
