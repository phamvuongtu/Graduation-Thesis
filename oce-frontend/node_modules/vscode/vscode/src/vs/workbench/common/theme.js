import { localizeWithPath } from '../../nls.js';
import { registerColor, transparent, darken, lighten } from '../../platform/theme/common/colorUtils.js';
import { contrastBorder, activeContrastBorder, focusBorder, textLinkForeground, errorForeground } from '../../platform/theme/common/colors/baseColors.js';
import '../../platform/theme/common/colors/chartsColors.js';
import { editorBackground, editorWidgetForeground, editorWidgetBackground, editorForeground, editorInfoForeground, toolbarHoverBackground, widgetBorder, editorErrorForeground, editorWarningForeground } from '../../platform/theme/common/colors/editorColors.js';
import { inputBorder } from '../../platform/theme/common/colors/inputColors.js';
import { treeIndentGuidesStroke, listActiveSelectionBackground, listActiveSelectionForeground } from '../../platform/theme/common/colors/listColors.js';
import '../../platform/theme/common/colors/menuColors.js';
import '../../platform/theme/common/colors/minimapColors.js';
import { scrollbarShadow } from '../../platform/theme/common/colors/miscColors.js';
import '../../platform/theme/common/colors/quickpickColors.js';
import '../../platform/theme/common/colors/searchColors.js';
import { Color } from '../../base/common/color.js';
import { ColorScheme } from '../../platform/theme/common/theme.js';
const _moduleId = "vs/workbench/common/theme";
function WORKBENCH_BACKGROUND(theme) {
    switch (theme.type) {
        case ColorScheme.LIGHT:
            return (
                 (Color.fromHex('#F3F3F3'))
            );
        case ColorScheme.HIGH_CONTRAST_LIGHT:
            return (
                 (Color.fromHex('#FFFFFF'))
            );
        case ColorScheme.HIGH_CONTRAST_DARK:
            return (
                 (Color.fromHex('#000000'))
            );
        default:
            return (
                 (Color.fromHex('#252526'))
            );
    }
}
const TAB_ACTIVE_BACKGROUND = registerColor('tab.activeBackground', {
    dark: editorBackground,
    light: editorBackground,
    hcDark: editorBackground,
    hcLight: editorBackground
}, ( localizeWithPath(
    _moduleId,
    0,
    "Active tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_ACTIVE_BACKGROUND = registerColor('tab.unfocusedActiveBackground', {
    dark: TAB_ACTIVE_BACKGROUND,
    light: TAB_ACTIVE_BACKGROUND,
    hcDark: TAB_ACTIVE_BACKGROUND,
    hcLight: TAB_ACTIVE_BACKGROUND,
}, ( localizeWithPath(
    _moduleId,
    1,
    "Active tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_INACTIVE_BACKGROUND = registerColor('tab.inactiveBackground', {
    dark: '#2D2D2D',
    light: '#ECECEC',
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    2,
    "Inactive tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_INACTIVE_BACKGROUND = registerColor('tab.unfocusedInactiveBackground', {
    dark: TAB_INACTIVE_BACKGROUND,
    light: TAB_INACTIVE_BACKGROUND,
    hcDark: TAB_INACTIVE_BACKGROUND,
    hcLight: TAB_INACTIVE_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    3,
    "Inactive tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_ACTIVE_FOREGROUND = registerColor('tab.activeForeground', {
    dark: Color.white,
    light: '#333333',
    hcDark: Color.white,
    hcLight: '#292929'
}, ( localizeWithPath(
    _moduleId,
    4,
    "Active tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_INACTIVE_FOREGROUND = registerColor('tab.inactiveForeground', {
    dark: ( (transparent(TAB_ACTIVE_FOREGROUND, 0.5))),
    light: ( (transparent(TAB_ACTIVE_FOREGROUND, 0.7))),
    hcDark: Color.white,
    hcLight: '#292929'
}, ( localizeWithPath(
    _moduleId,
    5,
    "Inactive tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_ACTIVE_FOREGROUND = registerColor('tab.unfocusedActiveForeground', {
    dark: ( (transparent(TAB_ACTIVE_FOREGROUND, 0.5))),
    light: ( (transparent(TAB_ACTIVE_FOREGROUND, 0.7))),
    hcDark: Color.white,
    hcLight: '#292929'
}, ( localizeWithPath(
    _moduleId,
    6,
    "Active tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
registerColor('tab.unfocusedInactiveForeground', {
    dark: ( (transparent(TAB_INACTIVE_FOREGROUND, 0.5))),
    light: ( (transparent(TAB_INACTIVE_FOREGROUND, 0.5))),
    hcDark: Color.white,
    hcLight: '#292929'
}, ( localizeWithPath(
    _moduleId,
    7,
    "Inactive tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_HOVER_BACKGROUND = registerColor('tab.hoverBackground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    8,
    "Tab background color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_HOVER_BACKGROUND = registerColor('tab.unfocusedHoverBackground', {
    dark: ( (transparent(TAB_HOVER_BACKGROUND, 0.5))),
    light: ( (transparent(TAB_HOVER_BACKGROUND, 0.7))),
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    9,
    "Tab background color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_HOVER_FOREGROUND = registerColor('tab.hoverForeground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    10,
    "Tab foreground color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_HOVER_FOREGROUND = registerColor('tab.unfocusedHoverForeground', {
    dark: ( (transparent(TAB_HOVER_FOREGROUND, 0.5))),
    light: ( (transparent(TAB_HOVER_FOREGROUND, 0.5))),
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    11,
    "Tab foreground color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_BORDER = registerColor('tab.border', {
    dark: '#252526',
    light: '#F3F3F3',
    hcDark: contrastBorder,
    hcLight: contrastBorder,
}, ( localizeWithPath(
    _moduleId,
    12,
    "Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_LAST_PINNED_BORDER = registerColor('tab.lastPinnedBorder', {
    dark: treeIndentGuidesStroke,
    light: treeIndentGuidesStroke,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    13,
    "Border to separate pinned tabs from other tabs. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_ACTIVE_BORDER = registerColor('tab.activeBorder', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    14,
    "Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_ACTIVE_BORDER = registerColor('tab.unfocusedActiveBorder', {
    dark: ( (transparent(TAB_ACTIVE_BORDER, 0.5))),
    light: ( (transparent(TAB_ACTIVE_BORDER, 0.7))),
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    15,
    "Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_ACTIVE_BORDER_TOP = registerColor('tab.activeBorderTop', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    16,
    "Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_ACTIVE_BORDER_TOP = registerColor('tab.unfocusedActiveBorderTop', {
    dark: ( (transparent(TAB_ACTIVE_BORDER_TOP, 0.5))),
    light: ( (transparent(TAB_ACTIVE_BORDER_TOP, 0.7))),
    hcDark: null,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    17,
    "Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_HOVER_BORDER = registerColor('tab.hoverBorder', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    18,
    "Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_HOVER_BORDER = registerColor('tab.unfocusedHoverBorder', {
    dark: ( (transparent(TAB_HOVER_BORDER, 0.5))),
    light: ( (transparent(TAB_HOVER_BORDER, 0.7))),
    hcDark: null,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    19,
    "Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
registerColor('tab.dragAndDropBorder', {
    dark: TAB_ACTIVE_FOREGROUND,
    light: TAB_ACTIVE_FOREGROUND,
    hcDark: activeContrastBorder,
    hcLight: activeContrastBorder
}, ( localizeWithPath(
    _moduleId,
    20,
    "Border between tabs to indicate that a tab can be inserted between two tabs. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_ACTIVE_MODIFIED_BORDER = registerColor('tab.activeModifiedBorder', {
    dark: '#3399CC',
    light: '#33AAEE',
    hcDark: null,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    21,
    "Border on the top of modified active tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_INACTIVE_MODIFIED_BORDER = registerColor('tab.inactiveModifiedBorder', {
    dark: ( (transparent(TAB_ACTIVE_MODIFIED_BORDER, 0.5))),
    light: ( (transparent(TAB_ACTIVE_MODIFIED_BORDER, 0.5))),
    hcDark: Color.white,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    22,
    "Border on the top of modified inactive tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_ACTIVE_MODIFIED_BORDER = registerColor('tab.unfocusedActiveModifiedBorder', {
    dark: ( (transparent(TAB_ACTIVE_MODIFIED_BORDER, 0.5))),
    light: ( (transparent(TAB_ACTIVE_MODIFIED_BORDER, 0.7))),
    hcDark: Color.white,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    23,
    "Border on the top of modified active tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const TAB_UNFOCUSED_INACTIVE_MODIFIED_BORDER = registerColor('tab.unfocusedInactiveModifiedBorder', {
    dark: ( (transparent(TAB_INACTIVE_MODIFIED_BORDER, 0.5))),
    light: ( (transparent(TAB_INACTIVE_MODIFIED_BORDER, 0.5))),
    hcDark: Color.white,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    24,
    "Border on the top of modified inactive tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."
)));
const EDITOR_PANE_BACKGROUND = registerColor('editorPane.background', {
    dark: editorBackground,
    light: editorBackground,
    hcDark: editorBackground,
    hcLight: editorBackground
}, ( localizeWithPath(
    _moduleId,
    25,
    "Background color of the editor pane visible on the left and right side of the centered editor layout."
)));
const EDITOR_GROUP_EMPTY_BACKGROUND = registerColor('editorGroup.emptyBackground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    26,
    "Background color of an empty editor group. Editor groups are the containers of editors."
)));
registerColor('editorGroup.focusedEmptyBorder', {
    dark: null,
    light: null,
    hcDark: focusBorder,
    hcLight: focusBorder
}, ( localizeWithPath(
    _moduleId,
    27,
    "Border color of an empty editor group that is focused. Editor groups are the containers of editors."
)));
const EDITOR_GROUP_HEADER_TABS_BACKGROUND = registerColor('editorGroupHeader.tabsBackground', {
    dark: '#252526',
    light: '#F3F3F3',
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    28,
    "Background color of the editor group title header when tabs are enabled. Editor groups are the containers of editors."
)));
const EDITOR_GROUP_HEADER_TABS_BORDER = registerColor('editorGroupHeader.tabsBorder', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    29,
    "Border color of the editor group title header when tabs are enabled. Editor groups are the containers of editors."
)));
const EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND = registerColor('editorGroupHeader.noTabsBackground', {
    dark: editorBackground,
    light: editorBackground,
    hcDark: editorBackground,
    hcLight: editorBackground
}, ( localizeWithPath(
    _moduleId,
    30,
    "Background color of the editor group title header when (`\"workbench.editor.showTabs\": \"single\"`). Editor groups are the containers of editors."
)));
const EDITOR_GROUP_HEADER_BORDER = registerColor('editorGroupHeader.border', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    31,
    "Border color of the editor group title header. Editor groups are the containers of editors."
)));
const EDITOR_GROUP_BORDER = registerColor('editorGroup.border', {
    dark: '#444444',
    light: '#E7E7E7',
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    32,
    "Color to separate multiple editor groups from each other. Editor groups are the containers of editors."
)));
const EDITOR_DRAG_AND_DROP_BACKGROUND = registerColor('editorGroup.dropBackground', {
    dark: ( (( (Color.fromHex('#53595D'))).transparent(0.5))),
    light: ( (( (Color.fromHex('#2677CB'))).transparent(0.18))),
    hcDark: null,
    hcLight: ( (( (Color.fromHex('#0F4A85'))).transparent(0.50)))
}, ( localizeWithPath(
    _moduleId,
    33,
    "Background color when dragging editors around. The color should have transparency so that the editor contents can still shine through."
)));
const EDITOR_DROP_INTO_PROMPT_FOREGROUND = registerColor('editorGroup.dropIntoPromptForeground', {
    dark: editorWidgetForeground,
    light: editorWidgetForeground,
    hcDark: editorWidgetForeground,
    hcLight: editorWidgetForeground
}, ( localizeWithPath(
    _moduleId,
    34,
    "Foreground color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."
)));
const EDITOR_DROP_INTO_PROMPT_BACKGROUND = registerColor('editorGroup.dropIntoPromptBackground', {
    dark: editorWidgetBackground,
    light: editorWidgetBackground,
    hcDark: editorWidgetBackground,
    hcLight: editorWidgetBackground
}, ( localizeWithPath(
    _moduleId,
    35,
    "Background color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."
)));
const EDITOR_DROP_INTO_PROMPT_BORDER = registerColor('editorGroup.dropIntoPromptBorder', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    36,
    "Border color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."
)));
const SIDE_BY_SIDE_EDITOR_HORIZONTAL_BORDER = registerColor('sideBySideEditor.horizontalBorder', {
    dark: EDITOR_GROUP_BORDER,
    light: EDITOR_GROUP_BORDER,
    hcDark: EDITOR_GROUP_BORDER,
    hcLight: EDITOR_GROUP_BORDER
}, ( localizeWithPath(
    _moduleId,
    37,
    "Color to separate two editors from each other when shown side by side in an editor group from top to bottom."
)));
const SIDE_BY_SIDE_EDITOR_VERTICAL_BORDER = registerColor('sideBySideEditor.verticalBorder', {
    dark: EDITOR_GROUP_BORDER,
    light: EDITOR_GROUP_BORDER,
    hcDark: EDITOR_GROUP_BORDER,
    hcLight: EDITOR_GROUP_BORDER
}, ( localizeWithPath(
    _moduleId,
    38,
    "Color to separate two editors from each other when shown side by side in an editor group from left to right."
)));
const PANEL_BACKGROUND = registerColor('panel.background', {
    dark: editorBackground,
    light: editorBackground,
    hcDark: editorBackground,
    hcLight: editorBackground
}, ( localizeWithPath(
    _moduleId,
    39,
    "Panel background color. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
const PANEL_BORDER = registerColor('panel.border', {
    dark: ( (( (Color.fromHex('#808080'))).transparent(0.35))),
    light: ( (( (Color.fromHex('#808080'))).transparent(0.35))),
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    40,
    "Panel border color to separate the panel from the editor. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
const PANEL_ACTIVE_TITLE_FOREGROUND = registerColor('panelTitle.activeForeground', {
    dark: '#E7E7E7',
    light: '#424242',
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    41,
    "Title color for the active panel. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
const PANEL_INACTIVE_TITLE_FOREGROUND = registerColor('panelTitle.inactiveForeground', {
    dark: ( (transparent(PANEL_ACTIVE_TITLE_FOREGROUND, 0.6))),
    light: ( (transparent(PANEL_ACTIVE_TITLE_FOREGROUND, 0.75))),
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    42,
    "Title color for the inactive panel. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
const PANEL_ACTIVE_TITLE_BORDER = registerColor('panelTitle.activeBorder', {
    dark: PANEL_ACTIVE_TITLE_FOREGROUND,
    light: PANEL_ACTIVE_TITLE_FOREGROUND,
    hcDark: contrastBorder,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    43,
    "Border color for the active panel title. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
registerColor('panelInput.border', {
    dark: inputBorder,
    light: ( (Color.fromHex('#ddd'))),
    hcDark: inputBorder,
    hcLight: inputBorder
}, ( localizeWithPath(_moduleId, 44, "Input box border for inputs in the panel.")));
const PANEL_DRAG_AND_DROP_BORDER = registerColor('panel.dropBorder', {
    dark: PANEL_ACTIVE_TITLE_FOREGROUND,
    light: PANEL_ACTIVE_TITLE_FOREGROUND,
    hcDark: PANEL_ACTIVE_TITLE_FOREGROUND,
    hcLight: PANEL_ACTIVE_TITLE_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    45,
    "Drag and drop feedback color for the panel titles. Panels are shown below the editor area and contain views like output and integrated terminal."
)));
const PANEL_SECTION_DRAG_AND_DROP_BACKGROUND = registerColor('panelSection.dropBackground', {
    dark: EDITOR_DRAG_AND_DROP_BACKGROUND,
    light: EDITOR_DRAG_AND_DROP_BACKGROUND,
    hcDark: EDITOR_DRAG_AND_DROP_BACKGROUND,
    hcLight: EDITOR_DRAG_AND_DROP_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    46,
    "Drag and drop feedback color for the panel sections. The color should have transparency so that the panel sections can still shine through. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."
)));
const PANEL_SECTION_HEADER_BACKGROUND = registerColor('panelSectionHeader.background', {
    dark: ( (( (Color.fromHex('#808080'))).transparent(0.2))),
    light: ( (( (Color.fromHex('#808080'))).transparent(0.2))),
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    47,
    "Panel section header background color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."
)));
const PANEL_SECTION_HEADER_FOREGROUND = registerColor('panelSectionHeader.foreground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    48,
    "Panel section header foreground color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."
)));
const PANEL_SECTION_HEADER_BORDER = registerColor('panelSectionHeader.border', {
    dark: contrastBorder,
    light: contrastBorder,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    49,
    "Panel section header border color used when multiple views are stacked vertically in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."
)));
const PANEL_SECTION_BORDER = registerColor('panelSection.border', {
    dark: PANEL_BORDER,
    light: PANEL_BORDER,
    hcDark: PANEL_BORDER,
    hcLight: PANEL_BORDER
}, ( localizeWithPath(
    _moduleId,
    50,
    "Panel section border color used when multiple views are stacked horizontally in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."
)));
const PANEL_STICKY_SCROLL_BACKGROUND = registerColor('panelStickyScroll.background', {
    dark: PANEL_BACKGROUND,
    light: PANEL_BACKGROUND,
    hcDark: PANEL_BACKGROUND,
    hcLight: PANEL_BACKGROUND
}, ( localizeWithPath(_moduleId, 51, "Background color of sticky scroll in the panel.")));
const PANEL_STICKY_SCROLL_BORDER = registerColor('panelStickyScroll.border', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(_moduleId, 52, "Border color of sticky scroll in the panel.")));
const PANEL_STICKY_SCROLL_SHADOW = registerColor('panelStickyScroll.shadow', {
    dark: scrollbarShadow,
    light: scrollbarShadow,
    hcDark: scrollbarShadow,
    hcLight: scrollbarShadow
}, ( localizeWithPath(_moduleId, 53, "Shadow color of sticky scroll in the panel.")));
const OUTPUT_VIEW_BACKGROUND = registerColor('outputView.background', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(_moduleId, 54, "Output view background color.")));
registerColor('outputViewStickyScroll.background', {
    dark: OUTPUT_VIEW_BACKGROUND,
    light: OUTPUT_VIEW_BACKGROUND,
    hcDark: OUTPUT_VIEW_BACKGROUND,
    hcLight: OUTPUT_VIEW_BACKGROUND
}, ( localizeWithPath(_moduleId, 55, "Output view sticky scroll background color.")));
registerColor('banner.background', {
    dark: listActiveSelectionBackground,
    light: ( (darken(listActiveSelectionBackground, 0.3))),
    hcDark: listActiveSelectionBackground,
    hcLight: listActiveSelectionBackground
}, ( localizeWithPath(
    _moduleId,
    56,
    "Banner background color. The banner is shown under the title bar of the window."
)));
registerColor('banner.foreground', {
    dark: listActiveSelectionForeground,
    light: listActiveSelectionForeground,
    hcDark: listActiveSelectionForeground,
    hcLight: listActiveSelectionForeground
}, ( localizeWithPath(
    _moduleId,
    57,
    "Banner foreground color. The banner is shown under the title bar of the window."
)));
registerColor('banner.iconForeground', {
    dark: editorInfoForeground,
    light: editorInfoForeground,
    hcDark: editorInfoForeground,
    hcLight: editorInfoForeground
}, ( localizeWithPath(
    _moduleId,
    58,
    "Banner icon color. The banner is shown under the title bar of the window."
)));
const STATUS_BAR_FOREGROUND = registerColor('statusBar.foreground', {
    dark: '#FFFFFF',
    light: '#FFFFFF',
    hcDark: '#FFFFFF',
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    59,
    "Status bar foreground color when a workspace or folder is opened. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_NO_FOLDER_FOREGROUND = registerColor('statusBar.noFolderForeground', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: STATUS_BAR_FOREGROUND,
    hcLight: STATUS_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    60,
    "Status bar foreground color when no folder is opened. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_BACKGROUND = registerColor('statusBar.background', {
    dark: '#007ACC',
    light: '#007ACC',
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    61,
    "Status bar background color when a workspace or folder is opened. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_NO_FOLDER_BACKGROUND = registerColor('statusBar.noFolderBackground', {
    dark: '#68217A',
    light: '#68217A',
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    62,
    "Status bar background color when no folder is opened. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_BORDER = registerColor('statusBar.border', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    63,
    "Status bar border color separating to the sidebar and editor. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_FOCUS_BORDER = registerColor('statusBar.focusBorder', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: null,
    hcLight: STATUS_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    64,
    "Status bar border color when focused on keyboard navigation. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_NO_FOLDER_BORDER = registerColor('statusBar.noFolderBorder', {
    dark: STATUS_BAR_BORDER,
    light: STATUS_BAR_BORDER,
    hcDark: STATUS_BAR_BORDER,
    hcLight: STATUS_BAR_BORDER
}, ( localizeWithPath(
    _moduleId,
    65,
    "Status bar border color separating to the sidebar and editor when no folder is opened. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.activeBackground', {
    dark: ( (Color.white.transparent(0.18))),
    light: ( (Color.white.transparent(0.18))),
    hcDark: ( (Color.white.transparent(0.18))),
    hcLight: ( (Color.black.transparent(0.18)))
}, ( localizeWithPath(
    _moduleId,
    66,
    "Status bar item background color when clicking. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_ITEM_FOCUS_BORDER = registerColor('statusBarItem.focusBorder', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: null,
    hcLight: activeContrastBorder
}, ( localizeWithPath(
    _moduleId,
    67,
    "Status bar item border color when focused on keyboard navigation. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_ITEM_HOVER_BACKGROUND = registerColor('statusBarItem.hoverBackground', {
    dark: ( (Color.white.transparent(0.12))),
    light: ( (Color.white.transparent(0.12))),
    hcDark: ( (Color.white.transparent(0.12))),
    hcLight: ( (Color.black.transparent(0.12)))
}, ( localizeWithPath(
    _moduleId,
    68,
    "Status bar item background color when hovering. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_ITEM_HOVER_FOREGROUND = registerColor('statusBarItem.hoverForeground', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: STATUS_BAR_FOREGROUND,
    hcLight: STATUS_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    69,
    "Status bar item foreground color when hovering. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND = registerColor('statusBarItem.compactHoverBackground', {
    dark: ( (Color.white.transparent(0.20))),
    light: ( (Color.white.transparent(0.20))),
    hcDark: ( (Color.white.transparent(0.20))),
    hcLight: ( (Color.black.transparent(0.20)))
}, ( localizeWithPath(
    _moduleId,
    70,
    "Status bar item background color when hovering an item that contains two hovers. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.prominentForeground', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: STATUS_BAR_FOREGROUND,
    hcLight: STATUS_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    71,
    "Status bar prominent items foreground color. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.prominentBackground', {
    dark: ( (Color.black.transparent(0.5))),
    light: ( (Color.black.transparent(0.5))),
    hcDark: ( (Color.black.transparent(0.5))),
    hcLight: ( (Color.black.transparent(0.5))),
}, ( localizeWithPath(
    _moduleId,
    72,
    "Status bar prominent items background color. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.prominentHoverForeground', {
    dark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    light: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    73,
    "Status bar prominent items foreground color when hovering. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.prominentHoverBackground', {
    dark: ( (Color.black.transparent(0.3))),
    light: ( (Color.black.transparent(0.3))),
    hcDark: ( (Color.black.transparent(0.3))),
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    74,
    "Status bar prominent items background color when hovering. Prominent items stand out from other status bar entries to indicate importance. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_ERROR_ITEM_BACKGROUND = registerColor('statusBarItem.errorBackground', {
    dark: ( (darken(errorForeground, .4))),
    light: ( (darken(errorForeground, .4))),
    hcDark: null,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    75,
    "Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.errorForeground', {
    dark: Color.white,
    light: Color.white,
    hcDark: Color.white,
    hcLight: Color.white
}, ( localizeWithPath(
    _moduleId,
    76,
    "Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.errorHoverForeground', {
    dark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    light: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    77,
    "Status bar error items foreground color when hovering. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.errorHoverBackground', {
    dark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    light: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    78,
    "Status bar error items background color when hovering. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."
)));
const STATUS_BAR_WARNING_ITEM_BACKGROUND = registerColor('statusBarItem.warningBackground', {
    dark: ( (darken(editorWarningForeground, .4))),
    light: ( (darken(editorWarningForeground, .4))),
    hcDark: null,
    hcLight: '#895503'
}, ( localizeWithPath(
    _moduleId,
    79,
    "Status bar warning items background color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.warningForeground', {
    dark: Color.white,
    light: Color.white,
    hcDark: Color.white,
    hcLight: Color.white
}, ( localizeWithPath(
    _moduleId,
    80,
    "Status bar warning items foreground color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.warningHoverForeground', {
    dark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    light: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    81,
    "Status bar warning items foreground color when hovering. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."
)));
registerColor('statusBarItem.warningHoverBackground', {
    dark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    light: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    82,
    "Status bar warning items background color when hovering. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."
)));
const ACTIVITY_BAR_BACKGROUND = registerColor('activityBar.background', {
    dark: '#333333',
    light: '#2C2C2C',
    hcDark: '#000000',
    hcLight: '#FFFFFF'
}, ( localizeWithPath(
    _moduleId,
    83,
    "Activity bar background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_FOREGROUND = registerColor('activityBar.foreground', {
    dark: Color.white,
    light: Color.white,
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    84,
    "Activity bar item foreground color when it is active. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_INACTIVE_FOREGROUND = registerColor('activityBar.inactiveForeground', {
    dark: ( (transparent(ACTIVITY_BAR_FOREGROUND, 0.4))),
    light: ( (transparent(ACTIVITY_BAR_FOREGROUND, 0.4))),
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    85,
    "Activity bar item foreground color when it is inactive. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_BORDER = registerColor('activityBar.border', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    86,
    "Activity bar border color separating to the side bar. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_ACTIVE_BORDER = registerColor('activityBar.activeBorder', {
    dark: ACTIVITY_BAR_FOREGROUND,
    light: ACTIVITY_BAR_FOREGROUND,
    hcDark: null,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    87,
    "Activity bar border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_ACTIVE_FOCUS_BORDER = registerColor('activityBar.activeFocusBorder', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    88,
    "Activity bar focus border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_ACTIVE_BACKGROUND = registerColor('activityBar.activeBackground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    89,
    "Activity bar background color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_DRAG_AND_DROP_BORDER = registerColor('activityBar.dropBorder', {
    dark: ACTIVITY_BAR_FOREGROUND,
    light: ACTIVITY_BAR_FOREGROUND,
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    90,
    "Drag and drop feedback color for the activity bar items. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_BADGE_BACKGROUND = registerColor('activityBarBadge.background', {
    dark: '#007ACC',
    light: '#007ACC',
    hcDark: '#000000',
    hcLight: '#0F4A85'
}, ( localizeWithPath(
    _moduleId,
    91,
    "Activity notification badge background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_BADGE_FOREGROUND = registerColor('activityBarBadge.foreground', {
    dark: Color.white,
    light: Color.white,
    hcDark: Color.white,
    hcLight: Color.white
}, ( localizeWithPath(
    _moduleId,
    92,
    "Activity notification badge foreground color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_TOP_FOREGROUND = registerColor('activityBarTop.foreground', {
    dark: '#E7E7E7',
    light: '#424242',
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    93,
    "Active foreground color of the item in the Activity bar when it is on top / bottom. The activity allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_TOP_ACTIVE_BORDER = registerColor('activityBarTop.activeBorder', {
    dark: ACTIVITY_BAR_TOP_FOREGROUND,
    light: ACTIVITY_BAR_TOP_FOREGROUND,
    hcDark: contrastBorder,
    hcLight: '#B5200D'
}, ( localizeWithPath(
    _moduleId,
    94,
    "Focus border color for the active item in the Activity bar when it is on top / bottom. The activity allows to switch between views of the side bar."
)));
registerColor('activityBarTop.activeBackground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    95,
    "Background color for the active item in the Activity bar when it is on top / bottom. The activity allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_TOP_INACTIVE_FOREGROUND = registerColor('activityBarTop.inactiveForeground', {
    dark: ( (transparent(ACTIVITY_BAR_TOP_FOREGROUND, 0.6))),
    light: ( (transparent(ACTIVITY_BAR_TOP_FOREGROUND, 0.75))),
    hcDark: Color.white,
    hcLight: editorForeground
}, ( localizeWithPath(
    _moduleId,
    96,
    "Inactive foreground color of the item in the Activity bar when it is on top / bottom. The activity allows to switch between views of the side bar."
)));
const ACTIVITY_BAR_TOP_DRAG_AND_DROP_BORDER = registerColor('activityBarTop.dropBorder', {
    dark: ACTIVITY_BAR_TOP_FOREGROUND,
    light: ACTIVITY_BAR_TOP_FOREGROUND,
    hcDark: ACTIVITY_BAR_TOP_FOREGROUND,
    hcLight: ACTIVITY_BAR_TOP_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    97,
    "Drag and drop feedback color for the items in the Activity bar when it is on top / bottom. The activity allows to switch between views of the side bar."
)));
registerColor('activityBarTop.background', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    98,
    "Background color of the activity bar when set to top / bottom."
)));
registerColor('profileBadge.background', {
    dark: '#4D4D4D',
    light: '#C4C4C4',
    hcDark: Color.white,
    hcLight: Color.black
}, ( localizeWithPath(
    _moduleId,
    99,
    "Profile badge background color. The profile badge shows on top of the settings gear icon in the activity bar."
)));
registerColor('profileBadge.foreground', {
    dark: Color.white,
    light: '#333333',
    hcDark: Color.black,
    hcLight: Color.white
}, ( localizeWithPath(
    _moduleId,
    100,
    "Profile badge foreground color. The profile badge shows on top of the settings gear icon in the activity bar."
)));
const STATUS_BAR_REMOTE_ITEM_BACKGROUND = registerColor('statusBarItem.remoteBackground', {
    dark: ACTIVITY_BAR_BADGE_BACKGROUND,
    light: ACTIVITY_BAR_BADGE_BACKGROUND,
    hcDark: ACTIVITY_BAR_BADGE_BACKGROUND,
    hcLight: ACTIVITY_BAR_BADGE_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    101,
    "Background color for the remote indicator on the status bar."
)));
const STATUS_BAR_REMOTE_ITEM_FOREGROUND = registerColor('statusBarItem.remoteForeground', {
    dark: ACTIVITY_BAR_BADGE_FOREGROUND,
    light: ACTIVITY_BAR_BADGE_FOREGROUND,
    hcDark: ACTIVITY_BAR_BADGE_FOREGROUND,
    hcLight: ACTIVITY_BAR_BADGE_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    102,
    "Foreground color for the remote indicator on the status bar."
)));
registerColor('statusBarItem.remoteHoverForeground', {
    dark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    light: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    103,
    "Foreground color for the remote indicator on the status bar when hovering."
)));
registerColor('statusBarItem.remoteHoverBackground', {
    dark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    light: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    104,
    "Background color for the remote indicator on the status bar when hovering."
)));
registerColor('statusBarItem.offlineBackground', {
    dark: '#6c1717',
    light: '#6c1717',
    hcDark: '#6c1717',
    hcLight: '#6c1717'
}, ( localizeWithPath(
    _moduleId,
    105,
    "Status bar item background color when the workbench is offline."
)));
registerColor('statusBarItem.offlineForeground', {
    dark: STATUS_BAR_REMOTE_ITEM_FOREGROUND,
    light: STATUS_BAR_REMOTE_ITEM_FOREGROUND,
    hcDark: STATUS_BAR_REMOTE_ITEM_FOREGROUND,
    hcLight: STATUS_BAR_REMOTE_ITEM_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    106,
    "Status bar item foreground color when the workbench is offline."
)));
registerColor('statusBarItem.offlineHoverForeground', {
    dark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    light: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_FOREGROUND,
    hcLight: STATUS_BAR_ITEM_HOVER_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    107,
    "Status bar item foreground hover color when the workbench is offline."
)));
registerColor('statusBarItem.offlineHoverBackground', {
    dark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    light: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcDark: STATUS_BAR_ITEM_HOVER_BACKGROUND,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    108,
    "Status bar item background hover color when the workbench is offline."
)));
const EXTENSION_BADGE_REMOTE_BACKGROUND = registerColor('extensionBadge.remoteBackground', {
    dark: ACTIVITY_BAR_BADGE_BACKGROUND,
    light: ACTIVITY_BAR_BADGE_BACKGROUND,
    hcDark: ACTIVITY_BAR_BADGE_BACKGROUND,
    hcLight: ACTIVITY_BAR_BADGE_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    109,
    "Background color for the remote badge in the extensions view."
)));
const EXTENSION_BADGE_REMOTE_FOREGROUND = registerColor('extensionBadge.remoteForeground', {
    dark: ACTIVITY_BAR_BADGE_FOREGROUND,
    light: ACTIVITY_BAR_BADGE_FOREGROUND,
    hcDark: ACTIVITY_BAR_BADGE_FOREGROUND,
    hcLight: ACTIVITY_BAR_BADGE_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    110,
    "Foreground color for the remote badge in the extensions view."
)));
const SIDE_BAR_BACKGROUND = registerColor('sideBar.background', {
    dark: '#252526',
    light: '#F3F3F3',
    hcDark: '#000000',
    hcLight: '#FFFFFF'
}, ( localizeWithPath(
    _moduleId,
    111,
    "Side bar background color. The side bar is the container for views like explorer and search."
)));
const SIDE_BAR_FOREGROUND = registerColor('sideBar.foreground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    112,
    "Side bar foreground color. The side bar is the container for views like explorer and search."
)));
const SIDE_BAR_BORDER = registerColor('sideBar.border', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    113,
    "Side bar border color on the side separating to the editor. The side bar is the container for views like explorer and search."
)));
registerColor('sideBarTitle.background', {
    dark: SIDE_BAR_BACKGROUND,
    light: SIDE_BAR_BACKGROUND,
    hcDark: SIDE_BAR_BACKGROUND,
    hcLight: SIDE_BAR_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    114,
    "Side bar title background color. The side bar is the container for views like explorer and search."
)));
const SIDE_BAR_TITLE_FOREGROUND = registerColor('sideBarTitle.foreground', {
    dark: SIDE_BAR_FOREGROUND,
    light: SIDE_BAR_FOREGROUND,
    hcDark: SIDE_BAR_FOREGROUND,
    hcLight: SIDE_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    115,
    "Side bar title foreground color. The side bar is the container for views like explorer and search."
)));
const SIDE_BAR_DRAG_AND_DROP_BACKGROUND = registerColor('sideBar.dropBackground', {
    dark: EDITOR_DRAG_AND_DROP_BACKGROUND,
    light: EDITOR_DRAG_AND_DROP_BACKGROUND,
    hcDark: EDITOR_DRAG_AND_DROP_BACKGROUND,
    hcLight: EDITOR_DRAG_AND_DROP_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    116,
    "Drag and drop feedback color for the side bar sections. The color should have transparency so that the side bar sections can still shine through. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."
)));
const SIDE_BAR_SECTION_HEADER_BACKGROUND = registerColor('sideBarSectionHeader.background', {
    dark: ( (( (Color.fromHex('#808080'))).transparent(0.2))),
    light: ( (( (Color.fromHex('#808080'))).transparent(0.2))),
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    117,
    "Side bar section header background color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."
)));
const SIDE_BAR_SECTION_HEADER_FOREGROUND = registerColor('sideBarSectionHeader.foreground', {
    dark: SIDE_BAR_FOREGROUND,
    light: SIDE_BAR_FOREGROUND,
    hcDark: SIDE_BAR_FOREGROUND,
    hcLight: SIDE_BAR_FOREGROUND
}, ( localizeWithPath(
    _moduleId,
    118,
    "Side bar section header foreground color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."
)));
const SIDE_BAR_SECTION_HEADER_BORDER = registerColor('sideBarSectionHeader.border', {
    dark: contrastBorder,
    light: contrastBorder,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    119,
    "Side bar section header border color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."
)));
registerColor('sideBarActivityBarTop.border', {
    dark: SIDE_BAR_SECTION_HEADER_BORDER,
    light: SIDE_BAR_SECTION_HEADER_BORDER,
    hcDark: SIDE_BAR_SECTION_HEADER_BORDER,
    hcLight: SIDE_BAR_SECTION_HEADER_BORDER
}, ( localizeWithPath(
    _moduleId,
    120,
    "Border color between the activity bar at the top/bottom and the views."
)));
const SIDE_BAR_STICKY_SCROLL_BACKGROUND = registerColor('sideBarStickyScroll.background', {
    dark: SIDE_BAR_BACKGROUND,
    light: SIDE_BAR_BACKGROUND,
    hcDark: SIDE_BAR_BACKGROUND,
    hcLight: SIDE_BAR_BACKGROUND
}, ( localizeWithPath(_moduleId, 121, "Background color of sticky scroll in the side bar.")));
const SIDE_BAR_STICKY_SCROLL_BORDER = registerColor('sideBarStickyScroll.border', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(_moduleId, 122, "Border color of sticky scroll in the side bar.")));
const SIDE_BAR_STICKY_SCROLL_SHADOW = registerColor('sideBarStickyScroll.shadow', {
    dark: scrollbarShadow,
    light: scrollbarShadow,
    hcDark: scrollbarShadow,
    hcLight: scrollbarShadow
}, ( localizeWithPath(_moduleId, 123, "Shadow color of sticky scroll in the side bar.")));
const TITLE_BAR_ACTIVE_FOREGROUND = registerColor('titleBar.activeForeground', {
    dark: '#CCCCCC',
    light: '#333333',
    hcDark: '#FFFFFF',
    hcLight: '#292929'
}, ( localizeWithPath(_moduleId, 124, "Title bar foreground when the window is active.")));
const TITLE_BAR_INACTIVE_FOREGROUND = registerColor('titleBar.inactiveForeground', {
    dark: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, 0.6))),
    light: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, 0.6))),
    hcDark: null,
    hcLight: '#292929'
}, ( localizeWithPath(_moduleId, 125, "Title bar foreground when the window is inactive.")));
const TITLE_BAR_ACTIVE_BACKGROUND = registerColor('titleBar.activeBackground', {
    dark: '#3C3C3C',
    light: '#DDDDDD',
    hcDark: '#000000',
    hcLight: '#FFFFFF'
}, ( localizeWithPath(_moduleId, 126, "Title bar background when the window is active.")));
const TITLE_BAR_INACTIVE_BACKGROUND = registerColor('titleBar.inactiveBackground', {
    dark: ( (transparent(TITLE_BAR_ACTIVE_BACKGROUND, 0.6))),
    light: ( (transparent(TITLE_BAR_ACTIVE_BACKGROUND, 0.6))),
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(_moduleId, 127, "Title bar background when the window is inactive.")));
const TITLE_BAR_BORDER = registerColor('titleBar.border', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(_moduleId, 128, "Title bar border color.")));
const MENUBAR_SELECTION_FOREGROUND = registerColor('menubar.selectionForeground', {
    dark: TITLE_BAR_ACTIVE_FOREGROUND,
    light: TITLE_BAR_ACTIVE_FOREGROUND,
    hcDark: TITLE_BAR_ACTIVE_FOREGROUND,
    hcLight: TITLE_BAR_ACTIVE_FOREGROUND,
}, ( localizeWithPath(
    _moduleId,
    129,
    "Foreground color of the selected menu item in the menubar."
)));
const MENUBAR_SELECTION_BACKGROUND = registerColor('menubar.selectionBackground', {
    dark: toolbarHoverBackground,
    light: toolbarHoverBackground,
    hcDark: null,
    hcLight: null,
}, ( localizeWithPath(
    _moduleId,
    130,
    "Background color of the selected menu item in the menubar."
)));
registerColor('menubar.selectionBorder', {
    dark: null,
    light: null,
    hcDark: activeContrastBorder,
    hcLight: activeContrastBorder,
}, ( localizeWithPath(_moduleId, 131, "Border color of the selected menu item in the menubar.")));
registerColor('commandCenter.foreground', { dark: TITLE_BAR_ACTIVE_FOREGROUND, hcDark: TITLE_BAR_ACTIVE_FOREGROUND, light: TITLE_BAR_ACTIVE_FOREGROUND, hcLight: TITLE_BAR_ACTIVE_FOREGROUND }, ( localizeWithPath(_moduleId, 132, "Foreground color of the command center")), false);
registerColor('commandCenter.activeForeground', { dark: MENUBAR_SELECTION_FOREGROUND, hcDark: MENUBAR_SELECTION_FOREGROUND, light: MENUBAR_SELECTION_FOREGROUND, hcLight: MENUBAR_SELECTION_FOREGROUND }, ( localizeWithPath(_moduleId, 133, "Active foreground color of the command center")), false);
registerColor('commandCenter.inactiveForeground', { dark: TITLE_BAR_INACTIVE_FOREGROUND, hcDark: TITLE_BAR_INACTIVE_FOREGROUND, light: TITLE_BAR_INACTIVE_FOREGROUND, hcLight: TITLE_BAR_INACTIVE_FOREGROUND }, ( localizeWithPath(
    _moduleId,
    134,
    "Foreground color of the command center when the window is inactive"
)), false);
const COMMAND_CENTER_BACKGROUND = registerColor('commandCenter.background', { dark: ( (Color.white.transparent(0.05))), hcDark: null, light: ( (Color.black.transparent(0.05))), hcLight: null }, ( localizeWithPath(_moduleId, 135, "Background color of the command center")), false);
registerColor('commandCenter.activeBackground', { dark: ( (Color.white.transparent(0.08))), hcDark: MENUBAR_SELECTION_BACKGROUND, light: ( (Color.black.transparent(0.08))), hcLight: MENUBAR_SELECTION_BACKGROUND }, ( localizeWithPath(_moduleId, 136, "Active background color of the command center")), false);
registerColor('commandCenter.border', { dark: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, .20))), hcDark: contrastBorder, light: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, .20))), hcLight: contrastBorder }, ( localizeWithPath(_moduleId, 137, "Border color of the command center")), false);
registerColor('commandCenter.activeBorder', { dark: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, .30))), hcDark: TITLE_BAR_ACTIVE_FOREGROUND, light: ( (transparent(TITLE_BAR_ACTIVE_FOREGROUND, .30))), hcLight: TITLE_BAR_ACTIVE_FOREGROUND }, ( localizeWithPath(_moduleId, 138, "Active border color of the command center")), false);
registerColor('commandCenter.inactiveBorder', { dark: ( (transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25))), hcDark: ( (transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25))), light: ( (transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25))), hcLight: ( (transparent(TITLE_BAR_INACTIVE_FOREGROUND, .25))) }, ( localizeWithPath(
    _moduleId,
    139,
    "Border color of the command center when the window is inactive"
)), false);
const NOTIFICATIONS_CENTER_BORDER = registerColor('notificationCenter.border', {
    dark: widgetBorder,
    light: widgetBorder,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    140,
    "Notifications center border color. Notifications slide in from the bottom right of the window."
)));
const NOTIFICATIONS_TOAST_BORDER = registerColor('notificationToast.border', {
    dark: widgetBorder,
    light: widgetBorder,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    141,
    "Notification toast border color. Notifications slide in from the bottom right of the window."
)));
registerColor('notifications.foreground', {
    dark: editorWidgetForeground,
    light: editorWidgetForeground,
    hcDark: editorWidgetForeground,
    hcLight: editorWidgetForeground
}, ( localizeWithPath(
    _moduleId,
    142,
    "Notifications foreground color. Notifications slide in from the bottom right of the window."
)));
const NOTIFICATIONS_BACKGROUND = registerColor('notifications.background', {
    dark: editorWidgetBackground,
    light: editorWidgetBackground,
    hcDark: editorWidgetBackground,
    hcLight: editorWidgetBackground
}, ( localizeWithPath(
    _moduleId,
    143,
    "Notifications background color. Notifications slide in from the bottom right of the window."
)));
registerColor('notificationLink.foreground', {
    dark: textLinkForeground,
    light: textLinkForeground,
    hcDark: textLinkForeground,
    hcLight: textLinkForeground
}, ( localizeWithPath(
    _moduleId,
    144,
    "Notification links foreground color. Notifications slide in from the bottom right of the window."
)));
const NOTIFICATIONS_CENTER_HEADER_FOREGROUND = registerColor('notificationCenterHeader.foreground', {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: null
}, ( localizeWithPath(
    _moduleId,
    145,
    "Notifications center header foreground color. Notifications slide in from the bottom right of the window."
)));
const NOTIFICATIONS_CENTER_HEADER_BACKGROUND = registerColor('notificationCenterHeader.background', {
    dark: ( (lighten(NOTIFICATIONS_BACKGROUND, 0.3))),
    light: ( (darken(NOTIFICATIONS_BACKGROUND, 0.05))),
    hcDark: NOTIFICATIONS_BACKGROUND,
    hcLight: NOTIFICATIONS_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    146,
    "Notifications center header background color. Notifications slide in from the bottom right of the window."
)));
registerColor('notifications.border', {
    dark: NOTIFICATIONS_CENTER_HEADER_BACKGROUND,
    light: NOTIFICATIONS_CENTER_HEADER_BACKGROUND,
    hcDark: NOTIFICATIONS_CENTER_HEADER_BACKGROUND,
    hcLight: NOTIFICATIONS_CENTER_HEADER_BACKGROUND
}, ( localizeWithPath(
    _moduleId,
    147,
    "Notifications border color separating from other notifications in the notifications center. Notifications slide in from the bottom right of the window."
)));
registerColor('notificationsErrorIcon.foreground', {
    dark: editorErrorForeground,
    light: editorErrorForeground,
    hcDark: editorErrorForeground,
    hcLight: editorErrorForeground
}, ( localizeWithPath(
    _moduleId,
    148,
    "The color used for the icon of error notifications. Notifications slide in from the bottom right of the window."
)));
registerColor('notificationsWarningIcon.foreground', {
    dark: editorWarningForeground,
    light: editorWarningForeground,
    hcDark: editorWarningForeground,
    hcLight: editorWarningForeground
}, ( localizeWithPath(
    _moduleId,
    149,
    "The color used for the icon of warning notifications. Notifications slide in from the bottom right of the window."
)));
registerColor('notificationsInfoIcon.foreground', {
    dark: editorInfoForeground,
    light: editorInfoForeground,
    hcDark: editorInfoForeground,
    hcLight: editorInfoForeground
}, ( localizeWithPath(
    _moduleId,
    150,
    "The color used for the icon of info notifications. Notifications slide in from the bottom right of the window."
)));
const WINDOW_ACTIVE_BORDER = registerColor('window.activeBorder', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    151,
    "The color used for the border of the window when it is active. Only supported in the macOS and Linux desktop client when using the custom title bar."
)));
const WINDOW_INACTIVE_BORDER = registerColor('window.inactiveBorder', {
    dark: null,
    light: null,
    hcDark: contrastBorder,
    hcLight: contrastBorder
}, ( localizeWithPath(
    _moduleId,
    152,
    "The color used for the border of the window when it is inactive. Only supported in the macOS and Linux desktop client when using the custom title bar."
)));
export { ACTIVITY_BAR_ACTIVE_BACKGROUND, ACTIVITY_BAR_ACTIVE_BORDER, ACTIVITY_BAR_ACTIVE_FOCUS_BORDER, ACTIVITY_BAR_BACKGROUND, ACTIVITY_BAR_BADGE_BACKGROUND, ACTIVITY_BAR_BADGE_FOREGROUND, ACTIVITY_BAR_BORDER, ACTIVITY_BAR_DRAG_AND_DROP_BORDER, ACTIVITY_BAR_FOREGROUND, ACTIVITY_BAR_INACTIVE_FOREGROUND, ACTIVITY_BAR_TOP_ACTIVE_BORDER, ACTIVITY_BAR_TOP_DRAG_AND_DROP_BORDER, ACTIVITY_BAR_TOP_FOREGROUND, ACTIVITY_BAR_TOP_INACTIVE_FOREGROUND, COMMAND_CENTER_BACKGROUND, EDITOR_DRAG_AND_DROP_BACKGROUND, EDITOR_DROP_INTO_PROMPT_BACKGROUND, EDITOR_DROP_INTO_PROMPT_BORDER, EDITOR_DROP_INTO_PROMPT_FOREGROUND, EDITOR_GROUP_BORDER, EDITOR_GROUP_EMPTY_BACKGROUND, EDITOR_GROUP_HEADER_BORDER, EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND, EDITOR_GROUP_HEADER_TABS_BACKGROUND, EDITOR_GROUP_HEADER_TABS_BORDER, EDITOR_PANE_BACKGROUND, EXTENSION_BADGE_REMOTE_BACKGROUND, EXTENSION_BADGE_REMOTE_FOREGROUND, MENUBAR_SELECTION_BACKGROUND, MENUBAR_SELECTION_FOREGROUND, NOTIFICATIONS_BACKGROUND, NOTIFICATIONS_CENTER_BORDER, NOTIFICATIONS_CENTER_HEADER_BACKGROUND, NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_TOAST_BORDER, PANEL_ACTIVE_TITLE_BORDER, PANEL_ACTIVE_TITLE_FOREGROUND, PANEL_BACKGROUND, PANEL_BORDER, PANEL_DRAG_AND_DROP_BORDER, PANEL_INACTIVE_TITLE_FOREGROUND, PANEL_SECTION_BORDER, PANEL_SECTION_DRAG_AND_DROP_BACKGROUND, PANEL_SECTION_HEADER_BACKGROUND, PANEL_SECTION_HEADER_BORDER, PANEL_SECTION_HEADER_FOREGROUND, PANEL_STICKY_SCROLL_BACKGROUND, PANEL_STICKY_SCROLL_BORDER, PANEL_STICKY_SCROLL_SHADOW, SIDE_BAR_BACKGROUND, SIDE_BAR_BORDER, SIDE_BAR_DRAG_AND_DROP_BACKGROUND, SIDE_BAR_FOREGROUND, SIDE_BAR_SECTION_HEADER_BACKGROUND, SIDE_BAR_SECTION_HEADER_BORDER, SIDE_BAR_SECTION_HEADER_FOREGROUND, SIDE_BAR_STICKY_SCROLL_BACKGROUND, SIDE_BAR_STICKY_SCROLL_BORDER, SIDE_BAR_STICKY_SCROLL_SHADOW, SIDE_BAR_TITLE_FOREGROUND, SIDE_BY_SIDE_EDITOR_HORIZONTAL_BORDER, SIDE_BY_SIDE_EDITOR_VERTICAL_BORDER, STATUS_BAR_BACKGROUND, STATUS_BAR_BORDER, STATUS_BAR_ERROR_ITEM_BACKGROUND, STATUS_BAR_FOCUS_BORDER, STATUS_BAR_FOREGROUND, STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND, STATUS_BAR_ITEM_FOCUS_BORDER, STATUS_BAR_ITEM_HOVER_BACKGROUND, STATUS_BAR_ITEM_HOVER_FOREGROUND, STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_REMOTE_ITEM_BACKGROUND, STATUS_BAR_REMOTE_ITEM_FOREGROUND, STATUS_BAR_WARNING_ITEM_BACKGROUND, TAB_ACTIVE_BACKGROUND, TAB_ACTIVE_BORDER, TAB_ACTIVE_BORDER_TOP, TAB_ACTIVE_FOREGROUND, TAB_ACTIVE_MODIFIED_BORDER, TAB_BORDER, TAB_HOVER_BACKGROUND, TAB_HOVER_BORDER, TAB_HOVER_FOREGROUND, TAB_INACTIVE_BACKGROUND, TAB_INACTIVE_FOREGROUND, TAB_INACTIVE_MODIFIED_BORDER, TAB_LAST_PINNED_BORDER, TAB_UNFOCUSED_ACTIVE_BACKGROUND, TAB_UNFOCUSED_ACTIVE_BORDER, TAB_UNFOCUSED_ACTIVE_BORDER_TOP, TAB_UNFOCUSED_ACTIVE_FOREGROUND, TAB_UNFOCUSED_ACTIVE_MODIFIED_BORDER, TAB_UNFOCUSED_HOVER_BACKGROUND, TAB_UNFOCUSED_HOVER_BORDER, TAB_UNFOCUSED_HOVER_FOREGROUND, TAB_UNFOCUSED_INACTIVE_BACKGROUND, TAB_UNFOCUSED_INACTIVE_MODIFIED_BORDER, TITLE_BAR_ACTIVE_BACKGROUND, TITLE_BAR_ACTIVE_FOREGROUND, TITLE_BAR_BORDER, TITLE_BAR_INACTIVE_BACKGROUND, TITLE_BAR_INACTIVE_FOREGROUND, WINDOW_ACTIVE_BORDER, WINDOW_INACTIVE_BORDER, WORKBENCH_BACKGROUND };
