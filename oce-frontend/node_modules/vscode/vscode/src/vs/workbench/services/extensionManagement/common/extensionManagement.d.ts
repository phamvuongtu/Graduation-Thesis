import { IExtensionIdentifier, IExtensionManifest, IExtension } from '../../../../platform/extensions/common/extensions.js';
import { InstallExtensionEvent, UninstallExtensionEvent, DidUninstallExtensionEvent, Metadata, ILocalExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';
import { URI } from '../../../../base/common/uri.js';
import { IProfileAwareExtensionManagementService } from './extensionManagement.service.js';

type DidChangeProfileEvent = {
    readonly added: ILocalExtension[];
    readonly removed: ILocalExtension[];
};
interface IExtensionManagementServer {
    readonly id: string;
    readonly label: string;
    readonly extensionManagementService: IProfileAwareExtensionManagementService;
}
interface IResourceExtension {
    readonly identifier: IExtensionIdentifier;
    readonly location: URI;
    readonly manifest: IExtensionManifest;
    readonly readmeUri?: URI;
    readonly changelogUri?: URI;
}
type InstallExtensionOnServerEvent = InstallExtensionEvent & {
    server: IExtensionManagementServer;
};
type UninstallExtensionOnServerEvent = UninstallExtensionEvent & {
    server: IExtensionManagementServer;
};
type DidUninstallExtensionOnServerEvent = DidUninstallExtensionEvent & {
    server: IExtensionManagementServer;
};
type DidChangeProfileForServerEvent = DidChangeProfileEvent & {
    server: IExtensionManagementServer;
};
declare const enum EnablementState {
    DisabledByTrustRequirement = 0,
    DisabledByExtensionKind = 1,
    DisabledByEnvironment = 2,
    EnabledByEnvironment = 3,
    DisabledByVirtualWorkspace = 4,
    DisabledByExtensionDependency = 5,
    DisabledGlobally = 6,
    DisabledWorkspace = 7,
    EnabledGlobally = 8,
    EnabledWorkspace = 9
}
interface IScannedExtension extends IExtension {
    readonly metadata?: Metadata;
}
type ScanOptions = {
    readonly skipInvalidExtensions?: boolean;
};

export { type DidChangeProfileEvent, type DidChangeProfileForServerEvent, type DidUninstallExtensionOnServerEvent, EnablementState, type IExtensionManagementServer, type IResourceExtension, type IScannedExtension, type InstallExtensionOnServerEvent, type ScanOptions, type UninstallExtensionOnServerEvent };
