import { GroupIdentifier, ISaveOptions, IUntypedEditorInput, IRevertOptions } from '../../../common/editor.js';
import { EditorInput } from '../../../common/editor/editorInput.js';
import { IEditorGroup } from './editorGroupsService.js';
import { IGroupModelChangeEvent } from '../../../common/editor/editorGroupModel.js';

/**
 * Open an editor in the currently active group.
 */
declare const ACTIVE_GROUP = -1;
type ACTIVE_GROUP_TYPE = typeof ACTIVE_GROUP;
/**
 * Open an editor to the side of the active group.
 */
declare const SIDE_GROUP = -2;
type SIDE_GROUP_TYPE = typeof SIDE_GROUP;
/**
 * Open an editor in a new auxiliary window.
 */
declare const AUX_WINDOW_GROUP = -3;
type AUX_WINDOW_GROUP_TYPE = typeof AUX_WINDOW_GROUP;
type PreferredGroup = IEditorGroup | GroupIdentifier | SIDE_GROUP_TYPE | ACTIVE_GROUP_TYPE | AUX_WINDOW_GROUP_TYPE;
interface ISaveEditorsOptions extends ISaveOptions {
    /**
     * If true, will ask for a location of the editor to save to.
     */
    readonly saveAs?: boolean;
}
interface ISaveEditorsResult {
    /**
     * Whether the save operation was successful.
     */
    readonly success: boolean;
    /**
     * Resulting editors after the save operation.
     */
    readonly editors: Array<EditorInput | IUntypedEditorInput>;
}
interface IUntypedEditorReplacement {
    /**
     * The editor to replace.
     */
    readonly editor: EditorInput;
    /**
     * The replacement for the editor.
     */
    readonly replacement: IUntypedEditorInput;
    /**
     * Skips asking the user for confirmation and doesn't
     * save the document. Only use this if you really need to!
    */
    forceReplaceDirty?: boolean;
}
interface IBaseSaveRevertAllEditorOptions {
    /**
     * Whether to include untitled editors as well.
     */
    readonly includeUntitled?: {
        /**
         * Whether to include scratchpad editors.
         * Scratchpads are not included if not specified.
         */
        readonly includeScratchpad: boolean;
    } | boolean;
    /**
     * Whether to exclude sticky editors.
     */
    readonly excludeSticky?: boolean;
}
interface ISaveAllEditorsOptions extends ISaveEditorsOptions, IBaseSaveRevertAllEditorOptions {
}
interface IRevertAllEditorsOptions extends IRevertOptions, IBaseSaveRevertAllEditorOptions {
}
interface IOpenEditorsOptions {
    /**
     * Whether to validate trust when opening editors
     * that are potentially not inside the workspace.
     */
    readonly validateTrust?: boolean;
}
interface IEditorsChangeEvent {
    /**
     * The group which had the editor change
     */
    groupId: GroupIdentifier;
    event: IGroupModelChangeEvent;
}

export { ACTIVE_GROUP, type ACTIVE_GROUP_TYPE, AUX_WINDOW_GROUP, type AUX_WINDOW_GROUP_TYPE, type IBaseSaveRevertAllEditorOptions, type IEditorsChangeEvent, type IOpenEditorsOptions, type IRevertAllEditorsOptions, type ISaveAllEditorsOptions, type ISaveEditorsOptions, type ISaveEditorsResult, type IUntypedEditorReplacement, type PreferredGroup, SIDE_GROUP, type SIDE_GROUP_TYPE };
