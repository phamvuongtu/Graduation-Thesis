import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { Schemas } from '../../../../base/common/network.js';
import { URI } from '../../../../base/common/uri.js';
import { localizeWithPath } from '../../../../nls.js';
import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
import { EditorInput } from '../../../common/editor/editorInput.js';
import { IPreferencesService } from './preferences.service.js';
var SettingsEditor2Input_1;
const _moduleId = "vs/workbench/services/preferences/common/preferencesEditorInput";
const SettingsEditorIcon = registerIcon('settings-editor-label-icon', Codicon.settings, ( localizeWithPath(_moduleId, 0, 'Icon of the settings editor label.')));
let SettingsEditor2Input = class SettingsEditor2Input extends EditorInput {
    static { SettingsEditor2Input_1 = this; }
    static { this.ID = 'workbench.input.settings2'; }
    constructor(_preferencesService) {
        super();
        this.resource = ( (URI.from({
            scheme: Schemas.vscodeSettings,
            path: `settingseditor`
        })));
        this._settingsModel = _preferencesService.createSettings2EditorModel();
    }
    matches(otherInput) {
        return super.matches(otherInput) || otherInput instanceof SettingsEditor2Input_1;
    }
    get typeId() {
        return SettingsEditor2Input_1.ID;
    }
    getName() {
        return ( localizeWithPath(_moduleId, 1, "Settings"));
    }
    getIcon() {
        return SettingsEditorIcon;
    }
    async resolve() {
        return this._settingsModel;
    }
    dispose() {
        this._settingsModel.dispose();
        super.dispose();
    }
};
SettingsEditor2Input = SettingsEditor2Input_1 = ( (__decorate([
    ( (__param(0, IPreferencesService)))
], SettingsEditor2Input)));
export { SettingsEditor2Input };
