import { ServiceIdentifier } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { IOutputChannel, IOutputChannelDescriptor } from './output.js';

declare const IOutputService: ServiceIdentifier<IOutputService>;
/**
* The output service to manage output from the various processes running.
*/
interface IOutputService {
    readonly _serviceBrand: undefined;
    /**
    * Given the channel id returns the output channel instance.
    * Channel should be first registered via OutputChannelRegistry.
    */
    getChannel(id: string): IOutputChannel | undefined;
    /**
    * Given the channel id returns the registered output channel descriptor.
    */
    getChannelDescriptor(id: string): IOutputChannelDescriptor | undefined;
    /**
    * Returns an array of all known output channels descriptors.
    */
    getChannelDescriptors(): IOutputChannelDescriptor[];
    /**
    * Returns the currently active channel.
    * Only one channel can be active at a given moment.
    */
    getActiveChannel(): IOutputChannel | undefined;
    /**
    * Show the channel with the passed id.
    */
    showChannel(id: string, preserveFocus?: boolean): Promise<void>;
    /**
    * Allows to register on active output channel change.
    */
    onActiveOutputChannel: Event<string>;
}

export { IOutputService };
