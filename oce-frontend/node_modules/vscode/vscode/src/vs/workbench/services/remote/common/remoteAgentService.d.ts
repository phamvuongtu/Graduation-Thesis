import { RemoteAgentConnectionContext } from '../../../../platform/remote/common/remoteAgentEnvironment.js';
import { IChannel, IServerChannel } from '../../../../base/parts/ipc/common/ipc.js';
import { Event } from '../../../../base/common/event.js';
import { PersistentConnectionEvent } from '../../../../platform/remote/common/remoteAgentConnection.js';

interface IExtensionHostExitInfo {
    code: number;
    signal: string;
}
interface IRemoteAgentConnection {
    readonly remoteAuthority: string;
    readonly onReconnecting: Event<void>;
    readonly onDidStateChange: Event<PersistentConnectionEvent>;
    dispose(): void;
    getChannel<T extends IChannel>(channelName: string): T;
    withChannel<T extends IChannel, R>(channelName: string, callback: (channel: T) => Promise<R>): Promise<R>;
    registerChannel<T extends IServerChannel<RemoteAgentConnectionContext>>(channelName: string, channel: T): void;
    getInitialConnectionTimeMs(): Promise<number>;
}

export type { IExtensionHostExitInfo, IRemoteAgentConnection };
