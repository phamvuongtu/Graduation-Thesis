import { URI } from '../../../../base/common/uri.js';
import { IResourceEditorInput, ITextResourceEditorInput } from '../../../../platform/editor/common/editor.js';
import { EditorInputWithOptionsAndGroup, IUntitledTextResourceEditorInput, IResourceDiffEditorInput, IResourceMultiDiffEditorInput, IResourceMergeEditorInput, EditorInputWithOptions } from '../../../common/editor.js';
import { IEditorGroup } from './editorGroupsService.js';
import { AtLeastOne } from '../../../../base/common/types.js';

type EditorAssociation = {
    readonly viewType: string;
    readonly filenamePattern?: string;
};
type EditorAssociations = readonly EditorAssociation[];
declare enum RegisteredEditorPriority {
    builtin = "builtin",
    option = "option",
    exclusive = "exclusive",
    default = "default"
}
/**
 * If we didn't resolve an editor dictates what to do with the opening state
 * ABORT = Do not continue with opening the editor
 * NONE = Continue as if the resolution has been disabled as the service could not resolve one
 */
declare const enum ResolvedStatus {
    ABORT = 1,
    NONE = 2
}
type ResolvedEditor = EditorInputWithOptionsAndGroup | ResolvedStatus;
type RegisteredEditorOptions = {
    /**
     * If your editor cannot be opened in multiple groups for the same resource
     */
    singlePerResource?: boolean | (() => boolean);
    /**
     * Whether or not you can support opening the given resource.
     * If omitted we assume you can open everything
     */
    canSupportResource?: (resource: URI) => boolean;
};
type RegisteredEditorInfo = {
    id: string;
    label: string;
    detail?: string;
    priority: RegisteredEditorPriority;
};
type EditorInputFactoryResult = EditorInputWithOptions | Promise<EditorInputWithOptions>;
type EditorInputFactoryFunction = (editorInput: IResourceEditorInput | ITextResourceEditorInput, group: IEditorGroup) => EditorInputFactoryResult;
type UntitledEditorInputFactoryFunction = (untitledEditorInput: IUntitledTextResourceEditorInput, group: IEditorGroup) => EditorInputFactoryResult;
type DiffEditorInputFactoryFunction = (diffEditorInput: IResourceDiffEditorInput, group: IEditorGroup) => EditorInputFactoryResult;
type MultiDiffEditorInputFactoryFunction = (multiDiffEditorInput: IResourceMultiDiffEditorInput, group: IEditorGroup) => EditorInputFactoryResult;
type MergeEditorInputFactoryFunction = (mergeEditorInput: IResourceMergeEditorInput, group: IEditorGroup) => EditorInputFactoryResult;
type EditorInputFactories = {
    createEditorInput?: EditorInputFactoryFunction;
    createUntitledEditorInput?: UntitledEditorInputFactoryFunction;
    createDiffEditorInput?: DiffEditorInputFactoryFunction;
    createMultiDiffEditorInput?: MultiDiffEditorInputFactoryFunction;
    createMergeEditorInput?: MergeEditorInputFactoryFunction;
};
type EditorInputFactoryObject = AtLeastOne<EditorInputFactories>;

export { type DiffEditorInputFactoryFunction, type EditorAssociation, type EditorAssociations, type EditorInputFactoryFunction, type EditorInputFactoryObject, type MergeEditorInputFactoryFunction, type MultiDiffEditorInputFactoryFunction, type RegisteredEditorInfo, type RegisteredEditorOptions, RegisteredEditorPriority, type ResolvedEditor, ResolvedStatus, type UntitledEditorInputFactoryFunction };
