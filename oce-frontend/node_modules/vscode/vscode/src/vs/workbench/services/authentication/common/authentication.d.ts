import { Event } from '../../../../base/common/event.js';

interface AuthenticationSessionAccount {
    label: string;
    id: string;
}
interface AuthenticationSession {
    id: string;
    accessToken: string;
    account: AuthenticationSessionAccount;
    scopes: ReadonlyArray<string>;
    idToken?: string;
}
interface AuthenticationSessionsChangeEvent {
    added: ReadonlyArray<AuthenticationSession> | undefined;
    removed: ReadonlyArray<AuthenticationSession> | undefined;
    changed: ReadonlyArray<AuthenticationSession> | undefined;
}
interface IAuthenticationProviderCreateSessionOptions {
    sessionToRecreate?: AuthenticationSession;
}
/**
 * Represents an authentication provider.
 */
interface IAuthenticationProvider {
    /**
     * The unique identifier of the authentication provider.
     */
    readonly id: string;
    /**
     * The display label of the authentication provider.
     */
    readonly label: string;
    /**
     * Indicates whether the authentication provider supports multiple accounts.
     */
    readonly supportsMultipleAccounts: boolean;
    /**
     * An {@link Event} which fires when the array of sessions has changed, or data
     * within a session has changed.
     */
    readonly onDidChangeSessions: Event<AuthenticationSessionsChangeEvent>;
    /**
     * Retrieves a list of authentication sessions.
     * @param scopes - An optional list of scopes. If provided, the sessions returned should match these permissions, otherwise all sessions should be returned.
     * @returns A promise that resolves to an array of authentication sessions.
     */
    getSessions(scopes?: string[]): Promise<readonly AuthenticationSession[]>;
    /**
     * Prompts the user to log in.
     * If login is successful, the `onDidChangeSessions` event should be fired.
     * If login fails, a rejected promise should be returned.
     * If the provider does not support multiple accounts, this method should not be called if there is already an existing session matching the provided scopes.
     * @param scopes - A list of scopes that the new session should be created with.
     * @param options - Additional options for creating the session.
     * @returns A promise that resolves to an authentication session.
     */
    createSession(scopes: string[], options: IAuthenticationProviderCreateSessionOptions): Promise<AuthenticationSession>;
    /**
     * Removes the session corresponding to the specified session ID.
     * If the removal is successful, the `onDidChangeSessions` event should be fired.
     * If a session cannot be removed, the provider should reject with an error message.
     * @param sessionId - The ID of the session to remove.
     */
    removeSession(sessionId: string): Promise<void>;
}

export type { AuthenticationSession, AuthenticationSessionAccount, AuthenticationSessionsChangeEvent, IAuthenticationProvider, IAuthenticationProviderCreateSessionOptions };
