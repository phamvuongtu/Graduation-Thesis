import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { localizeWithPath } from '../../../../nls.js';
import { Emitter } from '../../../../base/common/event.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IStorageService } from '../../../../platform/storage/common/storage.service.js';
import { ITunnelService } from '../../../../platform/tunnel/common/tunnel.service.js';
import { TunnelModel } from './tunnelModel.js';
import { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';
const _moduleId = "vs/workbench/services/remote/common/remoteExplorerService";
const REMOTE_EXPLORER_TYPE_KEY = 'remote.explorerType';
const TUNNEL_VIEW_ID = '~remote.forwardedPorts';
const TUNNEL_VIEW_CONTAINER_ID = '~remote.forwardedPortsContainer';
const PORT_AUTO_FORWARD_SETTING = 'remote.autoForwardPorts';
const PORT_AUTO_SOURCE_SETTING = 'remote.autoForwardPortsSource';
const PORT_AUTO_FALLBACK_SETTING = 'remote.autoForwardPortsFallback';
const PORT_AUTO_SOURCE_SETTING_PROCESS = 'process';
const PORT_AUTO_SOURCE_SETTING_OUTPUT = 'output';
const PORT_AUTO_SOURCE_SETTING_HYBRID = 'hybrid';
var TunnelType;
( ((function(TunnelType) {
    TunnelType["Candidate"] = "Candidate";
    TunnelType["Detected"] = "Detected";
    TunnelType["Forwarded"] = "Forwarded";
    TunnelType["Add"] = "Add";
})(TunnelType || (TunnelType = {}))));
var TunnelEditId;
( ((function(TunnelEditId) {
    TunnelEditId[TunnelEditId["None"] = 0] = "None";
    TunnelEditId[TunnelEditId["New"] = 1] = "New";
    TunnelEditId[TunnelEditId["Label"] = 2] = "Label";
    TunnelEditId[TunnelEditId["LocalPort"] = 3] = "LocalPort";
})(TunnelEditId || (TunnelEditId = {}))));
const getStartedWalkthrough = {
    type: 'object',
    required: ['id'],
    properties: {
        id: {
            description: ( localizeWithPath(_moduleId, 0, 'The ID of a Get Started walkthrough to open.')),
            type: 'string'
        },
    }
};
const remoteHelpExtPoint = ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'remoteHelp',
    jsonSchema: {
        description: ( localizeWithPath(_moduleId, 1, 'Contributes help information for Remote')),
        type: 'object',
        properties: {
            'getStarted': {
                description: ( localizeWithPath(
                    _moduleId,
                    2,
                    "The url, or a command that returns the url, to your project's Getting Started page, or a walkthrough ID contributed by your project's extension"
                )),
                oneOf: [
                    { type: 'string' },
                    getStartedWalkthrough
                ]
            },
            'documentation': {
                description: ( localizeWithPath(
                    _moduleId,
                    3,
                    "The url, or a command that returns the url, to your project's documentation page"
                )),
                type: 'string'
            },
            'feedback': {
                description: ( localizeWithPath(
                    _moduleId,
                    4,
                    "The url, or a command that returns the url, to your project's feedback reporter"
                )),
                type: 'string',
                markdownDeprecationMessage: ( localizeWithPath(_moduleId, 5, "Use {0} instead", '`reportIssue`'))
            },
            'reportIssue': {
                description: ( localizeWithPath(
                    _moduleId,
                    6,
                    "The url, or a command that returns the url, to your project's issue reporter"
                )),
                type: 'string'
            },
            'issues': {
                description: ( localizeWithPath(
                    _moduleId,
                    7,
                    "The url, or a command that returns the url, to your project's issues list"
                )),
                type: 'string'
            }
        }
    }
});
let RemoteExplorerService = class RemoteExplorerService {
    constructor(storageService, tunnelService, instantiationService) {
        this.storageService = storageService;
        this.tunnelService = tunnelService;
        this._targetType = [];
        this._onDidChangeTargetType = ( (new Emitter()));
        this.onDidChangeTargetType = this._onDidChangeTargetType.event;
        this._onDidChangeHelpInformation = ( (new Emitter()));
        this.onDidChangeHelpInformation = this._onDidChangeHelpInformation.event;
        this._helpInformation = [];
        this._onDidChangeEditable = ( (new Emitter()));
        this.onDidChangeEditable = this._onDidChangeEditable.event;
        this._onEnabledPortsFeatures = ( (new Emitter()));
        this.onEnabledPortsFeatures = this._onEnabledPortsFeatures.event;
        this._portsFeaturesEnabled = false;
        this.namedProcesses = ( (new Map()));
        this._tunnelModel = instantiationService.createInstance(TunnelModel);
        remoteHelpExtPoint.setHandler((extensions) => {
            this._helpInformation.push(...extensions);
            this._onDidChangeHelpInformation.fire(extensions);
        });
    }
    get helpInformation() {
        return this._helpInformation;
    }
    set targetType(name) {
        const current = this._targetType.length > 0 ? this._targetType[0] : '';
        const newName = name.length > 0 ? name[0] : '';
        if (current !== newName) {
            this._targetType = name;
            this.storageService.store(REMOTE_EXPLORER_TYPE_KEY, ( (this._targetType.toString())), 1 , 1 );
            this.storageService.store(REMOTE_EXPLORER_TYPE_KEY, ( (this._targetType.toString())), 0 , 0 );
            this._onDidChangeTargetType.fire(this._targetType);
        }
    }
    get targetType() {
        return this._targetType;
    }
    get tunnelModel() {
        return this._tunnelModel;
    }
    forward(tunnelProperties, attributes) {
        return this.tunnelModel.forward(tunnelProperties, attributes);
    }
    close(remote, reason) {
        return this.tunnelModel.close(remote.host, remote.port, reason);
    }
    setTunnelInformation(tunnelInformation) {
        if (tunnelInformation?.features) {
            this.tunnelService.setTunnelFeatures(tunnelInformation.features);
        }
        this.tunnelModel.addEnvironmentTunnels(tunnelInformation?.environmentTunnels);
    }
    setEditable(tunnelItem, editId, data) {
        if (!data) {
            this._editable = undefined;
        }
        else {
            this._editable = { tunnelItem, data, editId };
        }
        this._onDidChangeEditable.fire(tunnelItem ? { tunnel: tunnelItem, editId } : undefined);
    }
    getEditableData(tunnelItem, editId) {
        return (this._editable &&
            ((!tunnelItem && (tunnelItem === this._editable.tunnelItem)) ||
                (tunnelItem && (this._editable.tunnelItem?.remotePort === tunnelItem.remotePort) && (this._editable.tunnelItem.remoteHost === tunnelItem.remoteHost)
                    && (this._editable.editId === editId)))) ?
            this._editable.data : undefined;
    }
    setCandidateFilter(filter) {
        if (!filter) {
            return {
                dispose: () => { }
            };
        }
        this.tunnelModel.setCandidateFilter(filter);
        return {
            dispose: () => {
                this.tunnelModel.setCandidateFilter(undefined);
            }
        };
    }
    onFoundNewCandidates(candidates) {
        this.tunnelModel.setCandidates(candidates);
    }
    restore() {
        return this.tunnelModel.restoreForwarded();
    }
    enablePortsFeatures() {
        this._portsFeaturesEnabled = true;
        this._onEnabledPortsFeatures.fire();
    }
    get portsFeaturesEnabled() {
        return this._portsFeaturesEnabled;
    }
};
RemoteExplorerService = ( (__decorate([
    ( (__param(0, IStorageService))),
    ( (__param(1, ITunnelService))),
    ( (__param(2, IInstantiationService)))
], RemoteExplorerService)));
export { PORT_AUTO_FALLBACK_SETTING, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_HYBRID, PORT_AUTO_SOURCE_SETTING_OUTPUT, PORT_AUTO_SOURCE_SETTING_PROCESS, REMOTE_EXPLORER_TYPE_KEY, RemoteExplorerService, TUNNEL_VIEW_CONTAINER_ID, TUNNEL_VIEW_ID, TunnelEditId, TunnelType };
