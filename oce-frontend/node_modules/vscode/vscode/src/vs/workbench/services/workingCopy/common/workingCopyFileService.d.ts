import { IWaitUntil } from '../../../../base/common/event.js';
import { URI } from '../../../../base/common/uri.js';
import { FileOperation } from '../../../../platform/files/common/files.js';
import { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';
import { CancellationToken } from '../../../../base/common/cancellation.js';
import { IWorkingCopy } from './workingCopy.js';
import { SaveReason } from '../../../common/editor.js';
import { IProgress, IProgressStep } from '../../../../platform/progress/common/progress.js';
import { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from './storedFileWorkingCopy.js';

interface SourceTargetPair {
    /**
     * The source resource that is defined for move operations.
     */
    readonly source?: URI;
    /**
     * The target resource the event is about.
     */
    readonly target: URI;
}
interface IFileOperationUndoRedoInfo {
    /**
     * Id of the undo group that the file operation belongs to.
     */
    undoRedoGroupId?: number;
    /**
     * Flag indicates if the operation is an undo.
     */
    isUndoing?: boolean;
}
interface WorkingCopyFileEvent extends IWaitUntil {
    /**
     * An identifier to correlate the operation through the
     * different event types (before, after, error).
     */
    readonly correlationId: number;
    /**
     * The file operation that is taking place.
     */
    readonly operation: FileOperation;
    /**
     * The array of source/target pair of files involved in given operation.
     */
    readonly files: readonly SourceTargetPair[];
}
interface IWorkingCopyFileOperationParticipant {
    /**
     * Participate in a file operation of working copies. Allows to
     * change the working copies before they are being saved to disk.
     */
    participate(files: SourceTargetPair[], operation: FileOperation, undoInfo: IFileOperationUndoRedoInfo | undefined, timeout: number, token: CancellationToken): Promise<void>;
}
interface IStoredFileWorkingCopySaveParticipantContext {
    /**
     * The reason why the save was triggered.
     */
    readonly reason: SaveReason;
    /**
     * Only applies to when a text file was saved as, for
     * example when starting with untitled and saving. This
     * provides access to the initial resource the text
     * file had before.
     */
    readonly savedFrom?: URI;
}
interface IStoredFileWorkingCopySaveParticipant {
    /**
     * Participate in a save operation of file stored working copies.
     * Allows to make changes before content is being saved to disk.
     */
    participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void>;
}
interface ICreateOperation {
    resource: URI;
    overwrite?: boolean;
}
interface ICreateFileOperation extends ICreateOperation {
    contents?: VSBuffer | VSBufferReadable | VSBufferReadableStream;
}
interface IDeleteOperation {
    resource: URI;
    useTrash?: boolean;
    recursive?: boolean;
}
interface IMoveOperation {
    file: Required<SourceTargetPair>;
    overwrite?: boolean;
}
interface ICopyOperation extends IMoveOperation {
}
/**
 * Returns the working copies for a given resource.
 */
type WorkingCopyProvider = (resourceOrFolder: URI) => IWorkingCopy[];

export type { ICopyOperation, ICreateFileOperation, ICreateOperation, IDeleteOperation, IFileOperationUndoRedoInfo, IMoveOperation, IStoredFileWorkingCopySaveParticipant, IStoredFileWorkingCopySaveParticipantContext, IWorkingCopyFileOperationParticipant, SourceTargetPair, WorkingCopyFileEvent, WorkingCopyProvider };
