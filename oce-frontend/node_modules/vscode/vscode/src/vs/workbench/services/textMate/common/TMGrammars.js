import { localizeWithPath } from '../../../../nls.js';
import { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';
import { languagesExtPoint } from '../../language/common/languageService.js';
const _moduleId = "vs/workbench/services/textMate/common/TMGrammars";
const grammarsExtPoint = ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'grammars',
    deps: [languagesExtPoint],
    jsonSchema: {
        description: ( localizeWithPath(_moduleId, 0, 'Contributes textmate tokenizers.')),
        type: 'array',
        defaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],
        items: {
            type: 'object',
            defaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],
            properties: {
                language: {
                    description: ( localizeWithPath(
                        _moduleId,
                        1,
                        'Language identifier for which this syntax is contributed to.'
                    )),
                    type: 'string'
                },
                scopeName: {
                    description: ( localizeWithPath(_moduleId, 2, 'Textmate scope name used by the tmLanguage file.')),
                    type: 'string'
                },
                path: {
                    description: ( localizeWithPath(
                        _moduleId,
                        3,
                        'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \'./syntaxes/\'.'
                    )),
                    type: 'string'
                },
                embeddedLanguages: {
                    description: ( localizeWithPath(
                        _moduleId,
                        4,
                        'A map of scope name to language id if this grammar contains embedded languages.'
                    )),
                    type: 'object'
                },
                tokenTypes: {
                    description: ( localizeWithPath(_moduleId, 5, 'A map of scope name to token types.')),
                    type: 'object',
                    additionalProperties: {
                        enum: ['string', 'comment', 'other']
                    }
                },
                injectTo: {
                    description: ( localizeWithPath(
                        _moduleId,
                        6,
                        'List of language scope names to which this grammar is injected to.'
                    )),
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                balancedBracketScopes: {
                    description: ( localizeWithPath(_moduleId, 7, 'Defines which scope names contain balanced brackets.')),
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    default: ['*'],
                },
                unbalancedBracketScopes: {
                    description: ( localizeWithPath(
                        _moduleId,
                        8,
                        'Defines which scope names do not contain balanced brackets.'
                    )),
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    default: [],
                },
            },
            required: ['scopeName', 'path']
        }
    }
});
export { grammarsExtPoint };
