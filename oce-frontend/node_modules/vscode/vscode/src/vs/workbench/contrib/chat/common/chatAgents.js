import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { timeout } from '../../../../base/common/async.js';
import { CancellationToken } from '../../../../base/common/cancellation.js';
import { Emitter } from '../../../../base/common/event.js';
import { Iterable } from '../../../../base/common/iterator.js';
import { toDisposable } from '../../../../base/common/lifecycle.js';
import { observableValue } from '../../../../base/common/observableInternal/base.js';
import { equalsIgnoreCase } from '../../../../base/common/strings.js';
import { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.service.js';
import { ILogService } from '../../../../platform/log/common/log.service.js';
import { IProductService } from '../../../../platform/product/common/productService.service.js';
import { asJson } from '../../../../platform/request/common/request.js';
import { IRequestService } from '../../../../platform/request/common/request.service.js';
import { IStorageService } from '../../../../platform/storage/common/storage.service.js';
import { CONTEXT_CHAT_ENABLED } from './chatContextKeys.js';
var ChatAgentNameService_1;
var ChatAgentLocation;
( (function(ChatAgentLocation) {
    ChatAgentLocation["Panel"] = "panel";
    ChatAgentLocation["Terminal"] = "terminal";
    ChatAgentLocation["Notebook"] = "notebook";
    ChatAgentLocation["Editor"] = "editor";
})(ChatAgentLocation || (ChatAgentLocation = {})));
( (function(ChatAgentLocation) {
    function fromRaw(value) {
        switch (value) {
            case 'panel': return ChatAgentLocation.Panel;
            case 'terminal': return ChatAgentLocation.Terminal;
            case 'notebook': return ChatAgentLocation.Notebook;
            case 'editor': return ChatAgentLocation.Editor;
        }
        return ChatAgentLocation.Panel;
    }
    ChatAgentLocation.fromRaw = fromRaw;
})(ChatAgentLocation || (ChatAgentLocation = {})));
let ChatAgentService = class ChatAgentService {
    static { this.AGENT_LEADER = '@'; }
    constructor(contextKeyService) {
        this.contextKeyService = contextKeyService;
        this._agents = [];
        this._onDidChangeAgents = ( new Emitter());
        this.onDidChangeAgents = this._onDidChangeAgents.event;
        this._hasDefaultAgent = CONTEXT_CHAT_ENABLED.bindTo(this.contextKeyService);
    }
    registerAgent(id, data) {
        const existingAgent = this.getAgent(id);
        if (existingAgent) {
            throw ( new Error(`Agent already registered: ${JSON.stringify(id)}`));
        }
        const that = this;
        const commands = data.slashCommands;
        data = {
            ...data,
            get slashCommands() {
                return commands.filter(c => !c.when || that.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(c.when)));
            }
        };
        const entry = { data };
        this._agents.push(entry);
        return toDisposable(() => {
            this._agents = this._agents.filter(a => a !== entry);
            this._onDidChangeAgents.fire(undefined);
        });
    }
    registerAgentImplementation(id, agentImpl) {
        const entry = this._getAgentEntry(id);
        if (!entry) {
            throw ( new Error(`Unknown agent: ${JSON.stringify(id)}`));
        }
        if (entry.impl) {
            throw ( new Error(`Agent already has implementation: ${JSON.stringify(id)}`));
        }
        if (entry.data.isDefault) {
            this._hasDefaultAgent.set(true);
        }
        entry.impl = agentImpl;
        this._onDidChangeAgents.fire(( new MergedChatAgent(entry.data, agentImpl)));
        return toDisposable(() => {
            entry.impl = undefined;
            this._onDidChangeAgents.fire(undefined);
            if (entry.data.isDefault) {
                this._hasDefaultAgent.set(false);
            }
        });
    }
    registerDynamicAgent(data, agentImpl) {
        const agent = { data, impl: agentImpl };
        this._agents.push(agent);
        this._onDidChangeAgents.fire(( new MergedChatAgent(data, agentImpl)));
        return toDisposable(() => {
            this._agents = this._agents.filter(a => a !== agent);
            this._onDidChangeAgents.fire(undefined);
        });
    }
    updateAgent(id, updateMetadata) {
        const agent = this._getAgentEntry(id);
        if (!agent?.impl) {
            throw ( new Error(`No activated agent with id ${JSON.stringify(id)} registered`));
        }
        agent.data.metadata = { ...agent.data.metadata, ...updateMetadata };
        this._onDidChangeAgents.fire(( new MergedChatAgent(agent.data, agent.impl)));
    }
    getDefaultAgent(location) {
        return this.getActivatedAgents().find(a => !!a.isDefault && a.locations.includes(location));
    }
    getContributedDefaultAgent(location) {
        return this.getAgents().find(a => !!a.isDefault && a.locations.includes(location));
    }
    getSecondaryAgent() {
        return Iterable.find(( this._agents.values()), a => !!a.data.metadata.isSecondary)?.data;
    }
    _getAgentEntry(id) {
        return this._agents.find(a => a.data.id === id);
    }
    getAgent(id) {
        return this._getAgentEntry(id)?.data;
    }
    getAgents() {
        return ( this._agents.map(entry => entry.data));
    }
    getActivatedAgents() {
        return ( Array.from(( this._agents.values()))
            .filter(a => !!a.impl)
            .map(a => ( new MergedChatAgent(a.data, a.impl))));
    }
    getAgentsByName(name) {
        return this.getAgents().filter(a => a.name === name);
    }
    async invokeAgent(id, request, progress, history, token) {
        const data = this._getAgentEntry(id);
        if (!data?.impl) {
            throw ( new Error(`No activated agent with id ${id}`));
        }
        return await data.impl.invoke(request, progress, history, token);
    }
    async getFollowups(id, request, result, history, token) {
        const data = this._getAgentEntry(id);
        if (!data?.impl) {
            throw ( new Error(`No activated agent with id ${id}`));
        }
        if (!data.impl?.provideFollowups) {
            return [];
        }
        return data.impl.provideFollowups(request, result, history, token);
    }
};
ChatAgentService = ( __decorate([
    ( __param(0, IContextKeyService))
], ChatAgentService));
class MergedChatAgent {
    constructor(data, impl) {
        this.data = data;
        this.impl = impl;
    }
    get id() { return this.data.id; }
    get name() { return this.data.name ?? ''; }
    get description() { return this.data.description ?? ''; }
    get extensionId() { return this.data.extensionId; }
    get extensionPublisherId() { return this.data.extensionPublisherId; }
    get extensionPublisherDisplayName() { return this.data.extensionPublisherDisplayName; }
    get extensionDisplayName() { return this.data.extensionDisplayName; }
    get isDefault() { return this.data.isDefault; }
    get metadata() { return this.data.metadata; }
    get slashCommands() { return this.data.slashCommands; }
    get defaultImplicitVariables() { return this.data.defaultImplicitVariables; }
    get locations() { return this.data.locations; }
    async invoke(request, progress, history, token) {
        return this.impl.invoke(request, progress, history, token);
    }
    async provideFollowups(request, result, history, token) {
        if (this.impl.provideFollowups) {
            return this.impl.provideFollowups(request, result, history, token);
        }
        return [];
    }
    provideWelcomeMessage(location, token) {
        if (this.impl.provideWelcomeMessage) {
            return this.impl.provideWelcomeMessage(location, token);
        }
        return undefined;
    }
    provideSampleQuestions(location, token) {
        if (this.impl.provideSampleQuestions) {
            return this.impl.provideSampleQuestions(location, token);
        }
        return undefined;
    }
}
let ChatAgentNameService = class ChatAgentNameService {
    static { ChatAgentNameService_1 = this; }
    static { this.StorageKey = 'chat.participantNameRegistry'; }
    constructor(productService, requestService, logService, storageService) {
        this.requestService = requestService;
        this.logService = logService;
        this.storageService = storageService;
        this.registry = observableValue(this, Object.create(null));
        this.disposed = false;
        if (!productService.chatParticipantRegistry) {
            return;
        }
        this.url = productService.chatParticipantRegistry;
        const raw = storageService.get(ChatAgentNameService_1.StorageKey, -1 );
        try {
            this.registry.set(JSON.parse(raw ?? '{}'), undefined);
        }
        catch (err) {
            storageService.remove(ChatAgentNameService_1.StorageKey, -1 );
        }
        this.refresh();
    }
    refresh() {
        if (this.disposed) {
            return;
        }
        this.update()
            .catch(err => this.logService.warn('Failed to fetch chat participant registry', err))
            .then(() => timeout(5 * 60 * 1000))
            .then(() => this.refresh());
    }
    async update() {
        const context = await this.requestService.request({ type: 'GET', url: this.url }, CancellationToken.None);
        if (context.res.statusCode !== 200) {
            throw ( new Error('Could not get extensions report.'));
        }
        const result = await asJson(context);
        if (!result || result.version !== 1) {
            throw ( new Error('Unexpected chat participant registry response.'));
        }
        const registry = result.restrictedChatParticipants;
        this.registry.set(registry, undefined);
        this.storageService.store(ChatAgentNameService_1.StorageKey, JSON.stringify(registry), -1 , 1 );
    }
    getAgentNameRestriction(chatAgentData) {
        const allowList = ( this.registry.map(registry => registry[chatAgentData.name.toLowerCase()]));
        return ( allowList.map(allowList => {
            if (!allowList) {
                return true;
            }
            return ( allowList.some(
                id => equalsIgnoreCase(id, id.includes('.') ? chatAgentData.extensionId.value : chatAgentData.extensionPublisherId)
            ));
        }));
    }
    dispose() {
        this.disposed = true;
    }
};
ChatAgentNameService = ChatAgentNameService_1 = ( __decorate([
    ( __param(0, IProductService)),
    ( __param(1, IRequestService)),
    ( __param(2, ILogService)),
    ( __param(3, IStorageService))
], ChatAgentNameService));
export { ChatAgentLocation, ChatAgentNameService, ChatAgentService, MergedChatAgent };
