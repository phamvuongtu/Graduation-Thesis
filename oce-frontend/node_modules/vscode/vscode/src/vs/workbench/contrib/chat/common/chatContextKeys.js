import { localizeWithPath } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';
const _moduleId = "vs/workbench/contrib/chat/common/chatContextKeys";
const CONTEXT_RESPONSE_VOTE = ( (new RawContextKey(
 'chatSessionResponseVote',
 '',
 { type: 'string', description: ( localizeWithPath(
  _moduleId,
  0,
  "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string."
 )) }
)));
const CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND = ( (new RawContextKey(
 'chatSessionResponseDetectedAgentOrCommand',
 false,
 { type: 'boolean', description: ( localizeWithPath(_moduleId, 1, "When the agent or command was automatically detected")) }
)));
const CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING = ( (new RawContextKey(
 'chatResponseSupportsIssueReporting',
 false,
 { type: 'boolean', description: ( localizeWithPath(
  _moduleId,
  2,
  "True when the current chat response supports issue reporting."
 )) }
)));
const CONTEXT_RESPONSE_FILTERED = ( (new RawContextKey(
 'chatSessionResponseFiltered',
 false,
 { type: 'boolean', description: ( localizeWithPath(
  _moduleId,
  3,
  "True when the chat response was filtered out by the server."
 )) }
)));
const CONTEXT_CHAT_REQUEST_IN_PROGRESS = ( (new RawContextKey(
 'chatSessionRequestInProgress',
 false,
 { type: 'boolean', description: ( localizeWithPath(_moduleId, 4, "True when the current request is still in progress.")) }
)));
const CONTEXT_RESPONSE = ( (new RawContextKey('chatResponse', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 5, "The chat item is a response.")) })));
const CONTEXT_REQUEST = ( (new RawContextKey('chatRequest', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 6, "The chat item is a request")) })));
const CONTEXT_CHAT_EDIT_APPLIED = ( (new RawContextKey('chatEditApplied', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 7, "True when the chat text edits have been applied.")) })));
const CONTEXT_CHAT_INPUT_HAS_TEXT = ( (new RawContextKey('chatInputHasText', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 8, "True when the chat input has text.")) })));
const CONTEXT_CHAT_INPUT_HAS_FOCUS = ( (new RawContextKey('chatInputHasFocus', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 9, "True when the chat input has focus.")) })));
const CONTEXT_IN_CHAT_INPUT = ( (new RawContextKey('inChatInput', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 10, "True when focus is in the chat input, false otherwise.")) })));
const CONTEXT_IN_CHAT_SESSION = ( (new RawContextKey('inChat', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 11, "True when focus is in the chat widget, false otherwise.")) })));
const CONTEXT_CHAT_ENABLED = ( (new RawContextKey('chatIsEnabled', false, { type: 'boolean', description: ( localizeWithPath(
 _moduleId,
 12,
 "True when chat is enabled because a default chat participant is registered."
)) })));
const CONTEXT_CHAT_INPUT_CURSOR_AT_TOP = ( (new RawContextKey('chatCursorAtTop', false)));
const CONTEXT_CHAT_INPUT_HAS_AGENT = ( (new RawContextKey('chatInputHasAgent', false)));
const CONTEXT_CHAT_LOCATION = ( (new RawContextKey('chatLocation', undefined)));
export { CONTEXT_CHAT_EDIT_APPLIED, CONTEXT_CHAT_ENABLED, CONTEXT_CHAT_INPUT_CURSOR_AT_TOP, CONTEXT_CHAT_INPUT_HAS_AGENT, CONTEXT_CHAT_INPUT_HAS_FOCUS, CONTEXT_CHAT_INPUT_HAS_TEXT, CONTEXT_CHAT_LOCATION, CONTEXT_CHAT_REQUEST_IN_PROGRESS, CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING, CONTEXT_IN_CHAT_INPUT, CONTEXT_IN_CHAT_SESSION, CONTEXT_REQUEST, CONTEXT_RESPONSE, CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND, CONTEXT_RESPONSE_FILTERED, CONTEXT_RESPONSE_VOTE };
