import { localizeWithPath } from '../../../../nls.js';
import { RawContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';
import { TERMINAL_VIEW_ID } from './terminal.js';
const _moduleId = "vs/workbench/contrib/terminal/common/terminalContextKey";
var TerminalContextKeys;
( ((function(TerminalContextKeys) {
    TerminalContextKeys.isOpen = ( (new RawContextKey("terminalIsOpen" , false, true)));
    TerminalContextKeys.focus = ( (new RawContextKey(
        "terminalFocus" ,
        false,
        ( localizeWithPath(_moduleId, 0, "Whether the terminal is focused."))
    )));
    TerminalContextKeys.focusInAny = ( (new RawContextKey(
        "terminalFocusInAny" ,
        false,
        ( localizeWithPath(
            _moduleId,
            1,
            "Whether any terminal is focused, including detached terminals used in other UI."
        ))
    )));
    TerminalContextKeys.editorFocus = ( (new RawContextKey(
        "terminalEditorFocus" ,
        false,
        ( localizeWithPath(_moduleId, 2, "Whether a terminal in the editor area is focused."))
    )));
    TerminalContextKeys.count = ( (new RawContextKey("terminalCount" , 0, ( localizeWithPath(_moduleId, 3, "The current number of terminals.")))));
    TerminalContextKeys.groupCount = ( (new RawContextKey("terminalGroupCount" , 0, true)));
    TerminalContextKeys.tabsNarrow = ( (new RawContextKey(
        "isTerminalTabsNarrow" ,
        false,
        true
    )));
    TerminalContextKeys.terminalHasFixedWidth = ( (new RawContextKey(
        "terminalHasFixedWidth" ,
        false,
        true
    )));
    TerminalContextKeys.tabsFocus = ( (new RawContextKey(
        "terminalTabsFocus" ,
        false,
        ( localizeWithPath(_moduleId, 4, "Whether the terminal tabs widget is focused."))
    )));
    TerminalContextKeys.webExtensionContributedProfile = ( (new RawContextKey(
        "terminalWebExtensionContributedProfile" ,
        false,
        true
    )));
    TerminalContextKeys.terminalHasBeenCreated = ( (new RawContextKey(
        "terminalHasBeenCreated" ,
        false,
        true
    )));
    TerminalContextKeys.terminalEditorActive = ( (new RawContextKey(
        "terminalEditorActive" ,
        false,
        true
    )));
    TerminalContextKeys.tabsMouse = ( (new RawContextKey("terminalTabsMouse" , false, true)));
    TerminalContextKeys.shellType = ( (new RawContextKey(
        "terminalShellType" ,
        undefined,
        { type: 'string', description: ( localizeWithPath(
            _moduleId,
            5,
            "The shell type of the active terminal, this is set to the last known value when no terminals exist."
        )) }
    )));
    TerminalContextKeys.altBufferActive = ( (new RawContextKey(
        "terminalAltBufferActive" ,
        false,
        ( localizeWithPath(_moduleId, 6, "Whether the terminal's alt buffer is active."))
    )));
    TerminalContextKeys.suggestWidgetVisible = ( (new RawContextKey(
        "terminalSuggestWidgetVisible" ,
        false,
        ( localizeWithPath(_moduleId, 7, "Whether the terminal's suggest widget is visible."))
    )));
    TerminalContextKeys.notFocus = ( (TerminalContextKeys.focus.toNegated()));
    TerminalContextKeys.viewShowing = ( (new RawContextKey(
        "terminalViewShowing" ,
        false,
        ( localizeWithPath(_moduleId, 8, "Whether the terminal view is showing"))
    )));
    TerminalContextKeys.textSelected = ( (new RawContextKey(
        "terminalTextSelected" ,
        false,
        ( localizeWithPath(_moduleId, 9, "Whether text is selected in the active terminal."))
    )));
    TerminalContextKeys.textSelectedInFocused = ( (new RawContextKey(
        "terminalTextSelectedInFocused" ,
        false,
        ( localizeWithPath(_moduleId, 10, "Whether text is selected in a focused terminal."))
    )));
    TerminalContextKeys.notTextSelected = ( (TerminalContextKeys.textSelected.toNegated()));
    TerminalContextKeys.findVisible = ( (new RawContextKey(
        "terminalFindVisible" ,
        false,
        true
    )));
    TerminalContextKeys.notFindVisible = ( (TerminalContextKeys.findVisible.toNegated()));
    TerminalContextKeys.findInputFocus = ( (new RawContextKey(
        "terminalFindInputFocused" ,
        false,
        true
    )));
    TerminalContextKeys.findFocus = ( (new RawContextKey(
        "terminalFindFocused" ,
        false,
        true
    )));
    TerminalContextKeys.notFindFocus = ( (TerminalContextKeys.findInputFocus.toNegated()));
    TerminalContextKeys.processSupported = ( (new RawContextKey(
        "terminalProcessSupported" ,
        false,
        ( localizeWithPath(
            _moduleId,
            11,
            "Whether terminal processes can be launched in the current workspace."
        ))
    )));
    TerminalContextKeys.tabsSingularSelection = ( (new RawContextKey(
        "terminalTabsSingularSelection" ,
        false,
        ( localizeWithPath(
            _moduleId,
            12,
            "Whether one terminal is selected in the terminal tabs list."
        ))
    )));
    TerminalContextKeys.splitTerminal = ( (new RawContextKey(
        "terminalSplitTerminal" ,
        false,
        ( localizeWithPath(_moduleId, 13, "Whether the focused tab's terminal is a split terminal."))
    )));
    TerminalContextKeys.inTerminalRunCommandPicker = ( (new RawContextKey(
        "inTerminalRunCommandPicker" ,
        false,
        ( localizeWithPath(
            _moduleId,
            14,
            "Whether the terminal run command picker is currently open."
        ))
    )));
    TerminalContextKeys.terminalShellIntegrationEnabled = ( (new RawContextKey(
        "terminalShellIntegrationEnabled" ,
        false,
        ( localizeWithPath(
            _moduleId,
            15,
            "Whether shell integration is enabled in the active terminal"
        ))
    )));
    TerminalContextKeys.shouldShowViewInlineActions = ( (ContextKeyExpr.and(
         (ContextKeyExpr.equals('view', TERMINAL_VIEW_ID)),
         (ContextKeyExpr.notEquals(
            `config.${"terminal.integrated.tabs.hideCondition" }`,
            'never'
        )),
         (ContextKeyExpr.or(
            ContextKeyExpr.not(`config.${"terminal.integrated.tabs.enabled" }`),
             (ContextKeyExpr.and( (ContextKeyExpr.equals(
                `config.${"terminal.integrated.tabs.showActions" }`,
                'singleTerminal'
            )),  (ContextKeyExpr.equals("terminalGroupCount", 1)))),
             (ContextKeyExpr.and( (ContextKeyExpr.equals(
                `config.${"terminal.integrated.tabs.showActions" }`,
                'singleTerminalOrNarrow'
            )),  (ContextKeyExpr.or(
                 (ContextKeyExpr.equals("terminalGroupCount", 1)),
                 (ContextKeyExpr.has("isTerminalTabsNarrow" ))
            )))),
             (ContextKeyExpr.and( (ContextKeyExpr.equals(
                `config.${"terminal.integrated.tabs.showActions" }`,
                'singleGroup'
            )),  (ContextKeyExpr.equals("terminalGroupCount", 1)))),
             (ContextKeyExpr.equals(
                `config.${"terminal.integrated.tabs.showActions" }`,
                'always'
            ))
        ))
    )));
})(TerminalContextKeys || (TerminalContextKeys = {}))));
export { TerminalContextKeys };
