import { EditorInput } from '../../../common/editor/editorInput.js';
import { localizeWithPath } from '../../../../nls.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';
const _moduleId = "vs/workbench/contrib/debug/common/disassemblyViewInput";
const DisassemblyEditorIcon = registerIcon('disassembly-editor-label-icon', Codicon.debug, ( localizeWithPath(_moduleId, 0, 'Icon of the disassembly editor label.')));
class DisassemblyViewInput extends EditorInput {
    constructor() {
        super(...arguments);
        this.resource = undefined;
    }
    static { this.ID = 'debug.disassemblyView.input'; }
    get typeId() {
        return DisassemblyViewInput.ID;
    }
    static get instance() {
        if (!DisassemblyViewInput._instance || DisassemblyViewInput._instance.isDisposed()) {
            DisassemblyViewInput._instance = ( (new DisassemblyViewInput()));
        }
        return DisassemblyViewInput._instance;
    }
    getName() {
        return ( localizeWithPath(_moduleId, 1, "Disassembly"));
    }
    getIcon() {
        return DisassemblyEditorIcon;
    }
    matches(other) {
        return other instanceof DisassemblyViewInput;
    }
}
export { DisassemblyViewInput };
