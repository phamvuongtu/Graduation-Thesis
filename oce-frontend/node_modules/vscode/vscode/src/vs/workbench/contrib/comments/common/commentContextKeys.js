import { localizeWithPath } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';
const _moduleId = "vs/workbench/contrib/comments/common/commentContextKeys";
var CommentContextKeys;
( ((function(CommentContextKeys) {
    CommentContextKeys.activeCursorHasCommentingRange = ( (new RawContextKey('activeCursorHasCommentingRange', false, {
        description: ( localizeWithPath(
         _moduleId,
         0,
         "Whether the position at the active cursor has a commenting range"
        )),
        type: 'boolean'
    })));
    CommentContextKeys.activeEditorHasCommentingRange = ( (new RawContextKey('activeEditorHasCommentingRange', false, {
        description: ( localizeWithPath(_moduleId, 1, "Whether the active editor has a commenting range")),
        type: 'boolean'
    })));
    CommentContextKeys.WorkspaceHasCommenting = ( (new RawContextKey('workspaceHasCommenting', false, {
        description: ( localizeWithPath(
         _moduleId,
         2,
         "Whether the open workspace has either comments or commenting ranges."
        )),
        type: 'boolean'
    })));
    CommentContextKeys.commentThreadIsEmpty = ( (new RawContextKey(
     'commentThreadIsEmpty',
     false,
     { type: 'boolean', description: ( localizeWithPath(_moduleId, 3, "Set when the comment thread has no comments")) }
    )));
    CommentContextKeys.commentIsEmpty = ( (new RawContextKey('commentIsEmpty', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 4, "Set when the comment has no input")) })));
    CommentContextKeys.commentContext = ( (new RawContextKey('comment', undefined, { type: 'string', description: ( localizeWithPath(_moduleId, 5, "The context value of the comment")) })));
    CommentContextKeys.commentThreadContext = ( (new RawContextKey('commentThread', undefined, { type: 'string', description: ( localizeWithPath(_moduleId, 6, "The context value of the comment thread")) })));
    CommentContextKeys.commentControllerContext = ( (new RawContextKey(
     'commentController',
     undefined,
     { type: 'string', description: ( localizeWithPath(_moduleId, 7, "The comment controller id associated with a comment thread")) }
    )));
    CommentContextKeys.commentFocused = ( (new RawContextKey('commentFocused', false, { type: 'boolean', description: ( localizeWithPath(_moduleId, 8, "Set when the comment is focused")) })));
})(CommentContextKeys || (CommentContextKeys = {}))));
export { CommentContextKeys };
