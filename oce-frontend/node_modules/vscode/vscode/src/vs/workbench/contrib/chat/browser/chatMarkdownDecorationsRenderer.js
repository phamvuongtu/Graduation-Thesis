import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { $ } from '../../../../base/browser/dom.js';
import { toErrorMessage } from '../../../../base/common/errorMessage.js';
import { DisposableStore } from '../../../../base/common/lifecycle.js';
import { revive } from '../../../../base/common/marshalling.js';
import { URI } from '../../../../base/common/uri.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.service.js';
import { ILabelService } from '../../../../platform/label/common/label.service.js';
import { ILogService } from '../../../../platform/log/common/log.service.js';
import { ChatAgentHover } from './chatAgentHover.js';
import { IChatAgentService } from '../common/chatAgents.service.js';
import { ChatRequestTextPart, ChatRequestAgentPart, ChatRequestDynamicVariablePart } from '../common/chatParserTypes.js';
import { contentRefUrl } from '../common/annotations.js';
import { IHoverService } from '../../../../platform/hover/browser/hover.service.js';
import { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';
const variableRefUrl = 'http://_vscodedecoration_';
const agentRefUrl = 'http://_chatagent_';
let ChatMarkdownDecorationsRenderer = class ChatMarkdownDecorationsRenderer {
    constructor(keybindingService, labelService, logService, chatAgentService, instantiationService, hoverService) {
        this.keybindingService = keybindingService;
        this.labelService = labelService;
        this.logService = logService;
        this.chatAgentService = chatAgentService;
        this.instantiationService = instantiationService;
        this.hoverService = hoverService;
    }
    convertParsedRequestToMarkdown(parsedRequest) {
        let result = '';
        for (const part of parsedRequest.parts) {
            if (part instanceof ChatRequestTextPart) {
                result += part.text;
            }
            else if (part instanceof ChatRequestAgentPart) {
                let text = part.text;
                const isDupe = this.chatAgentService.getAgentsByName(part.agent.name).length > 1;
                if (isDupe) {
                    text += ` (${part.agent.extensionPublisherDisplayName})`;
                }
                result += `[${text}](${agentRefUrl}?${encodeURIComponent(part.agent.id)})`;
            }
            else {
                const uri = part instanceof ChatRequestDynamicVariablePart && ( part.data.map(d => d.value)).find((d) => d instanceof URI)
                    || undefined;
                const title = uri ? encodeURIComponent(this.labelService.getUriLabel(uri, { relative: true })) :
                    part instanceof ChatRequestAgentPart ? part.agent.id :
                        '';
                const text = part.text;
                result += `[${text}](${variableRefUrl}?${title})`;
            }
        }
        return result;
    }
    walkTreeAndAnnotateReferenceLinks(element) {
        const store = ( new DisposableStore());
        element.querySelectorAll('a').forEach(a => {
            const href = a.getAttribute('data-href');
            if (href) {
                if (href.startsWith(agentRefUrl)) {
                    const title = decodeURIComponent(href.slice(agentRefUrl.length + 1));
                    a.parentElement.replaceChild(this.renderAgentWidget(a.textContent, title, store), a);
                }
                else if (href.startsWith(variableRefUrl)) {
                    const title = decodeURIComponent(href.slice(variableRefUrl.length + 1));
                    a.parentElement.replaceChild(this.renderResourceWidget(a.textContent, title), a);
                }
                else if (href.startsWith(contentRefUrl)) {
                    this.renderFileWidget(href, a);
                }
                else if (href.startsWith('command:')) {
                    this.injectKeybindingHint(a, href, this.keybindingService);
                }
            }
        });
        return store;
    }
    renderAgentWidget(name, id, store) {
        const container = $('span.chat-resource-widget', undefined, $('span', undefined, name));
        store.add(this.hoverService.setupUpdatableHover(getDefaultHoverDelegate('element'), container, () => {
            const hover = store.add(this.instantiationService.createInstance(ChatAgentHover));
            hover.setAgent(id);
            return hover.domNode;
        }));
        return container;
    }
    renderFileWidget(href, a) {
        const fullUri = ( URI.parse(href));
        let location;
        try {
            location = revive(JSON.parse(fullUri.fragment));
        }
        catch (err) {
            this.logService.error('Invalid chat widget render data JSON', toErrorMessage(err));
            return;
        }
        if (!location.uri || !URI.isUri(location.uri)) {
            this.logService.error(`Invalid chat widget render data: ${fullUri.fragment}`);
            return;
        }
        const fragment = location.range ? `${location.range.startLineNumber}-${location.range.endLineNumber}` : '';
        a.setAttribute('data-href', ( location.uri.with({ fragment }).toString()));
        const label = this.labelService.getUriLabel(location.uri, { relative: true });
        a.title = location.range ?
            `${label}#${location.range.startLineNumber}-${location.range.endLineNumber}` :
            label;
    }
    renderResourceWidget(name, title) {
        const container = $('span.chat-resource-widget');
        const alias = $('span', undefined, name);
        alias.title = title;
        container.appendChild(alias);
        return container;
    }
    injectKeybindingHint(a, href, keybindingService) {
        const command = href.match(/command:([^\)]+)/)?.[1];
        if (command) {
            const kb = keybindingService.lookupKeybinding(command);
            if (kb) {
                const keybinding = kb.getLabel();
                if (keybinding) {
                    a.textContent = `${a.textContent} (${keybinding})`;
                }
            }
        }
    }
};
ChatMarkdownDecorationsRenderer = ( __decorate([
    ( __param(0, IKeybindingService)),
    ( __param(1, ILabelService)),
    ( __param(2, ILogService)),
    ( __param(3, IChatAgentService)),
    ( __param(4, IInstantiationService)),
    ( __param(5, IHoverService))
], ChatMarkdownDecorationsRenderer));
export { ChatMarkdownDecorationsRenderer };
