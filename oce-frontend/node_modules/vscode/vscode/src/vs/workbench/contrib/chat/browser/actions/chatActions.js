import { Codicon } from '../../../../../base/common/codicons.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { ThemeIcon } from '../../../../../base/common/themables.js';
import { EditorAction2 } from '../../../../../editor/browser/editorExtensions.js';
import { ICodeEditorService } from '../../../../../editor/browser/services/codeEditorService.js';
import { localize2WithPath, localizeWithPath } from '../../../../../nls.js';
import { registerAction2, Action2, MenuId } from '../../../../../platform/actions/common/actions.js';
import { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';
import { IsWindowsContext, IsLinuxContext } from '../../../../../platform/contextkey/common/contextkeys.js';
import { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.service.js';
import { Registry } from '../../../../../platform/registry/common/platform.js';
import { ViewAction } from '../../../../browser/parts/views/viewPane.js';
import { Extensions } from '../../../../common/contributions.js';
import { AccessibilityHelpAction } from '../../../accessibility/browser/accessibleViewActions.js';
import { runAccessibilityHelpAction } from './chatAccessibilityHelp.js';
import { showChatView, CHAT_VIEW_ID } from '../chat.js';
import { IChatWidgetService } from '../chat.service.js';
import { ChatEditorInput } from '../chatEditorInput.js';
import { ChatAgentLocation } from '../../common/chatAgents.js';
import { CONTEXT_CHAT_ENABLED, CONTEXT_IN_CHAT_INPUT, CONTEXT_CHAT_LOCATION, CONTEXT_CHAT_INPUT_CURSOR_AT_TOP, CONTEXT_IN_CHAT_SESSION, CONTEXT_RESPONSE, CONTEXT_REQUEST } from '../../common/chatContextKeys.js';
import { IChatService } from '../../common/chatService.service.js';
import { IChatWidgetHistoryService } from '../../common/chatWidgetHistoryService.service.js';
import { IEditorService } from '../../../../services/editor/common/editorService.service.js';
import { IViewsService } from '../../../../services/views/common/viewsService.service.js';
const _moduleId = "vs/workbench/contrib/chat/browser/actions/chatActions";
function isChatViewTitleActionContext(obj) {
    return obj instanceof Object && 'chatView' in obj;
}
const CHAT_CATEGORY = ( localize2WithPath(_moduleId, 0, 'Chat'));
const CHAT_OPEN_ACTION_ID = 'workbench.action.chat.open';
class OpenChatGlobalAction extends Action2 {
    constructor() {
        super({
            id: CHAT_OPEN_ACTION_ID,
            title: ( localize2WithPath(_moduleId, 1, "Open Chat")),
            icon: Codicon.commentDiscussion,
            f1: false,
            category: CHAT_CATEGORY,
            keybinding: {
                weight: 200 ,
                primary: 2048  | 512  | 39 ,
                mac: {
                    primary: 2048  | 256  | 39
                }
            }
        });
    }
    async run(accessor, opts) {
        opts = typeof opts === 'string' ? { query: opts } : opts;
        const chatWidget = await showChatView(accessor.get(IViewsService));
        if (!chatWidget) {
            return;
        }
        if (opts?.query) {
            if (opts.isPartialQuery) {
                chatWidget.setInput(opts.query);
            }
            else {
                chatWidget.acceptInput(opts.query);
            }
        }
        chatWidget.focusInput();
    }
}
class ChatHistoryAction extends ViewAction {
    constructor() {
        super({
            viewId: CHAT_VIEW_ID,
            id: `workbench.action.chat.history`,
            title: ( localize2WithPath(_moduleId, 2, "Show Chats...")),
            menu: {
                id: MenuId.ViewTitle,
                when: ( (ContextKeyExpr.equals('view', CHAT_VIEW_ID))),
                group: 'navigation',
                order: -1
            },
            category: CHAT_CATEGORY,
            icon: Codicon.history,
            f1: true,
            precondition: CONTEXT_CHAT_ENABLED
        });
    }
    async runInView(accessor, view) {
        const chatService = accessor.get(IChatService);
        const quickInputService = accessor.get(IQuickInputService);
        const viewsService = accessor.get(IViewsService);
        const items = chatService.getHistory();
        const picks = ( (items.map(i => ({
            label: i.title,
            chat: i,
            buttons: [{
                    iconClass: ThemeIcon.asClassName(Codicon.x),
                    tooltip: ( localizeWithPath(_moduleId, 3, "Delete")),
                }]
        }))));
        const selection = await quickInputService.pick(picks, {
            placeHolder: ( localizeWithPath(_moduleId, 4, "Switch to chat")),
            onDidTriggerItemButton: context => {
                chatService.removeHistoryEntry(context.item.chat.sessionId);
                context.removeItem();
            }
        });
        if (selection) {
            const sessionId = selection.chat.sessionId;
            const view = await viewsService.openView(CHAT_VIEW_ID);
            view.loadSession(sessionId);
        }
    }
}
class OpenChatEditorAction extends Action2 {
    constructor() {
        super({
            id: `workbench.action.openChat`,
            title: ( localize2WithPath(_moduleId, 5, "Open Editor")),
            f1: true,
            category: CHAT_CATEGORY,
            precondition: CONTEXT_CHAT_ENABLED
        });
    }
    async run(accessor) {
        const editorService = accessor.get(IEditorService);
        await editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options: { pinned: true } });
    }
}
function registerChatActions() {
    registerAction2(OpenChatGlobalAction);
    registerAction2(ChatHistoryAction);
    registerAction2(OpenChatEditorAction);
    registerAction2(class ClearChatInputHistoryAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.clearInputHistory',
                title: ( localize2WithPath(_moduleId, 6, "Clear Input History")),
                precondition: CONTEXT_CHAT_ENABLED,
                category: CHAT_CATEGORY,
                f1: true,
            });
        }
        async run(accessor, ...args) {
            const historyService = accessor.get(IChatWidgetHistoryService);
            historyService.clearHistory();
        }
    });
    registerAction2(class ClearChatHistoryAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.clearHistory',
                title: ( localize2WithPath(_moduleId, 7, "Clear All Workspace Chats")),
                precondition: CONTEXT_CHAT_ENABLED,
                category: CHAT_CATEGORY,
                f1: true,
            });
        }
        async run(accessor, ...args) {
            const chatService = accessor.get(IChatService);
            chatService.clearAllHistoryEntries();
        }
    });
    registerAction2(class FocusChatAction extends EditorAction2 {
        constructor() {
            super({
                id: 'chat.action.focus',
                title: ( localize2WithPath(_moduleId, 8, 'Focus Chat List')),
                precondition: ( (ContextKeyExpr.and(
                    CONTEXT_IN_CHAT_INPUT,
                     (CONTEXT_CHAT_LOCATION.isEqualTo(ChatAgentLocation.Panel))
                ))),
                category: CHAT_CATEGORY,
                keybinding: [
                    {
                        when: CONTEXT_CHAT_INPUT_CURSOR_AT_TOP,
                        primary: 2048  | 16 ,
                        weight: 100 ,
                    },
                    {
                        when: ( (ContextKeyExpr.or(IsWindowsContext, IsLinuxContext))),
                        primary: 2048  | 16 ,
                        weight: 100 ,
                    }
                ]
            });
        }
        runEditorCommand(accessor, editor) {
            const editorUri = editor.getModel()?.uri;
            if (editorUri) {
                const widgetService = accessor.get(IChatWidgetService);
                widgetService.getWidgetByInputUri(editorUri)?.focusLastMessage();
            }
        }
    });
    class ChatAccessibilityHelpContribution extends Disposable {
        constructor() {
            super();
            this._register(AccessibilityHelpAction.addImplementation(105, 'panelChat', async (accessor) => {
                const codeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor() || accessor.get(ICodeEditorService).getFocusedCodeEditor();
                runAccessibilityHelpAction(accessor, codeEditor ?? undefined, 'panelChat');
            }, ( (ContextKeyExpr.or(CONTEXT_IN_CHAT_SESSION, CONTEXT_RESPONSE, CONTEXT_REQUEST)))));
        }
    }
    const workbenchRegistry = ( (Registry.as(Extensions.Workbench)));
    workbenchRegistry.registerWorkbenchContribution(ChatAccessibilityHelpContribution, 4 );
    registerAction2(class FocusChatInputAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.focusInput',
                title: ( localize2WithPath(_moduleId, 9, "Focus Chat Input")),
                f1: false,
                keybinding: {
                    primary: 2048  | 18 ,
                    weight: 200 ,
                    when: ( (ContextKeyExpr.and(CONTEXT_IN_CHAT_SESSION,  (CONTEXT_IN_CHAT_INPUT.negate()))))
                }
            });
        }
        run(accessor, ...args) {
            const widgetService = accessor.get(IChatWidgetService);
            widgetService.lastFocusedWidget?.focusInput();
        }
    });
}
export { CHAT_CATEGORY, CHAT_OPEN_ACTION_ID, isChatViewTitleActionContext, registerChatActions };
