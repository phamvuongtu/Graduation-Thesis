import { IDisposable } from '../../../../base/common/lifecycle.js';
import { Event } from '../../../../base/common/event.js';
import { IView } from '../../../../base/browser/ui/grid/grid.js';
import { IStatusbarEntry, StatusbarAlignment, IStatusbarEntryPriority, IStatusbarEntryAccessor, IStatusbarEntryLocation, IStatusbarStyleOverride } from '../../../services/statusbar/browser/statusbar.js';

interface IStatusbarEntryContainer extends IDisposable {
    /**
     * An event that is triggered when an entry's visibility is changed.
     */
    readonly onDidChangeEntryVisibility: Event<{
        id: string;
        visible: boolean;
    }>;
    /**
     * Adds an entry to the statusbar with the given alignment and priority. Use the returned accessor
     * to update or remove the statusbar entry.
     *
     * @param id identifier of the entry is needed to allow users to hide entries via settings
     * @param alignment either LEFT or RIGHT side in the status bar
     * @param priority items get arranged from highest priority to lowest priority from left to right
     * in their respective alignment slot
     */
    addEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority?: number | IStatusbarEntryPriority): IStatusbarEntryAccessor;
    addEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority?: number | IStatusbarEntryPriority | IStatusbarEntryLocation): IStatusbarEntryAccessor;
    /**
     * Adds an entry to the statusbar with the given alignment relative to another entry. Use the returned
     * accessor to update or remove the statusbar entry.
     *
     * @param id identifier of the entry is needed to allow users to hide entries via settings
     * @param alignment either LEFT or RIGHT side in the status bar
     * @param location a reference to another entry to position relative to
     */
    addEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, location?: IStatusbarEntryLocation): IStatusbarEntryAccessor;
    /**
     * Return if an entry is visible or not.
     */
    isEntryVisible(id: string): boolean;
    /**
     * Allows to update an entry's visibility with the provided ID.
     */
    updateEntryVisibility(id: string, visible: boolean): void;
    /**
     * Focused the status bar. If one of the status bar entries was focused, focuses it directly.
     */
    focus(preserveEntryFocus?: boolean): void;
    /**
     * Focuses the next status bar entry. If none focused, focuses the first.
     */
    focusNextEntry(): void;
    /**
     * Focuses the previous status bar entry. If none focused, focuses the last.
     */
    focusPreviousEntry(): void;
    /**
     *	Returns true if a status bar entry is focused.
     */
    isEntryFocused(): boolean;
    /**
     * Temporarily override statusbar style.
     */
    overrideStyle(style: IStatusbarStyleOverride): IDisposable;
}
interface IAuxiliaryStatusbarPart extends IStatusbarEntryContainer, IView {
    readonly container: HTMLElement;
    readonly height: number;
}

export type { IAuxiliaryStatusbarPart, IStatusbarEntryContainer };
