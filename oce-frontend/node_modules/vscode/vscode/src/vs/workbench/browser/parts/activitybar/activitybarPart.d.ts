import { Part } from '../../part.js';
import { Parts } from '../../../services/layout/browser/layoutService.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.service.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IThemeService } from '../../../../platform/theme/common/themeService.service.js';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration.service.js';
import { IAction } from '../../../../base/common/actions.js';
import { IPaneCompositePart } from '../paneCompositePart.js';
import { PaneCompositeBar, IPaneCompositeBarOptions } from '../paneCompositeBar.js';
import { IStorageService } from '../../../../platform/storage/common/storage.service.js';
import { IMenuService } from '../../../../platform/actions/common/actions.service.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.service.js';
import { IViewDescriptorService } from '../../../common/views.service.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.service.js';
import { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.service.js';

declare class ActivitybarPart extends Part {
    private readonly paneCompositePart;
    private readonly instantiationService;
    static readonly ACTION_HEIGHT = 48;
    static readonly pinnedViewContainersKey = "workbench.activity.pinnedViewlets2";
    static readonly placeholderViewContainersKey = "workbench.activity.placeholderViewlets";
    static readonly viewContainersWorkspaceStateKey = "workbench.activity.viewletsWorkspaceState";
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    private readonly compositeBar;
    private content;
    constructor(paneCompositePart: IPaneCompositePart, instantiationService: IInstantiationService, layoutService: IWorkbenchLayoutService, themeService: IThemeService, storageService: IStorageService);
    private createCompositeBar;
    protected createContentArea(parent: HTMLElement): HTMLElement;
    getPinnedPaneCompositeIds(): string[];
    getVisiblePaneCompositeIds(): string[];
    focus(): void;
    updateStyles(): void;
    show(focus?: boolean): void;
    hide(): void;
    layout(width: number, height: number): void;
    toJSON(): object;
}
declare class ActivityBarCompositeBar extends PaneCompositeBar {
    private readonly configurationService;
    private readonly menuService;
    private element;
    private menuBar;
    private menuBarContainer;
    private compositeBarContainer;
    private readonly globalCompositeBar;
    private readonly keyboardNavigationDisposables;
    constructor(options: IPaneCompositeBarOptions, part: Parts, paneCompositePart: IPaneCompositePart, showGlobalActivities: boolean, instantiationService: IInstantiationService, storageService: IStorageService, extensionService: IExtensionService, viewDescriptorService: IViewDescriptorService, contextKeyService: IContextKeyService, environmentService: IWorkbenchEnvironmentService, configurationService: IConfigurationService, menuService: IMenuService, layoutService: IWorkbenchLayoutService);
    private fillContextMenuActions;
    private uninstallMenubar;
    private installMenubar;
    private registerKeyboardNavigationListeners;
    create(parent: HTMLElement): HTMLElement;
    layout(width: number, height: number): void;
    getActivityBarContextMenuActions(): IAction[];
}

export { ActivityBarCompositeBar, ActivitybarPart };
