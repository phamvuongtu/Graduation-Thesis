let isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);
function _format(message, args) {
    let result;
    if (args.length === 0) {
        result = message;
    }
    else {
        result = message.replace(/\{(\d+)\}/g, (match, rest) => {
            const index = rest[0];
            const arg = args[index];
            let result = match;
            if (typeof arg === 'string') {
                result = arg;
            }
            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {
                result = String(arg);
            }
            return result;
        });
    }
    if (isPseudo) {
        result = '\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\uFF3D';
    }
    return result;
}
let initialized = false;
let locale = undefined;
let translations = {};
function isInitialized() {
    return initialized;
}
function setLocale(_locale, _translations) {
    initialized = true;
    locale = _locale;
    translations = _translations;
}
function localizeWithPath(path, data, defaultMessage, ...args) {
    initialized = true;
    const key = typeof data === 'object' ? data.key : data;
    const message = (translations[path] ?? {})[key] ?? defaultMessage;
    return _format(message, args);
}
function localize2WithPath(path, data, defaultMessage, ...args) {
    initialized = true;
    const key = typeof data === 'object' ? data.key : data;
    const message = (translations[path] ?? {})[key] ?? defaultMessage;
    return {
        value: _format(message, args),
        original: _format(defaultMessage, args)
    };
}
function getConfiguredDefaultLocale(_) {
    return locale;
}
export { getConfiguredDefaultLocale, isInitialized, localize2WithPath, localizeWithPath, setLocale };
