{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignatureHelpFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass SignatureHelpFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.SignatureHelpRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    let config = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'signatureHelp');\n    config.dynamicRegistration = true;\n    config.signatureInformation = {\n      documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText]\n    };\n    config.signatureInformation.parameterInformation = {\n      labelOffsetSupport: true\n    };\n    config.signatureInformation.activeParameterSupport = true;\n    config.contextSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.signatureHelpProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const provider = {\n      provideSignatureHelp: (document, position, token, context) => {\n        const client = this._client;\n        const providerSignatureHelp = (document, position, context, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, client.code2ProtocolConverter.asSignatureHelpParams(document, position, context), token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asSignatureHelp(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideSignatureHelp ? middleware.provideSignatureHelp(document, position, context, token, providerSignatureHelp) : providerSignatureHelp(document, position, context, token);\n      }\n    };\n    return [this.registerProvider(options, provider), provider];\n  }\n  registerProvider(options, provider) {\n    const selector = this._client.protocol2CodeConverter.asDocumentSelector(options.documentSelector);\n    if (options.retriggerCharacters === undefined) {\n      const triggerCharacters = options.triggerCharacters || [];\n      return vscode_1.languages.registerSignatureHelpProvider(selector, provider, ...triggerCharacters);\n    } else {\n      const metaData = {\n        triggerCharacters: options.triggerCharacters || [],\n        retriggerCharacters: options.retriggerCharacters || []\n      };\n      return vscode_1.languages.registerSignatureHelpProvider(selector, provider, metaData);\n    }\n  }\n}\nexports.SignatureHelpFeature = SignatureHelpFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","SignatureHelpFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","UUID","TextDocumentLanguageFeature","constructor","client","SignatureHelpRequest","type","fillClientCapabilities","capabilities","config","ensure","dynamicRegistration","signatureInformation","documentationFormat","MarkupKind","Markdown","PlainText","parameterInformation","labelOffsetSupport","activeParameterSupport","contextSupport","initialize","documentSelector","options","getRegistrationOptions","signatureHelpProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","provider","provideSignatureHelp","document","position","token","context","_client","providerSignatureHelp","sendRequest","code2ProtocolConverter","asSignatureHelpParams","then","result","isCancellationRequested","protocol2CodeConverter","asSignatureHelp","error","handleFailedRequest","middleware","registerProvider","selector","asDocumentSelector","retriggerCharacters","undefined","triggerCharacters","languages","registerSignatureHelpProvider","metaData"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/signatureHelp.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureHelpFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass SignatureHelpFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.SignatureHelpRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        let config = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'signatureHelp');\n        config.dynamicRegistration = true;\n        config.signatureInformation = { documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText] };\n        config.signatureInformation.parameterInformation = { labelOffsetSupport: true };\n        config.signatureInformation.activeParameterSupport = true;\n        config.contextSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.signatureHelpProvider);\n        if (!options) {\n            return;\n        }\n        this.register({\n            id: UUID.generateUuid(),\n            registerOptions: options\n        });\n    }\n    registerLanguageProvider(options) {\n        const provider = {\n            provideSignatureHelp: (document, position, token, context) => {\n                const client = this._client;\n                const providerSignatureHelp = (document, position, context, token) => {\n                    return client.sendRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, client.code2ProtocolConverter.asSignatureHelpParams(document, position, context), token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asSignatureHelp(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideSignatureHelp\n                    ? middleware.provideSignatureHelp(document, position, context, token, providerSignatureHelp)\n                    : providerSignatureHelp(document, position, context, token);\n            }\n        };\n        return [this.registerProvider(options, provider), provider];\n    }\n    registerProvider(options, provider) {\n        const selector = this._client.protocol2CodeConverter.asDocumentSelector(options.documentSelector);\n        if (options.retriggerCharacters === undefined) {\n            const triggerCharacters = options.triggerCharacters || [];\n            return vscode_1.languages.registerSignatureHelpProvider(selector, provider, ...triggerCharacters);\n        }\n        else {\n            const metaData = {\n                triggerCharacters: options.triggerCharacters || [],\n                retriggerCharacters: options.retriggerCharacters || []\n            };\n            return vscode_1.languages.registerSignatureHelpProvider(selector, provider, metaData);\n        }\n    }\n}\nexports.SignatureHelpFeature = SignatureHelpFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}