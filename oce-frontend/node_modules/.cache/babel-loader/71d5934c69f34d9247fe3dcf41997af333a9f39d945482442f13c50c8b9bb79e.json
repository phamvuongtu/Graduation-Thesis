{"ast":null,"code":"import { cloneAndChange } from '../../../base/common/objects.js';\nimport { getRemoteName } from '../../remote/common/remoteHosts.js';\nimport '../../../base/common/platform.js';\nimport '../../../base/common/process.js';\nimport { TELEMETRY_SETTING_ID, TELEMETRY_CRASH_REPORTER_SETTING_ID, TELEMETRY_OLD_SETTING_ID } from './telemetry.js';\nclass TelemetryTrustedValue {\n  constructor(value) {\n    this.value = value;\n    this.isTrustedTelemetryValue = true;\n  }\n}\nclass NullEndpointTelemetryService {\n  async publicLog(_endpoint, _eventName, _data) {}\n  async publicLogError(_endpoint, _errorEventName, _data) {}\n}\nconst telemetryLogId = 'telemetry';\nconst extensionTelemetryLogChannelId = 'extensionTelemetryLog';\nfunction supportsTelemetry(productService, environmentService) {\n  if (!environmentService.isBuilt && !environmentService.disableTelemetry) {\n    return true;\n  }\n  return !(environmentService.disableTelemetry || !productService.enableTelemetry);\n}\nfunction isLoggingOnly(productService, environmentService) {\n  if (environmentService.extensionTestsLocationURI) {\n    return true;\n  }\n  if (environmentService.isBuilt) {\n    return false;\n  }\n  if (environmentService.disableTelemetry) {\n    return false;\n  }\n  if (productService.enableTelemetry && productService.aiConfig?.ariaKey) {\n    return false;\n  }\n  return true;\n}\nfunction getTelemetryLevel(configurationService) {\n  const newConfig = configurationService.getValue(TELEMETRY_SETTING_ID);\n  const crashReporterConfig = configurationService.getValue(TELEMETRY_CRASH_REPORTER_SETTING_ID);\n  const oldConfig = configurationService.getValue(TELEMETRY_OLD_SETTING_ID);\n  if (oldConfig === false || crashReporterConfig === false) {\n    return 0;\n  }\n  switch (newConfig ?? \"all\") {\n    case \"all\":\n      return 3;\n    case \"error\":\n      return 2;\n    case \"crash\":\n      return 1;\n    case \"off\":\n      return 0;\n  }\n}\nconst telemetryAllowedAuthorities = new Set(['ssh-remote', 'dev-container', 'attached-container', 'wsl', 'tunnel', 'codespaces', 'amlext']);\nfunction cleanRemoteAuthority(remoteAuthority) {\n  if (!remoteAuthority) {\n    return 'none';\n  }\n  const remoteName = getRemoteName(remoteAuthority);\n  return telemetryAllowedAuthorities.has(remoteName) ? remoteName : 'other';\n}\nfunction anonymizeFilePaths(stack, cleanupPatterns) {\n  if (!stack || !stack.includes('/') && !stack.includes('\\\\')) {\n    return stack;\n  }\n  let updatedStack = stack;\n  const cleanUpIndexes = [];\n  for (const regexp of cleanupPatterns) {\n    while (true) {\n      const result = regexp.exec(stack);\n      if (!result) {\n        break;\n      }\n      cleanUpIndexes.push([result.index, regexp.lastIndex]);\n    }\n  }\n  const nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n  const fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n  let lastIndex = 0;\n  updatedStack = '';\n  while (true) {\n    const result = fileRegex.exec(stack);\n    if (!result) {\n      break;\n    }\n    const overlappingRange = cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex);\n    if (!nodeModulesRegex.test(result[0]) && !overlappingRange) {\n      updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n      lastIndex = fileRegex.lastIndex;\n    }\n  }\n  if (lastIndex < stack.length) {\n    updatedStack += stack.substr(lastIndex);\n  }\n  return updatedStack;\n}\nfunction removePropertiesWithPossibleUserInfo(property) {\n  if (!property) {\n    return property;\n  }\n  const userDataRegexes = [{\n    label: 'Google API Key',\n    regex: /AIza[A-Za-z0-9_\\\\\\-]{35}/\n  }, {\n    label: 'Slack Token',\n    regex: /xox[pbar]\\-[A-Za-z0-9]/\n  }, {\n    label: 'GitHub Token',\n    regex: /(gh[psuro]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})/\n  }, {\n    label: 'Generic Secret',\n    regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i\n  }, {\n    label: 'CLI Credentials',\n    regex: /((login|psexec|(certutil|psexec)\\.exe).{1,50}(\\s-u(ser(name)?)?\\s+.{3,100})?\\s-(admin|user|vm|root)?p(ass(word)?)?\\s+[\"']?[^$\\-\\/\\s]|(^|[\\s\\r\\n\\\\])net(\\.exe)?.{1,5}(user\\s+|share\\s+\\/user:| user -? secrets ? set) \\s + [^ $\\s \\/])/\n  }, {\n    label: 'Email',\n    regex: /@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+/\n  }];\n  for (const secretRegex of userDataRegexes) {\n    if (secretRegex.regex.test(property)) {\n      return `<REDACTED: ${secretRegex.label}>`;\n    }\n  }\n  return property;\n}\nfunction cleanData(data, cleanUpPatterns) {\n  return cloneAndChange(data, value => {\n    if (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, 'isTrustedTelemetryValue')) {\n      return value.value;\n    }\n    if (typeof value === 'string') {\n      let updatedProperty = value.replaceAll('%20', ' ');\n      updatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);\n      for (const regexp of cleanUpPatterns) {\n        updatedProperty = updatedProperty.replace(regexp, '');\n      }\n      updatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);\n      return updatedProperty;\n    }\n    return undefined;\n  });\n}\nexport { NullEndpointTelemetryService, TelemetryTrustedValue, cleanData, cleanRemoteAuthority, extensionTelemetryLogChannelId, getTelemetryLevel, isLoggingOnly, supportsTelemetry, telemetryLogId };","map":{"version":3,"names":["cloneAndChange","getRemoteName","TELEMETRY_SETTING_ID","TELEMETRY_CRASH_REPORTER_SETTING_ID","TELEMETRY_OLD_SETTING_ID","TelemetryTrustedValue","constructor","value","isTrustedTelemetryValue","NullEndpointTelemetryService","publicLog","_endpoint","_eventName","_data","publicLogError","_errorEventName","telemetryLogId","extensionTelemetryLogChannelId","supportsTelemetry","productService","environmentService","isBuilt","disableTelemetry","enableTelemetry","isLoggingOnly","extensionTestsLocationURI","aiConfig","ariaKey","getTelemetryLevel","configurationService","newConfig","getValue","crashReporterConfig","oldConfig","telemetryAllowedAuthorities","Set","cleanRemoteAuthority","remoteAuthority","remoteName","has","anonymizeFilePaths","stack","cleanupPatterns","includes","updatedStack","cleanUpIndexes","regexp","result","exec","push","index","lastIndex","nodeModulesRegex","fileRegex","overlappingRange","some","start","end","test","substring","length","substr","removePropertiesWithPossibleUserInfo","property","userDataRegexes","label","regex","secretRegex","cleanData","data","cleanUpPatterns","Object","hasOwnProperty","call","updatedProperty","replaceAll","replace","undefined"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js"],"sourcesContent":["import { cloneAndChange } from '../../../base/common/objects.js';\nimport { getRemoteName } from '../../remote/common/remoteHosts.js';\nimport '../../../base/common/platform.js';\nimport '../../../base/common/process.js';\nimport { TELEMETRY_SETTING_ID, TELEMETRY_CRASH_REPORTER_SETTING_ID, TELEMETRY_OLD_SETTING_ID } from './telemetry.js';\nclass TelemetryTrustedValue {\n    constructor(value) {\n        this.value = value;\n        this.isTrustedTelemetryValue = true;\n    }\n}\nclass NullEndpointTelemetryService {\n    async publicLog(_endpoint, _eventName, _data) {\n    }\n    async publicLogError(_endpoint, _errorEventName, _data) {\n    }\n}\nconst telemetryLogId = 'telemetry';\nconst extensionTelemetryLogChannelId = 'extensionTelemetryLog';\nfunction supportsTelemetry(productService, environmentService) {\n    if (!environmentService.isBuilt && !environmentService.disableTelemetry) {\n        return true;\n    }\n    return !(environmentService.disableTelemetry || !productService.enableTelemetry);\n}\nfunction isLoggingOnly(productService, environmentService) {\n    if (environmentService.extensionTestsLocationURI) {\n        return true;\n    }\n    if (environmentService.isBuilt) {\n        return false;\n    }\n    if (environmentService.disableTelemetry) {\n        return false;\n    }\n    if (productService.enableTelemetry && productService.aiConfig?.ariaKey) {\n        return false;\n    }\n    return true;\n}\nfunction getTelemetryLevel(configurationService) {\n    const newConfig = configurationService.getValue(TELEMETRY_SETTING_ID);\n    const crashReporterConfig = configurationService.getValue(TELEMETRY_CRASH_REPORTER_SETTING_ID);\n    const oldConfig = configurationService.getValue(TELEMETRY_OLD_SETTING_ID);\n    if (oldConfig === false || crashReporterConfig === false) {\n        return 0 ;\n    }\n    switch (newConfig ?? \"all\" ) {\n        case \"all\" :\n            return 3 ;\n        case \"error\" :\n            return 2 ;\n        case \"crash\" :\n            return 1 ;\n        case \"off\" :\n            return 0 ;\n    }\n}\nconst telemetryAllowedAuthorities = ( new Set(\n    ['ssh-remote', 'dev-container', 'attached-container', 'wsl', 'tunnel', 'codespaces', 'amlext']\n));\nfunction cleanRemoteAuthority(remoteAuthority) {\n    if (!remoteAuthority) {\n        return 'none';\n    }\n    const remoteName = getRemoteName(remoteAuthority);\n    return ( telemetryAllowedAuthorities.has(remoteName)) ? remoteName : 'other';\n}\nfunction anonymizeFilePaths(stack, cleanupPatterns) {\n    if (!stack || (!stack.includes('/') && !stack.includes('\\\\'))) {\n        return stack;\n    }\n    let updatedStack = stack;\n    const cleanUpIndexes = [];\n    for (const regexp of cleanupPatterns) {\n        while (true) {\n            const result = regexp.exec(stack);\n            if (!result) {\n                break;\n            }\n            cleanUpIndexes.push([result.index, regexp.lastIndex]);\n        }\n    }\n    const nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n    const fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n    let lastIndex = 0;\n    updatedStack = '';\n    while (true) {\n        const result = fileRegex.exec(stack);\n        if (!result) {\n            break;\n        }\n        const overlappingRange = ( cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex));\n        if (!nodeModulesRegex.test(result[0]) && !overlappingRange) {\n            updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n            lastIndex = fileRegex.lastIndex;\n        }\n    }\n    if (lastIndex < stack.length) {\n        updatedStack += stack.substr(lastIndex);\n    }\n    return updatedStack;\n}\nfunction removePropertiesWithPossibleUserInfo(property) {\n    if (!property) {\n        return property;\n    }\n    const userDataRegexes = [\n        { label: 'Google API Key', regex: /AIza[A-Za-z0-9_\\\\\\-]{35}/ },\n        { label: 'Slack Token', regex: /xox[pbar]\\-[A-Za-z0-9]/ },\n        { label: 'GitHub Token', regex: /(gh[psuro]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})/ },\n        { label: 'Generic Secret', regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },\n        { label: 'CLI Credentials', regex: /((login|psexec|(certutil|psexec)\\.exe).{1,50}(\\s-u(ser(name)?)?\\s+.{3,100})?\\s-(admin|user|vm|root)?p(ass(word)?)?\\s+[\"']?[^$\\-\\/\\s]|(^|[\\s\\r\\n\\\\])net(\\.exe)?.{1,5}(user\\s+|share\\s+\\/user:| user -? secrets ? set) \\s + [^ $\\s \\/])/ },\n        { label: 'Email', regex: /@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+/ }\n    ];\n    for (const secretRegex of userDataRegexes) {\n        if (secretRegex.regex.test(property)) {\n            return `<REDACTED: ${secretRegex.label}>`;\n        }\n    }\n    return property;\n}\nfunction cleanData(data, cleanUpPatterns) {\n    return cloneAndChange(data, value => {\n        if (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, 'isTrustedTelemetryValue')) {\n            return value.value;\n        }\n        if (typeof value === 'string') {\n            let updatedProperty = value.replaceAll('%20', ' ');\n            updatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);\n            for (const regexp of cleanUpPatterns) {\n                updatedProperty = updatedProperty.replace(regexp, '');\n            }\n            updatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);\n            return updatedProperty;\n        }\n        return undefined;\n    });\n}\nexport { NullEndpointTelemetryService, TelemetryTrustedValue, cleanData, cleanRemoteAuthority, extensionTelemetryLogChannelId, getTelemetryLevel, isLoggingOnly, supportsTelemetry, telemetryLogId };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}