{"ast":null,"code":"/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2024 TypeFox and others.\n * Licensed under the MIT License. See LICENSE in the package root for license information.\n * ------------------------------------------------------------------------------------------ */\nimport { BaseLanguageClient } from 'vscode-languageclient/lib/common/client.js';\nexport class MonacoLanguageClient extends BaseLanguageClient {\n  connectionProvider;\n  constructor({\n    id,\n    name,\n    clientOptions,\n    connectionProvider\n  }) {\n    super(id ?? name.toLowerCase(), name, clientOptions);\n    this.connectionProvider = connectionProvider;\n  }\n  createMessageTransports(encoding) {\n    return this.connectionProvider.get(encoding);\n  }\n}","map":{"version":3,"names":["BaseLanguageClient","MonacoLanguageClient","connectionProvider","constructor","id","name","clientOptions","toLowerCase","createMessageTransports","encoding","get"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/monaco-languageclient/src/index.ts"],"sourcesContent":["/* --------------------------------------------------------------------------------------------\n * Copyright (c) 2024 TypeFox and others.\n * Licensed under the MIT License. See LICENSE in the package root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nimport { BaseLanguageClient, MessageTransports, LanguageClientOptions } from 'vscode-languageclient/lib/common/client.js';\n\nexport interface IConnectionProvider {\n    get(encoding: string): Promise<MessageTransports>;\n}\n\nexport type MonacoLanguageClientOptions = {\n    name: string;\n    id?: string;\n    clientOptions: LanguageClientOptions;\n    connectionProvider: IConnectionProvider;\n}\n\nexport class MonacoLanguageClient extends BaseLanguageClient {\n    protected readonly connectionProvider: IConnectionProvider;\n\n    constructor({ id, name, clientOptions, connectionProvider }: MonacoLanguageClientOptions) {\n        super(id ?? name.toLowerCase(), name, clientOptions);\n        this.connectionProvider = connectionProvider;\n    }\n\n    protected override createMessageTransports(encoding: string): Promise<MessageTransports> {\n        return this.connectionProvider.get(encoding);\n    }\n}\n"],"mappings":"AAAA;;;;AAKA,SAASA,kBAAkB,QAAkD,4CAA4C;AAazH,OAAM,MAAOC,oBAAqB,SAAQD,kBAAkB;EACrCE,kBAAkB;EAErCC,YAAY;IAAEC,EAAE;IAAEC,IAAI;IAAEC,aAAa;IAAEJ;EAAkB,CAA+B;IACpF,KAAK,CAACE,EAAE,IAAIC,IAAI,CAACE,WAAW,EAAE,EAAEF,IAAI,EAAEC,aAAa,CAAC;IACpD,IAAI,CAACJ,kBAAkB,GAAGA,kBAAkB;EAChD;EAEmBM,uBAAuBA,CAACC,QAAgB;IACvD,OAAO,IAAI,CAACP,kBAAkB,CAACQ,GAAG,CAACD,QAAQ,CAAC;EAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}