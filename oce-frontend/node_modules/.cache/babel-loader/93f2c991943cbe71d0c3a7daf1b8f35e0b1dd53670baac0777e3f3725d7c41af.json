{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SemanticTokensFeature = void 0;\nconst vscode = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst Is = require(\"./utils/is\");\nclass SemanticTokensFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.SemanticTokensRegistrationType.type);\n  }\n  fillClientCapabilities(capabilities) {\n    const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'semanticTokens');\n    capability.dynamicRegistration = true;\n    capability.tokenTypes = [vscode_languageserver_protocol_1.SemanticTokenTypes.namespace, vscode_languageserver_protocol_1.SemanticTokenTypes.type, vscode_languageserver_protocol_1.SemanticTokenTypes.class, vscode_languageserver_protocol_1.SemanticTokenTypes.enum, vscode_languageserver_protocol_1.SemanticTokenTypes.interface, vscode_languageserver_protocol_1.SemanticTokenTypes.struct, vscode_languageserver_protocol_1.SemanticTokenTypes.typeParameter, vscode_languageserver_protocol_1.SemanticTokenTypes.parameter, vscode_languageserver_protocol_1.SemanticTokenTypes.variable, vscode_languageserver_protocol_1.SemanticTokenTypes.property, vscode_languageserver_protocol_1.SemanticTokenTypes.enumMember, vscode_languageserver_protocol_1.SemanticTokenTypes.event, vscode_languageserver_protocol_1.SemanticTokenTypes.function, vscode_languageserver_protocol_1.SemanticTokenTypes.method, vscode_languageserver_protocol_1.SemanticTokenTypes.macro, vscode_languageserver_protocol_1.SemanticTokenTypes.keyword, vscode_languageserver_protocol_1.SemanticTokenTypes.modifier, vscode_languageserver_protocol_1.SemanticTokenTypes.comment, vscode_languageserver_protocol_1.SemanticTokenTypes.string, vscode_languageserver_protocol_1.SemanticTokenTypes.number, vscode_languageserver_protocol_1.SemanticTokenTypes.regexp, vscode_languageserver_protocol_1.SemanticTokenTypes.operator, vscode_languageserver_protocol_1.SemanticTokenTypes.decorator];\n    capability.tokenModifiers = [vscode_languageserver_protocol_1.SemanticTokenModifiers.declaration, vscode_languageserver_protocol_1.SemanticTokenModifiers.definition, vscode_languageserver_protocol_1.SemanticTokenModifiers.readonly, vscode_languageserver_protocol_1.SemanticTokenModifiers.static, vscode_languageserver_protocol_1.SemanticTokenModifiers.deprecated, vscode_languageserver_protocol_1.SemanticTokenModifiers.abstract, vscode_languageserver_protocol_1.SemanticTokenModifiers.async, vscode_languageserver_protocol_1.SemanticTokenModifiers.modification, vscode_languageserver_protocol_1.SemanticTokenModifiers.documentation, vscode_languageserver_protocol_1.SemanticTokenModifiers.defaultLibrary];\n    capability.formats = [vscode_languageserver_protocol_1.TokenFormat.Relative];\n    capability.requests = {\n      range: true,\n      full: {\n        delta: true\n      }\n    };\n    capability.multilineTokenSupport = false;\n    capability.overlappingTokenSupport = false;\n    capability.serverCancelSupport = true;\n    capability.augmentsSyntaxTokens = true;\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'semanticTokens').refreshSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const client = this._client;\n    client.onRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type, async () => {\n      for (const provider of this.getAllProviders()) {\n        provider.onDidChangeSemanticTokensEmitter.fire();\n      }\n    });\n    const [id, options] = this.getRegistration(documentSelector, capabilities.semanticTokensProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const fullProvider = Is.boolean(options.full) ? options.full : options.full !== undefined;\n    const hasEditProvider = options.full !== undefined && typeof options.full !== 'boolean' && options.full.delta === true;\n    const eventEmitter = new vscode.EventEmitter();\n    const documentProvider = fullProvider ? {\n      onDidChangeSemanticTokens: eventEmitter.event,\n      provideDocumentSemanticTokens: (document, token) => {\n        const client = this._client;\n        const middleware = client.middleware;\n        const provideDocumentSemanticTokens = (document, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asSemanticTokens(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, token, error, null);\n          });\n        };\n        return middleware.provideDocumentSemanticTokens ? middleware.provideDocumentSemanticTokens(document, token, provideDocumentSemanticTokens) : provideDocumentSemanticTokens(document, token);\n      },\n      provideDocumentSemanticTokensEdits: hasEditProvider ? (document, previousResultId, token) => {\n        const client = this._client;\n        const middleware = client.middleware;\n        const provideDocumentSemanticTokensEdits = (document, previousResultId, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            previousResultId\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, params, token).then(async result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            if (vscode_languageserver_protocol_1.SemanticTokens.is(result)) {\n              return await client.protocol2CodeConverter.asSemanticTokens(result, token);\n            } else {\n              return await client.protocol2CodeConverter.asSemanticTokensEdits(result, token);\n            }\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, token, error, null);\n          });\n        };\n        return middleware.provideDocumentSemanticTokensEdits ? middleware.provideDocumentSemanticTokensEdits(document, previousResultId, token, provideDocumentSemanticTokensEdits) : provideDocumentSemanticTokensEdits(document, previousResultId, token);\n      } : undefined\n    } : undefined;\n    const hasRangeProvider = options.range === true;\n    const rangeProvider = hasRangeProvider ? {\n      provideDocumentRangeSemanticTokens: (document, range, token) => {\n        const client = this._client;\n        const middleware = client.middleware;\n        const provideDocumentRangeSemanticTokens = (document, range, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            range: client.code2ProtocolConverter.asRange(range)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asSemanticTokens(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, token, error, null);\n          });\n        };\n        return middleware.provideDocumentRangeSemanticTokens ? middleware.provideDocumentRangeSemanticTokens(document, range, token, provideDocumentRangeSemanticTokens) : provideDocumentRangeSemanticTokens(document, range, token);\n      }\n    } : undefined;\n    const disposables = [];\n    const client = this._client;\n    const legend = client.protocol2CodeConverter.asSemanticTokensLegend(options.legend);\n    const documentSelector = client.protocol2CodeConverter.asDocumentSelector(selector);\n    if (documentProvider !== undefined) {\n      disposables.push(vscode.languages.registerDocumentSemanticTokensProvider(documentSelector, documentProvider, legend));\n    }\n    if (rangeProvider !== undefined) {\n      disposables.push(vscode.languages.registerDocumentRangeSemanticTokensProvider(documentSelector, rangeProvider, legend));\n    }\n    return [new vscode.Disposable(() => disposables.forEach(item => item.dispose())), {\n      range: rangeProvider,\n      full: documentProvider,\n      onDidChangeSemanticTokensEmitter: eventEmitter\n    }];\n  }\n}\nexports.SemanticTokensFeature = SemanticTokensFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","SemanticTokensFeature","vscode","require","vscode_languageserver_protocol_1","features_1","Is","TextDocumentLanguageFeature","constructor","client","SemanticTokensRegistrationType","type","fillClientCapabilities","capabilities","capability","ensure","dynamicRegistration","tokenTypes","SemanticTokenTypes","namespace","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator","tokenModifiers","SemanticTokenModifiers","declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary","formats","TokenFormat","Relative","requests","range","full","delta","multilineTokenSupport","overlappingTokenSupport","serverCancelSupport","augmentsSyntaxTokens","refreshSupport","initialize","documentSelector","_client","onRequest","SemanticTokensRefreshRequest","provider","getAllProviders","onDidChangeSemanticTokensEmitter","fire","id","options","getRegistration","semanticTokensProvider","register","registerOptions","registerLanguageProvider","selector","fullProvider","boolean","undefined","hasEditProvider","eventEmitter","EventEmitter","documentProvider","onDidChangeSemanticTokens","provideDocumentSemanticTokens","document","token","middleware","params","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","sendRequest","SemanticTokensRequest","then","result","isCancellationRequested","protocol2CodeConverter","asSemanticTokens","error","handleFailedRequest","provideDocumentSemanticTokensEdits","previousResultId","SemanticTokensDeltaRequest","SemanticTokens","is","asSemanticTokensEdits","hasRangeProvider","rangeProvider","provideDocumentRangeSemanticTokens","asRange","SemanticTokensRangeRequest","disposables","legend","asSemanticTokensLegend","asDocumentSelector","push","languages","registerDocumentSemanticTokensProvider","registerDocumentRangeSemanticTokensProvider","Disposable","forEach","item","dispose"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/semanticTokens.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SemanticTokensFeature = void 0;\nconst vscode = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst Is = require(\"./utils/is\");\nclass SemanticTokensFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.SemanticTokensRegistrationType.type);\n    }\n    fillClientCapabilities(capabilities) {\n        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'semanticTokens');\n        capability.dynamicRegistration = true;\n        capability.tokenTypes = [\n            vscode_languageserver_protocol_1.SemanticTokenTypes.namespace,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.type,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.class,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.enum,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.interface,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.struct,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.typeParameter,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.parameter,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.variable,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.property,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.enumMember,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.event,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.function,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.method,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.macro,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.keyword,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.modifier,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.comment,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.string,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.number,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.regexp,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.operator,\n            vscode_languageserver_protocol_1.SemanticTokenTypes.decorator\n        ];\n        capability.tokenModifiers = [\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.declaration,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.definition,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.readonly,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.static,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.deprecated,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.abstract,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.async,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.modification,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.documentation,\n            vscode_languageserver_protocol_1.SemanticTokenModifiers.defaultLibrary\n        ];\n        capability.formats = [vscode_languageserver_protocol_1.TokenFormat.Relative];\n        capability.requests = {\n            range: true,\n            full: {\n                delta: true\n            }\n        };\n        capability.multilineTokenSupport = false;\n        capability.overlappingTokenSupport = false;\n        capability.serverCancelSupport = true;\n        capability.augmentsSyntaxTokens = true;\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'semanticTokens').refreshSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const client = this._client;\n        client.onRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type, async () => {\n            for (const provider of this.getAllProviders()) {\n                provider.onDidChangeSemanticTokensEmitter.fire();\n            }\n        });\n        const [id, options] = this.getRegistration(documentSelector, capabilities.semanticTokensProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const fullProvider = Is.boolean(options.full) ? options.full : options.full !== undefined;\n        const hasEditProvider = options.full !== undefined && typeof options.full !== 'boolean' && options.full.delta === true;\n        const eventEmitter = new vscode.EventEmitter();\n        const documentProvider = fullProvider\n            ? {\n                onDidChangeSemanticTokens: eventEmitter.event,\n                provideDocumentSemanticTokens: (document, token) => {\n                    const client = this._client;\n                    const middleware = client.middleware;\n                    const provideDocumentSemanticTokens = (document, token) => {\n                        const params = {\n                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n                        };\n                        return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, params, token).then((result) => {\n                            if (token.isCancellationRequested) {\n                                return null;\n                            }\n                            return client.protocol2CodeConverter.asSemanticTokens(result, token);\n                        }, (error) => {\n                            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, token, error, null);\n                        });\n                    };\n                    return middleware.provideDocumentSemanticTokens\n                        ? middleware.provideDocumentSemanticTokens(document, token, provideDocumentSemanticTokens)\n                        : provideDocumentSemanticTokens(document, token);\n                },\n                provideDocumentSemanticTokensEdits: hasEditProvider\n                    ? (document, previousResultId, token) => {\n                        const client = this._client;\n                        const middleware = client.middleware;\n                        const provideDocumentSemanticTokensEdits = (document, previousResultId, token) => {\n                            const params = {\n                                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                                previousResultId\n                            };\n                            return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, params, token).then(async (result) => {\n                                if (token.isCancellationRequested) {\n                                    return null;\n                                }\n                                if (vscode_languageserver_protocol_1.SemanticTokens.is(result)) {\n                                    return await client.protocol2CodeConverter.asSemanticTokens(result, token);\n                                }\n                                else {\n                                    return await client.protocol2CodeConverter.asSemanticTokensEdits(result, token);\n                                }\n                            }, (error) => {\n                                return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, token, error, null);\n                            });\n                        };\n                        return middleware.provideDocumentSemanticTokensEdits\n                            ? middleware.provideDocumentSemanticTokensEdits(document, previousResultId, token, provideDocumentSemanticTokensEdits)\n                            : provideDocumentSemanticTokensEdits(document, previousResultId, token);\n                    }\n                    : undefined\n            }\n            : undefined;\n        const hasRangeProvider = options.range === true;\n        const rangeProvider = hasRangeProvider\n            ? {\n                provideDocumentRangeSemanticTokens: (document, range, token) => {\n                    const client = this._client;\n                    const middleware = client.middleware;\n                    const provideDocumentRangeSemanticTokens = (document, range, token) => {\n                        const params = {\n                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                            range: client.code2ProtocolConverter.asRange(range)\n                        };\n                        return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, params, token).then((result) => {\n                            if (token.isCancellationRequested) {\n                                return null;\n                            }\n                            return client.protocol2CodeConverter.asSemanticTokens(result, token);\n                        }, (error) => {\n                            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, token, error, null);\n                        });\n                    };\n                    return middleware.provideDocumentRangeSemanticTokens\n                        ? middleware.provideDocumentRangeSemanticTokens(document, range, token, provideDocumentRangeSemanticTokens)\n                        : provideDocumentRangeSemanticTokens(document, range, token);\n                }\n            }\n            : undefined;\n        const disposables = [];\n        const client = this._client;\n        const legend = client.protocol2CodeConverter.asSemanticTokensLegend(options.legend);\n        const documentSelector = client.protocol2CodeConverter.asDocumentSelector(selector);\n        if (documentProvider !== undefined) {\n            disposables.push(vscode.languages.registerDocumentSemanticTokensProvider(documentSelector, documentProvider, legend));\n        }\n        if (rangeProvider !== undefined) {\n            disposables.push(vscode.languages.registerDocumentRangeSemanticTokensProvider(documentSelector, rangeProvider, legend));\n        }\n        return [new vscode.Disposable(() => disposables.forEach(item => item.dispose())), { range: rangeProvider, full: documentProvider, onDidChangeSemanticTokensEmitter: eventEmitter }];\n    }\n}\nexports.SemanticTokensFeature = SemanticTokensFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}