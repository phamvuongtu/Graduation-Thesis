{"ast":null,"code":"import { illegalArgument } from './errors.js';\nimport { escapeIcons } from './iconLabels.js';\nimport { isEqual } from './resources.js';\nimport { escapeRegExpCharacters } from './strings.js';\nimport { URI } from './uri.js';\nclass MarkdownString {\n  constructor(value = '', isTrustedOrOptions = false) {\n    this.value = value;\n    if (typeof this.value !== 'string') {\n      throw illegalArgument('value');\n    }\n    if (typeof isTrustedOrOptions === 'boolean') {\n      this.isTrusted = isTrustedOrOptions;\n      this.supportThemeIcons = false;\n      this.supportHtml = false;\n    } else {\n      this.isTrusted = isTrustedOrOptions.isTrusted ?? undefined;\n      this.supportThemeIcons = isTrustedOrOptions.supportThemeIcons ?? false;\n      this.supportHtml = isTrustedOrOptions.supportHtml ?? false;\n    }\n  }\n  appendText(value, newlineStyle = 0) {\n    this.value += escapeMarkdownSyntaxTokens(this.supportThemeIcons ? escapeIcons(value) : value).replace(/([ \\t]+)/g, (_match, g1) => '&nbsp;'.repeat(g1.length)).replace(/\\>/gm, '\\\\>').replace(/\\n/g, newlineStyle === 1 ? '\\\\\\n' : '\\n\\n');\n    return this;\n  }\n  appendMarkdown(value) {\n    this.value += value;\n    return this;\n  }\n  appendCodeblock(langId, code) {\n    this.value += `\\n${appendEscapedMarkdownCodeBlockFence(code, langId)}\\n`;\n    return this;\n  }\n  appendLink(target, label, title) {\n    this.value += '[';\n    this.value += this._escape(label, ']');\n    this.value += '](';\n    this.value += this._escape(String(target), ')');\n    if (title) {\n      this.value += ` \"${this._escape(this._escape(title, '\"'), ')')}\"`;\n    }\n    this.value += ')';\n    return this;\n  }\n  _escape(value, ch) {\n    const r = new RegExp(escapeRegExpCharacters(ch), 'g');\n    return value.replace(r, (match, offset) => {\n      if (value.charAt(offset - 1) !== '\\\\') {\n        return `\\\\${match}`;\n      } else {\n        return match;\n      }\n    });\n  }\n}\nfunction isEmptyMarkdownString(oneOrMany) {\n  if (isMarkdownString(oneOrMany)) {\n    return !oneOrMany.value;\n  } else if (Array.isArray(oneOrMany)) {\n    return oneOrMany.every(isEmptyMarkdownString);\n  } else {\n    return true;\n  }\n}\nfunction isMarkdownString(thing) {\n  if (thing instanceof MarkdownString) {\n    return true;\n  } else if (thing && typeof thing === 'object') {\n    return typeof thing.value === 'string' && (typeof thing.isTrusted === 'boolean' || typeof thing.isTrusted === 'object' || thing.isTrusted === undefined) && (typeof thing.supportThemeIcons === 'boolean' || thing.supportThemeIcons === undefined);\n  }\n  return false;\n}\nfunction markdownStringEqual(a, b) {\n  if (a === b) {\n    return true;\n  } else if (!a || !b) {\n    return false;\n  } else {\n    return a.value === b.value && a.isTrusted === b.isTrusted && a.supportThemeIcons === b.supportThemeIcons && a.supportHtml === b.supportHtml && (a.baseUri === b.baseUri || !!a.baseUri && !!b.baseUri && isEqual(URI.from(a.baseUri), URI.from(b.baseUri)));\n  }\n}\nfunction escapeMarkdownSyntaxTokens(text) {\n  return text.replace(/[\\\\`*_{}[\\]()#+\\-!~]/g, '\\\\$&');\n}\nfunction appendEscapedMarkdownCodeBlockFence(code, langId) {\n  const longestFenceLength = code.match(/^`+/gm)?.reduce((a, b) => a.length > b.length ? a : b).length ?? 0;\n  const desiredFenceLength = longestFenceLength >= 3 ? longestFenceLength + 1 : 3;\n  return [`${'`'.repeat(desiredFenceLength)}${langId}`, code, `${'`'.repeat(desiredFenceLength)}`].join('\\n');\n}\nfunction escapeDoubleQuotes(input) {\n  return input.replace(/\"/g, '&quot;');\n}\nfunction removeMarkdownEscapes(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(/\\\\([\\\\`*_{}[\\]()#+\\-.!~])/g, '$1');\n}\nfunction parseHrefAndDimensions(href) {\n  const dimensions = [];\n  const splitted = href.split('|').map(s => s.trim());\n  href = splitted[0];\n  const parameters = splitted[1];\n  if (parameters) {\n    const heightFromParams = /height=(\\d+)/.exec(parameters);\n    const widthFromParams = /width=(\\d+)/.exec(parameters);\n    const height = heightFromParams ? heightFromParams[1] : '';\n    const width = widthFromParams ? widthFromParams[1] : '';\n    const widthIsFinite = isFinite(parseInt(width));\n    const heightIsFinite = isFinite(parseInt(height));\n    if (widthIsFinite) {\n      dimensions.push(`width=\"${width}\"`);\n    }\n    if (heightIsFinite) {\n      dimensions.push(`height=\"${height}\"`);\n    }\n  }\n  return {\n    href,\n    dimensions\n  };\n}\nexport { MarkdownString, appendEscapedMarkdownCodeBlockFence, escapeDoubleQuotes, escapeMarkdownSyntaxTokens, isEmptyMarkdownString, isMarkdownString, markdownStringEqual, parseHrefAndDimensions, removeMarkdownEscapes };","map":{"version":3,"names":["illegalArgument","escapeIcons","isEqual","escapeRegExpCharacters","URI","MarkdownString","constructor","value","isTrustedOrOptions","isTrusted","supportThemeIcons","supportHtml","undefined","appendText","newlineStyle","escapeMarkdownSyntaxTokens","replace","_match","g1","repeat","length","appendMarkdown","appendCodeblock","langId","code","appendEscapedMarkdownCodeBlockFence","appendLink","target","label","title","_escape","String","ch","r","RegExp","match","offset","charAt","isEmptyMarkdownString","oneOrMany","isMarkdownString","Array","isArray","every","thing","markdownStringEqual","a","b","baseUri","from","text","longestFenceLength","reduce","desiredFenceLength","join","escapeDoubleQuotes","input","removeMarkdownEscapes","parseHrefAndDimensions","href","dimensions","splitted","split","map","s","trim","parameters","heightFromParams","exec","widthFromParams","height","width","widthIsFinite","isFinite","parseInt","heightIsFinite","push"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/htmlContent.js"],"sourcesContent":["import { illegalArgument } from './errors.js';\nimport { escapeIcons } from './iconLabels.js';\nimport { isEqual } from './resources.js';\nimport { escapeRegExpCharacters } from './strings.js';\nimport { URI } from './uri.js';\nclass MarkdownString {\n    constructor(value = '', isTrustedOrOptions = false) {\n        this.value = value;\n        if (typeof this.value !== 'string') {\n            throw illegalArgument('value');\n        }\n        if (typeof isTrustedOrOptions === 'boolean') {\n            this.isTrusted = isTrustedOrOptions;\n            this.supportThemeIcons = false;\n            this.supportHtml = false;\n        }\n        else {\n            this.isTrusted = isTrustedOrOptions.isTrusted ?? undefined;\n            this.supportThemeIcons = isTrustedOrOptions.supportThemeIcons ?? false;\n            this.supportHtml = isTrustedOrOptions.supportHtml ?? false;\n        }\n    }\n    appendText(value, newlineStyle = 0 ) {\n        this.value += escapeMarkdownSyntaxTokens(this.supportThemeIcons ? escapeIcons(value) : value)\n            .replace(/([ \\t]+)/g, (_match, g1) => '&nbsp;'.repeat(g1.length))\n            .replace(/\\>/gm, '\\\\>')\n            .replace(/\\n/g, newlineStyle === 1  ? '\\\\\\n' : '\\n\\n');\n        return this;\n    }\n    appendMarkdown(value) {\n        this.value += value;\n        return this;\n    }\n    appendCodeblock(langId, code) {\n        this.value += `\\n${appendEscapedMarkdownCodeBlockFence(code, langId)}\\n`;\n        return this;\n    }\n    appendLink(target, label, title) {\n        this.value += '[';\n        this.value += this._escape(label, ']');\n        this.value += '](';\n        this.value += this._escape(String(target), ')');\n        if (title) {\n            this.value += ` \"${this._escape(this._escape(title, '\"'), ')')}\"`;\n        }\n        this.value += ')';\n        return this;\n    }\n    _escape(value, ch) {\n        const r = ( new RegExp(escapeRegExpCharacters(ch), 'g'));\n        return value.replace(r, (match, offset) => {\n            if (value.charAt(offset - 1) !== '\\\\') {\n                return `\\\\${match}`;\n            }\n            else {\n                return match;\n            }\n        });\n    }\n}\nfunction isEmptyMarkdownString(oneOrMany) {\n    if (isMarkdownString(oneOrMany)) {\n        return !oneOrMany.value;\n    }\n    else if (Array.isArray(oneOrMany)) {\n        return oneOrMany.every(isEmptyMarkdownString);\n    }\n    else {\n        return true;\n    }\n}\nfunction isMarkdownString(thing) {\n    if (thing instanceof MarkdownString) {\n        return true;\n    }\n    else if (thing && typeof thing === 'object') {\n        return typeof thing.value === 'string'\n            && (typeof thing.isTrusted === 'boolean' || typeof thing.isTrusted === 'object' || thing.isTrusted === undefined)\n            && (typeof thing.supportThemeIcons === 'boolean' || thing.supportThemeIcons === undefined);\n    }\n    return false;\n}\nfunction markdownStringEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else if (!a || !b) {\n        return false;\n    }\n    else {\n        return a.value === b.value\n            && a.isTrusted === b.isTrusted\n            && a.supportThemeIcons === b.supportThemeIcons\n            && a.supportHtml === b.supportHtml\n            && (a.baseUri === b.baseUri || !!a.baseUri && !!b.baseUri && isEqual(( URI.from(a.baseUri)), ( URI.from(b.baseUri))));\n    }\n}\nfunction escapeMarkdownSyntaxTokens(text) {\n    return text.replace(/[\\\\`*_{}[\\]()#+\\-!~]/g, '\\\\$&');\n}\nfunction appendEscapedMarkdownCodeBlockFence(code, langId) {\n    const longestFenceLength = code.match(/^`+/gm)?.reduce((a, b) => (a.length > b.length ? a : b)).length ??\n        0;\n    const desiredFenceLength = longestFenceLength >= 3 ? longestFenceLength + 1 : 3;\n    return [\n        `${'`'.repeat(desiredFenceLength)}${langId}`,\n        code,\n        `${'`'.repeat(desiredFenceLength)}`,\n    ].join('\\n');\n}\nfunction escapeDoubleQuotes(input) {\n    return input.replace(/\"/g, '&quot;');\n}\nfunction removeMarkdownEscapes(text) {\n    if (!text) {\n        return text;\n    }\n    return text.replace(/\\\\([\\\\`*_{}[\\]()#+\\-.!~])/g, '$1');\n}\nfunction parseHrefAndDimensions(href) {\n    const dimensions = [];\n    const splitted = ( href.split('|').map(s => s.trim()));\n    href = splitted[0];\n    const parameters = splitted[1];\n    if (parameters) {\n        const heightFromParams = /height=(\\d+)/.exec(parameters);\n        const widthFromParams = /width=(\\d+)/.exec(parameters);\n        const height = heightFromParams ? heightFromParams[1] : '';\n        const width = widthFromParams ? widthFromParams[1] : '';\n        const widthIsFinite = isFinite(parseInt(width));\n        const heightIsFinite = isFinite(parseInt(height));\n        if (widthIsFinite) {\n            dimensions.push(`width=\"${width}\"`);\n        }\n        if (heightIsFinite) {\n            dimensions.push(`height=\"${height}\"`);\n        }\n    }\n    return { href, dimensions };\n}\nexport { MarkdownString, appendEscapedMarkdownCodeBlockFence, escapeDoubleQuotes, escapeMarkdownSyntaxTokens, isEmptyMarkdownString, isMarkdownString, markdownStringEqual, parseHrefAndDimensions, removeMarkdownEscapes };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}