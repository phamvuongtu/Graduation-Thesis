{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncConfigurationFeature = exports.toJSONObject = exports.ConfigurationFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\n/**\n * Configuration pull model. From server to client.\n */\nclass ConfigurationFeature {\n  constructor(client) {\n    this._client = client;\n  }\n  getState() {\n    return {\n      kind: 'static'\n    };\n  }\n  fillClientCapabilities(capabilities) {\n    capabilities.workspace = capabilities.workspace || {};\n    capabilities.workspace.configuration = true;\n  }\n  initialize() {\n    let client = this._client;\n    client.onRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, (params, token) => {\n      let configuration = params => {\n        let result = [];\n        for (let item of params.items) {\n          let resource = item.scopeUri !== void 0 && item.scopeUri !== null ? this._client.protocol2CodeConverter.asUri(item.scopeUri) : undefined;\n          result.push(this.getConfiguration(resource, item.section !== null ? item.section : undefined));\n        }\n        return result;\n      };\n      let middleware = client.middleware.workspace;\n      return middleware && middleware.configuration ? middleware.configuration(params, token, configuration) : configuration(params, token);\n    });\n  }\n  getConfiguration(resource, section) {\n    let result = null;\n    if (section) {\n      let index = section.lastIndexOf('.');\n      if (index === -1) {\n        result = toJSONObject(vscode_1.workspace.getConfiguration(undefined, resource).get(section));\n      } else {\n        let config = vscode_1.workspace.getConfiguration(section.substr(0, index), resource);\n        if (config) {\n          result = toJSONObject(config.get(section.substr(index + 1)));\n        }\n      }\n    } else {\n      let config = vscode_1.workspace.getConfiguration(undefined, resource);\n      result = {};\n      for (let key of Object.keys(config)) {\n        if (config.has(key)) {\n          result[key] = toJSONObject(config.get(key));\n        }\n      }\n    }\n    if (result === undefined) {\n      result = null;\n    }\n    return result;\n  }\n  clear() {}\n}\nexports.ConfigurationFeature = ConfigurationFeature;\nfunction toJSONObject(obj) {\n  if (obj) {\n    if (Array.isArray(obj)) {\n      return obj.map(toJSONObject);\n    } else if (typeof obj === 'object') {\n      const res = Object.create(null);\n      for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          res[key] = toJSONObject(obj[key]);\n        }\n      }\n      return res;\n    }\n  }\n  return obj;\n}\nexports.toJSONObject = toJSONObject;\nclass SyncConfigurationFeature {\n  constructor(_client) {\n    this._client = _client;\n    this.isCleared = false;\n    this._listeners = new Map();\n  }\n  getState() {\n    return {\n      kind: 'workspace',\n      id: this.registrationType.method,\n      registrations: this._listeners.size > 0\n    };\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeConfiguration').dynamicRegistration = true;\n  }\n  initialize() {\n    this.isCleared = false;\n    let section = this._client.clientOptions.synchronize?.configurationSection;\n    if (section !== undefined) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: {\n          section: section\n        }\n      });\n    }\n  }\n  register(data) {\n    let disposable = vscode_1.workspace.onDidChangeConfiguration(event => {\n      this.onDidChangeConfiguration(data.registerOptions.section, event);\n    });\n    this._listeners.set(data.id, disposable);\n    if (data.registerOptions.section !== undefined) {\n      this.onDidChangeConfiguration(data.registerOptions.section, undefined);\n    }\n  }\n  unregister(id) {\n    let disposable = this._listeners.get(id);\n    if (disposable) {\n      this._listeners.delete(id);\n      disposable.dispose();\n    }\n  }\n  clear() {\n    for (const disposable of this._listeners.values()) {\n      disposable.dispose();\n    }\n    this._listeners.clear();\n    this.isCleared = true;\n  }\n  onDidChangeConfiguration(configurationSection, event) {\n    if (this.isCleared) {\n      return;\n    }\n    let sections;\n    if (Is.string(configurationSection)) {\n      sections = [configurationSection];\n    } else {\n      sections = configurationSection;\n    }\n    if (sections !== undefined && event !== undefined) {\n      let affected = sections.some(section => event.affectsConfiguration(section));\n      if (!affected) {\n        return;\n      }\n    }\n    const didChangeConfiguration = async sections => {\n      if (sections === undefined) {\n        return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, {\n          settings: null\n        });\n      } else {\n        return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, {\n          settings: this.extractSettingsInformation(sections)\n        });\n      }\n    };\n    let middleware = this._client.middleware.workspace?.didChangeConfiguration;\n    (middleware ? middleware(sections, didChangeConfiguration) : didChangeConfiguration(sections)).catch(error => {\n      this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type.method} failed`, error);\n    });\n  }\n  extractSettingsInformation(keys) {\n    function ensurePath(config, path) {\n      let current = config;\n      for (let i = 0; i < path.length - 1; i++) {\n        let obj = current[path[i]];\n        if (!obj) {\n          obj = Object.create(null);\n          current[path[i]] = obj;\n        }\n        current = obj;\n      }\n      return current;\n    }\n    let resource = this._client.clientOptions.workspaceFolder ? this._client.clientOptions.workspaceFolder.uri : undefined;\n    let result = Object.create(null);\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let index = key.indexOf('.');\n      let config = null;\n      if (index >= 0) {\n        config = vscode_1.workspace.getConfiguration(key.substr(0, index), resource).get(key.substr(index + 1));\n      } else {\n        config = vscode_1.workspace.getConfiguration(undefined, resource).get(key);\n      }\n      if (config) {\n        let path = keys[i].split('.');\n        ensurePath(result, path)[path[path.length - 1]] = toJSONObject(config);\n      }\n    }\n    return result;\n  }\n}\nexports.SyncConfigurationFeature = SyncConfigurationFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","SyncConfigurationFeature","toJSONObject","ConfigurationFeature","vscode_1","require","vscode_languageserver_protocol_1","Is","UUID","features_1","constructor","client","_client","getState","kind","fillClientCapabilities","capabilities","workspace","configuration","initialize","onRequest","ConfigurationRequest","type","params","token","result","item","items","resource","scopeUri","protocol2CodeConverter","asUri","undefined","push","getConfiguration","section","middleware","index","lastIndexOf","get","config","substr","key","keys","has","clear","obj","Array","isArray","map","res","create","prototype","hasOwnProperty","call","isCleared","_listeners","Map","id","registrationType","method","registrations","size","DidChangeConfigurationNotification","ensure","dynamicRegistration","clientOptions","synchronize","configurationSection","register","generateUuid","registerOptions","data","disposable","onDidChangeConfiguration","event","set","unregister","delete","dispose","values","sections","string","affected","some","affectsConfiguration","didChangeConfiguration","sendNotification","settings","extractSettingsInformation","catch","error","ensurePath","path","current","i","length","workspaceFolder","uri","indexOf","split"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/configuration.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncConfigurationFeature = exports.toJSONObject = exports.ConfigurationFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\n/**\n * Configuration pull model. From server to client.\n */\nclass ConfigurationFeature {\n    constructor(client) {\n        this._client = client;\n    }\n    getState() {\n        return { kind: 'static' };\n    }\n    fillClientCapabilities(capabilities) {\n        capabilities.workspace = capabilities.workspace || {};\n        capabilities.workspace.configuration = true;\n    }\n    initialize() {\n        let client = this._client;\n        client.onRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, (params, token) => {\n            let configuration = (params) => {\n                let result = [];\n                for (let item of params.items) {\n                    let resource = item.scopeUri !== void 0 && item.scopeUri !== null ? this._client.protocol2CodeConverter.asUri(item.scopeUri) : undefined;\n                    result.push(this.getConfiguration(resource, item.section !== null ? item.section : undefined));\n                }\n                return result;\n            };\n            let middleware = client.middleware.workspace;\n            return middleware && middleware.configuration\n                ? middleware.configuration(params, token, configuration)\n                : configuration(params, token);\n        });\n    }\n    getConfiguration(resource, section) {\n        let result = null;\n        if (section) {\n            let index = section.lastIndexOf('.');\n            if (index === -1) {\n                result = toJSONObject(vscode_1.workspace.getConfiguration(undefined, resource).get(section));\n            }\n            else {\n                let config = vscode_1.workspace.getConfiguration(section.substr(0, index), resource);\n                if (config) {\n                    result = toJSONObject(config.get(section.substr(index + 1)));\n                }\n            }\n        }\n        else {\n            let config = vscode_1.workspace.getConfiguration(undefined, resource);\n            result = {};\n            for (let key of Object.keys(config)) {\n                if (config.has(key)) {\n                    result[key] = toJSONObject(config.get(key));\n                }\n            }\n        }\n        if (result === undefined) {\n            result = null;\n        }\n        return result;\n    }\n    clear() {\n    }\n}\nexports.ConfigurationFeature = ConfigurationFeature;\nfunction toJSONObject(obj) {\n    if (obj) {\n        if (Array.isArray(obj)) {\n            return obj.map(toJSONObject);\n        }\n        else if (typeof obj === 'object') {\n            const res = Object.create(null);\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    res[key] = toJSONObject(obj[key]);\n                }\n            }\n            return res;\n        }\n    }\n    return obj;\n}\nexports.toJSONObject = toJSONObject;\nclass SyncConfigurationFeature {\n    constructor(_client) {\n        this._client = _client;\n        this.isCleared = false;\n        this._listeners = new Map();\n    }\n    getState() {\n        return { kind: 'workspace', id: this.registrationType.method, registrations: this._listeners.size > 0 };\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeConfiguration').dynamicRegistration = true;\n    }\n    initialize() {\n        this.isCleared = false;\n        let section = this._client.clientOptions.synchronize?.configurationSection;\n        if (section !== undefined) {\n            this.register({\n                id: UUID.generateUuid(),\n                registerOptions: {\n                    section: section\n                }\n            });\n        }\n    }\n    register(data) {\n        let disposable = vscode_1.workspace.onDidChangeConfiguration((event) => {\n            this.onDidChangeConfiguration(data.registerOptions.section, event);\n        });\n        this._listeners.set(data.id, disposable);\n        if (data.registerOptions.section !== undefined) {\n            this.onDidChangeConfiguration(data.registerOptions.section, undefined);\n        }\n    }\n    unregister(id) {\n        let disposable = this._listeners.get(id);\n        if (disposable) {\n            this._listeners.delete(id);\n            disposable.dispose();\n        }\n    }\n    clear() {\n        for (const disposable of this._listeners.values()) {\n            disposable.dispose();\n        }\n        this._listeners.clear();\n        this.isCleared = true;\n    }\n    onDidChangeConfiguration(configurationSection, event) {\n        if (this.isCleared) {\n            return;\n        }\n        let sections;\n        if (Is.string(configurationSection)) {\n            sections = [configurationSection];\n        }\n        else {\n            sections = configurationSection;\n        }\n        if (sections !== undefined && event !== undefined) {\n            let affected = sections.some((section) => event.affectsConfiguration(section));\n            if (!affected) {\n                return;\n            }\n        }\n        const didChangeConfiguration = async (sections) => {\n            if (sections === undefined) {\n                return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: null });\n            }\n            else {\n                return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: this.extractSettingsInformation(sections) });\n            }\n        };\n        let middleware = this._client.middleware.workspace?.didChangeConfiguration;\n        (middleware ? middleware(sections, didChangeConfiguration) : didChangeConfiguration(sections)).catch((error) => {\n            this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type.method} failed`, error);\n        });\n    }\n    extractSettingsInformation(keys) {\n        function ensurePath(config, path) {\n            let current = config;\n            for (let i = 0; i < path.length - 1; i++) {\n                let obj = current[path[i]];\n                if (!obj) {\n                    obj = Object.create(null);\n                    current[path[i]] = obj;\n                }\n                current = obj;\n            }\n            return current;\n        }\n        let resource = this._client.clientOptions.workspaceFolder\n            ? this._client.clientOptions.workspaceFolder.uri\n            : undefined;\n        let result = Object.create(null);\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            let index = key.indexOf('.');\n            let config = null;\n            if (index >= 0) {\n                config = vscode_1.workspace.getConfiguration(key.substr(0, index), resource).get(key.substr(index + 1));\n            }\n            else {\n                config = vscode_1.workspace.getConfiguration(undefined, resource).get(key);\n            }\n            if (config) {\n                let path = keys[i].split('.');\n                ensurePath(result, path)[path[path.length - 1]] = toJSONObject(config);\n            }\n        }\n        return result;\n    }\n}\nexports.SyncConfigurationFeature = SyncConfigurationFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}