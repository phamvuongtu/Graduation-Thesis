{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkspaceFoldersFeature = exports.arrayDiff = void 0;\nconst UUID = require(\"./utils/uuid\");\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nfunction access(target, key) {\n  if (target === undefined || target === null) {\n    return undefined;\n  }\n  return target[key];\n}\nfunction arrayDiff(left, right) {\n  return left.filter(element => right.indexOf(element) < 0);\n}\nexports.arrayDiff = arrayDiff;\nclass WorkspaceFoldersFeature {\n  constructor(client) {\n    this._client = client;\n    this._listeners = new Map();\n  }\n  getState() {\n    return {\n      kind: 'workspace',\n      id: this.registrationType.method,\n      registrations: this._listeners.size > 0\n    };\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type;\n  }\n  fillInitializeParams(params) {\n    const folders = vscode_1.workspace.workspaceFolders;\n    this.initializeWithFolders(folders);\n    if (folders === void 0) {\n      params.workspaceFolders = null;\n    } else {\n      params.workspaceFolders = folders.map(folder => this.asProtocol(folder));\n    }\n  }\n  initializeWithFolders(currentWorkspaceFolders) {\n    this._initialFolders = currentWorkspaceFolders;\n  }\n  fillClientCapabilities(capabilities) {\n    capabilities.workspace = capabilities.workspace || {};\n    capabilities.workspace.workspaceFolders = true;\n  }\n  initialize(capabilities) {\n    const client = this._client;\n    client.onRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type, token => {\n      const workspaceFolders = () => {\n        const folders = vscode_1.workspace.workspaceFolders;\n        if (folders === undefined) {\n          return null;\n        }\n        const result = folders.map(folder => {\n          return this.asProtocol(folder);\n        });\n        return result;\n      };\n      const middleware = client.middleware.workspace;\n      return middleware && middleware.workspaceFolders ? middleware.workspaceFolders(token, workspaceFolders) : workspaceFolders(token);\n    });\n    const value = access(access(access(capabilities, 'workspace'), 'workspaceFolders'), 'changeNotifications');\n    let id;\n    if (typeof value === 'string') {\n      id = value;\n    } else if (value === true) {\n      id = UUID.generateUuid();\n    }\n    if (id) {\n      this.register({\n        id: id,\n        registerOptions: undefined\n      });\n    }\n  }\n  sendInitialEvent(currentWorkspaceFolders) {\n    let promise;\n    if (this._initialFolders && currentWorkspaceFolders) {\n      const removed = arrayDiff(this._initialFolders, currentWorkspaceFolders);\n      const added = arrayDiff(currentWorkspaceFolders, this._initialFolders);\n      if (added.length > 0 || removed.length > 0) {\n        promise = this.doSendEvent(added, removed);\n      }\n    } else if (this._initialFolders) {\n      promise = this.doSendEvent([], this._initialFolders);\n    } else if (currentWorkspaceFolders) {\n      promise = this.doSendEvent(currentWorkspaceFolders, []);\n    }\n    if (promise !== undefined) {\n      promise.catch(error => {\n        this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);\n      });\n    }\n  }\n  doSendEvent(addedFolders, removedFolders) {\n    let params = {\n      event: {\n        added: addedFolders.map(folder => this.asProtocol(folder)),\n        removed: removedFolders.map(folder => this.asProtocol(folder))\n      }\n    };\n    return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params);\n  }\n  register(data) {\n    let id = data.id;\n    let client = this._client;\n    let disposable = vscode_1.workspace.onDidChangeWorkspaceFolders(event => {\n      let didChangeWorkspaceFolders = event => {\n        return this.doSendEvent(event.added, event.removed);\n      };\n      let middleware = client.middleware.workspace;\n      const promise = middleware && middleware.didChangeWorkspaceFolders ? middleware.didChangeWorkspaceFolders(event, didChangeWorkspaceFolders) : didChangeWorkspaceFolders(event);\n      promise.catch(error => {\n        this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);\n      });\n    });\n    this._listeners.set(id, disposable);\n    this.sendInitialEvent(vscode_1.workspace.workspaceFolders);\n  }\n  unregister(id) {\n    let disposable = this._listeners.get(id);\n    if (disposable === void 0) {\n      return;\n    }\n    this._listeners.delete(id);\n    disposable.dispose();\n  }\n  clear() {\n    for (let disposable of this._listeners.values()) {\n      disposable.dispose();\n    }\n    this._listeners.clear();\n  }\n  asProtocol(workspaceFolder) {\n    if (workspaceFolder === void 0) {\n      return null;\n    }\n    return {\n      uri: this._client.code2ProtocolConverter.asUri(workspaceFolder.uri),\n      name: workspaceFolder.name\n    };\n  }\n}\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","WorkspaceFoldersFeature","arrayDiff","UUID","require","vscode_1","vscode_languageserver_protocol_1","access","target","key","undefined","left","right","filter","element","indexOf","constructor","client","_client","_listeners","Map","getState","kind","id","registrationType","method","registrations","size","DidChangeWorkspaceFoldersNotification","type","fillInitializeParams","params","folders","workspace","workspaceFolders","initializeWithFolders","map","folder","asProtocol","currentWorkspaceFolders","_initialFolders","fillClientCapabilities","capabilities","initialize","onRequest","WorkspaceFoldersRequest","token","result","middleware","generateUuid","register","registerOptions","sendInitialEvent","promise","removed","added","length","doSendEvent","catch","error","addedFolders","removedFolders","event","sendNotification","data","disposable","onDidChangeWorkspaceFolders","didChangeWorkspaceFolders","set","unregister","get","delete","dispose","clear","values","workspaceFolder","uri","code2ProtocolConverter","asUri","name"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/workspaceFolder.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceFoldersFeature = exports.arrayDiff = void 0;\nconst UUID = require(\"./utils/uuid\");\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nfunction access(target, key) {\n    if (target === undefined || target === null) {\n        return undefined;\n    }\n    return target[key];\n}\nfunction arrayDiff(left, right) {\n    return left.filter(element => right.indexOf(element) < 0);\n}\nexports.arrayDiff = arrayDiff;\nclass WorkspaceFoldersFeature {\n    constructor(client) {\n        this._client = client;\n        this._listeners = new Map();\n    }\n    getState() {\n        return { kind: 'workspace', id: this.registrationType.method, registrations: this._listeners.size > 0 };\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type;\n    }\n    fillInitializeParams(params) {\n        const folders = vscode_1.workspace.workspaceFolders;\n        this.initializeWithFolders(folders);\n        if (folders === void 0) {\n            params.workspaceFolders = null;\n        }\n        else {\n            params.workspaceFolders = folders.map(folder => this.asProtocol(folder));\n        }\n    }\n    initializeWithFolders(currentWorkspaceFolders) {\n        this._initialFolders = currentWorkspaceFolders;\n    }\n    fillClientCapabilities(capabilities) {\n        capabilities.workspace = capabilities.workspace || {};\n        capabilities.workspace.workspaceFolders = true;\n    }\n    initialize(capabilities) {\n        const client = this._client;\n        client.onRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type, (token) => {\n            const workspaceFolders = () => {\n                const folders = vscode_1.workspace.workspaceFolders;\n                if (folders === undefined) {\n                    return null;\n                }\n                const result = folders.map((folder) => {\n                    return this.asProtocol(folder);\n                });\n                return result;\n            };\n            const middleware = client.middleware.workspace;\n            return middleware && middleware.workspaceFolders\n                ? middleware.workspaceFolders(token, workspaceFolders)\n                : workspaceFolders(token);\n        });\n        const value = access(access(access(capabilities, 'workspace'), 'workspaceFolders'), 'changeNotifications');\n        let id;\n        if (typeof value === 'string') {\n            id = value;\n        }\n        else if (value === true) {\n            id = UUID.generateUuid();\n        }\n        if (id) {\n            this.register({ id: id, registerOptions: undefined });\n        }\n    }\n    sendInitialEvent(currentWorkspaceFolders) {\n        let promise;\n        if (this._initialFolders && currentWorkspaceFolders) {\n            const removed = arrayDiff(this._initialFolders, currentWorkspaceFolders);\n            const added = arrayDiff(currentWorkspaceFolders, this._initialFolders);\n            if (added.length > 0 || removed.length > 0) {\n                promise = this.doSendEvent(added, removed);\n            }\n        }\n        else if (this._initialFolders) {\n            promise = this.doSendEvent([], this._initialFolders);\n        }\n        else if (currentWorkspaceFolders) {\n            promise = this.doSendEvent(currentWorkspaceFolders, []);\n        }\n        if (promise !== undefined) {\n            promise.catch((error) => {\n                this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);\n            });\n        }\n    }\n    doSendEvent(addedFolders, removedFolders) {\n        let params = {\n            event: {\n                added: addedFolders.map(folder => this.asProtocol(folder)),\n                removed: removedFolders.map(folder => this.asProtocol(folder))\n            }\n        };\n        return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params);\n    }\n    register(data) {\n        let id = data.id;\n        let client = this._client;\n        let disposable = vscode_1.workspace.onDidChangeWorkspaceFolders((event) => {\n            let didChangeWorkspaceFolders = (event) => {\n                return this.doSendEvent(event.added, event.removed);\n            };\n            let middleware = client.middleware.workspace;\n            const promise = middleware && middleware.didChangeWorkspaceFolders\n                ? middleware.didChangeWorkspaceFolders(event, didChangeWorkspaceFolders)\n                : didChangeWorkspaceFolders(event);\n            promise.catch((error) => {\n                this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);\n            });\n        });\n        this._listeners.set(id, disposable);\n        this.sendInitialEvent(vscode_1.workspace.workspaceFolders);\n    }\n    unregister(id) {\n        let disposable = this._listeners.get(id);\n        if (disposable === void 0) {\n            return;\n        }\n        this._listeners.delete(id);\n        disposable.dispose();\n    }\n    clear() {\n        for (let disposable of this._listeners.values()) {\n            disposable.dispose();\n        }\n        this._listeners.clear();\n    }\n    asProtocol(workspaceFolder) {\n        if (workspaceFolder === void 0) {\n            return null;\n        }\n        return { uri: this._client.code2ProtocolConverter.asUri(workspaceFolder.uri), name: workspaceFolder.name };\n    }\n}\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}