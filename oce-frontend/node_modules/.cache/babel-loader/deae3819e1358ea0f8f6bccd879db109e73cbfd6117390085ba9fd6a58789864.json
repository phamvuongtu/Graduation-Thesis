{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeDefinitionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass TypeDefinitionFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.TypeDefinitionRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition').dynamicRegistration = true;\n    let typeDefinitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition');\n    typeDefinitionSupport.dynamicRegistration = true;\n    typeDefinitionSupport.linkSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let [id, options] = this.getRegistration(documentSelector, capabilities.typeDefinitionProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideTypeDefinition: (document, position, token) => {\n        const client = this._client;\n        const provideTypeDefinition = (document, position, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asDefinitionResult(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideTypeDefinition ? middleware.provideTypeDefinition(document, position, token, provideTypeDefinition) : provideTypeDefinition(document, position, token);\n      }\n    };\n    return [this.registerProvider(selector, provider), provider];\n  }\n  registerProvider(selector, provider) {\n    return vscode_1.languages.registerTypeDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n  }\n}\nexports.TypeDefinitionFeature = TypeDefinitionFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeDefinitionFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","TextDocumentLanguageFeature","constructor","client","TypeDefinitionRequest","type","fillClientCapabilities","capabilities","ensure","dynamicRegistration","typeDefinitionSupport","linkSupport","initialize","documentSelector","id","options","getRegistration","typeDefinitionProvider","register","registerOptions","registerLanguageProvider","selector","provider","provideTypeDefinition","document","position","token","_client","sendRequest","code2ProtocolConverter","asTextDocumentPositionParams","then","result","isCancellationRequested","protocol2CodeConverter","asDefinitionResult","error","handleFailedRequest","middleware","registerProvider","languages","registerTypeDefinitionProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/typeDefinition.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeDefinitionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass TypeDefinitionFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.TypeDefinitionRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition').dynamicRegistration = true;\n        let typeDefinitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition');\n        typeDefinitionSupport.dynamicRegistration = true;\n        typeDefinitionSupport.linkSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let [id, options] = this.getRegistration(documentSelector, capabilities.typeDefinitionProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideTypeDefinition: (document, position, token) => {\n                const client = this._client;\n                const provideTypeDefinition = (document, position, token) => {\n                    return client.sendRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asDefinitionResult(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideTypeDefinition\n                    ? middleware.provideTypeDefinition(document, position, token, provideTypeDefinition)\n                    : provideTypeDefinition(document, position, token);\n            }\n        };\n        return [this.registerProvider(selector, provider), provider];\n    }\n    registerProvider(selector, provider) {\n        return vscode_1.languages.registerTypeDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n    }\n}\nexports.TypeDefinitionFeature = TypeDefinitionFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}