{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProgressPart = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nclass ProgressPart {\n  constructor(_client, _token, done) {\n    this._client = _client;\n    this._token = _token;\n    this._reported = 0;\n    this._infinite = false;\n    this._lspProgressDisposable = this._client.onProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, value => {\n      switch (value.kind) {\n        case 'begin':\n          this.begin(value);\n          break;\n        case 'report':\n          this.report(value);\n          break;\n        case 'end':\n          this.done();\n          done && done(this);\n          break;\n      }\n    });\n  }\n  begin(params) {\n    this._infinite = params.percentage === undefined;\n    // the progress as already been marked as done / canceled. Ignore begin call\n    if (this._lspProgressDisposable === undefined) {\n      return;\n    }\n    // Since we don't use commands this will be a silent window progress with a hidden notification.\n    void vscode_1.window.withProgress({\n      location: vscode_1.ProgressLocation.Window,\n      cancellable: params.cancellable,\n      title: params.title\n    }, async (progress, cancellationToken) => {\n      // the progress as already been marked as done / canceled. Ignore begin call\n      if (this._lspProgressDisposable === undefined) {\n        return;\n      }\n      this._progress = progress;\n      this._cancellationToken = cancellationToken;\n      this._tokenDisposable = this._cancellationToken.onCancellationRequested(() => {\n        this._client.sendNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, {\n          token: this._token\n        });\n      });\n      this.report(params);\n      return new Promise((resolve, reject) => {\n        this._resolve = resolve;\n        this._reject = reject;\n      });\n    });\n  }\n  report(params) {\n    if (this._infinite && Is.string(params.message)) {\n      this._progress !== undefined && this._progress.report({\n        message: params.message\n      });\n    } else if (Is.number(params.percentage)) {\n      const percentage = Math.max(0, Math.min(params.percentage, 100));\n      const delta = Math.max(0, percentage - this._reported);\n      this._reported += delta;\n      this._progress !== undefined && this._progress.report({\n        message: params.message,\n        increment: delta\n      });\n    }\n  }\n  cancel() {\n    this.cleanup();\n    if (this._reject !== undefined) {\n      this._reject();\n      this._resolve = undefined;\n      this._reject = undefined;\n    }\n  }\n  done() {\n    this.cleanup();\n    if (this._resolve !== undefined) {\n      this._resolve();\n      this._resolve = undefined;\n      this._reject = undefined;\n    }\n  }\n  cleanup() {\n    if (this._lspProgressDisposable !== undefined) {\n      this._lspProgressDisposable.dispose();\n      this._lspProgressDisposable = undefined;\n    }\n    if (this._tokenDisposable !== undefined) {\n      this._tokenDisposable.dispose();\n      this._tokenDisposable = undefined;\n    }\n    this._progress = undefined;\n    this._cancellationToken = undefined;\n  }\n}\nexports.ProgressPart = ProgressPart;","map":{"version":3,"names":["Object","defineProperty","exports","value","ProgressPart","vscode_1","require","vscode_languageserver_protocol_1","Is","constructor","_client","_token","done","_reported","_infinite","_lspProgressDisposable","onProgress","WorkDoneProgress","type","kind","begin","report","params","percentage","undefined","window","withProgress","location","ProgressLocation","Window","cancellable","title","progress","cancellationToken","_progress","_cancellationToken","_tokenDisposable","onCancellationRequested","sendNotification","WorkDoneProgressCancelNotification","token","Promise","resolve","reject","_resolve","_reject","string","message","number","Math","max","min","delta","increment","cancel","cleanup","dispose"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/progressPart.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProgressPart = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nclass ProgressPart {\n    constructor(_client, _token, done) {\n        this._client = _client;\n        this._token = _token;\n        this._reported = 0;\n        this._infinite = false;\n        this._lspProgressDisposable = this._client.onProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, (value) => {\n            switch (value.kind) {\n                case 'begin':\n                    this.begin(value);\n                    break;\n                case 'report':\n                    this.report(value);\n                    break;\n                case 'end':\n                    this.done();\n                    done && done(this);\n                    break;\n            }\n        });\n    }\n    begin(params) {\n        this._infinite = params.percentage === undefined;\n        // the progress as already been marked as done / canceled. Ignore begin call\n        if (this._lspProgressDisposable === undefined) {\n            return;\n        }\n        // Since we don't use commands this will be a silent window progress with a hidden notification.\n        void vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Window, cancellable: params.cancellable, title: params.title }, async (progress, cancellationToken) => {\n            // the progress as already been marked as done / canceled. Ignore begin call\n            if (this._lspProgressDisposable === undefined) {\n                return;\n            }\n            this._progress = progress;\n            this._cancellationToken = cancellationToken;\n            this._tokenDisposable = this._cancellationToken.onCancellationRequested(() => {\n                this._client.sendNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, { token: this._token });\n            });\n            this.report(params);\n            return new Promise((resolve, reject) => {\n                this._resolve = resolve;\n                this._reject = reject;\n            });\n        });\n    }\n    report(params) {\n        if (this._infinite && Is.string(params.message)) {\n            this._progress !== undefined && this._progress.report({ message: params.message });\n        }\n        else if (Is.number(params.percentage)) {\n            const percentage = Math.max(0, Math.min(params.percentage, 100));\n            const delta = Math.max(0, percentage - this._reported);\n            this._reported += delta;\n            this._progress !== undefined && this._progress.report({ message: params.message, increment: delta });\n        }\n    }\n    cancel() {\n        this.cleanup();\n        if (this._reject !== undefined) {\n            this._reject();\n            this._resolve = undefined;\n            this._reject = undefined;\n        }\n    }\n    done() {\n        this.cleanup();\n        if (this._resolve !== undefined) {\n            this._resolve();\n            this._resolve = undefined;\n            this._reject = undefined;\n        }\n    }\n    cleanup() {\n        if (this._lspProgressDisposable !== undefined) {\n            this._lspProgressDisposable.dispose();\n            this._lspProgressDisposable = undefined;\n        }\n        if (this._tokenDisposable !== undefined) {\n            this._tokenDisposable.dispose();\n            this._tokenDisposable = undefined;\n        }\n        this._progress = undefined;\n        this._cancellationToken = undefined;\n    }\n}\nexports.ProgressPart = ProgressPart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}