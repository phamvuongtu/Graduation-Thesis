{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InlineValueFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass InlineValueFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.InlineValueRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlineValue').dynamicRegistration = true;\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlineValue').refreshSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    this._client.onRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type, async () => {\n      for (const provider of this.getAllProviders()) {\n        provider.onDidChangeInlineValues.fire();\n      }\n    });\n    const [id, options] = this.getRegistration(documentSelector, capabilities.inlineValueProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const eventEmitter = new vscode_1.EventEmitter();\n    const provider = {\n      onDidChangeInlineValues: eventEmitter.event,\n      provideInlineValues: (document, viewPort, context, token) => {\n        const client = this._client;\n        const provideInlineValues = (document, viewPort, context, token) => {\n          const requestParams = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            range: client.code2ProtocolConverter.asRange(viewPort),\n            context: client.code2ProtocolConverter.asInlineValueContext(context)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, requestParams, token).then(values => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asInlineValues(values, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideInlineValues ? middleware.provideInlineValues(document, viewPort, context, token, provideInlineValues) : provideInlineValues(document, viewPort, context, token);\n      }\n    };\n    return [this.registerProvider(selector, provider), {\n      provider: provider,\n      onDidChangeInlineValues: eventEmitter\n    }];\n  }\n  registerProvider(selector, provider) {\n    return vscode_1.languages.registerInlineValuesProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n  }\n}\nexports.InlineValueFeature = InlineValueFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","InlineValueFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","TextDocumentLanguageFeature","constructor","client","InlineValueRequest","type","fillClientCapabilities","capabilities","ensure","dynamicRegistration","refreshSupport","initialize","documentSelector","_client","onRequest","InlineValueRefreshRequest","provider","getAllProviders","onDidChangeInlineValues","fire","id","options","getRegistration","inlineValueProvider","register","registerOptions","registerLanguageProvider","selector","eventEmitter","EventEmitter","event","provideInlineValues","document","viewPort","context","token","requestParams","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","range","asRange","asInlineValueContext","sendRequest","then","values","isCancellationRequested","protocol2CodeConverter","asInlineValues","error","handleFailedRequest","middleware","registerProvider","languages","registerInlineValuesProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/inlineValue.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineValueFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass InlineValueFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.InlineValueRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlineValue').dynamicRegistration = true;\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlineValue').refreshSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        this._client.onRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type, async () => {\n            for (const provider of this.getAllProviders()) {\n                provider.onDidChangeInlineValues.fire();\n            }\n        });\n        const [id, options] = this.getRegistration(documentSelector, capabilities.inlineValueProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const eventEmitter = new vscode_1.EventEmitter();\n        const provider = {\n            onDidChangeInlineValues: eventEmitter.event,\n            provideInlineValues: (document, viewPort, context, token) => {\n                const client = this._client;\n                const provideInlineValues = (document, viewPort, context, token) => {\n                    const requestParams = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        range: client.code2ProtocolConverter.asRange(viewPort),\n                        context: client.code2ProtocolConverter.asInlineValueContext(context)\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, requestParams, token).then((values) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asInlineValues(values, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideInlineValues\n                    ? middleware.provideInlineValues(document, viewPort, context, token, provideInlineValues)\n                    : provideInlineValues(document, viewPort, context, token);\n            }\n        };\n        return [this.registerProvider(selector, provider), { provider: provider, onDidChangeInlineValues: eventEmitter }];\n    }\n    registerProvider(selector, provider) {\n        return vscode_1.languages.registerInlineValuesProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n    }\n}\nexports.InlineValueFeature = InlineValueFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}