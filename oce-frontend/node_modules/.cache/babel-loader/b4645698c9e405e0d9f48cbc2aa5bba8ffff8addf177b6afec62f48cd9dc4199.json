{"ast":null,"code":"import { localizeWithPath } from '../../../nls.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport '../../../base/common/platform.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { isNumber, isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { RawContextKey } from '../../contextkey/common/contextkey.js';\nconst _moduleId = \"vs/platform/log/common/log\";\nfunction isLogLevel(thing) {\n  return isNumber(thing);\n}\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Off\"] = 0] = \"Off\";\n  LogLevel[LogLevel[\"Trace\"] = 1] = \"Trace\";\n  LogLevel[LogLevel[\"Debug\"] = 2] = \"Debug\";\n  LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n  LogLevel[LogLevel[\"Warning\"] = 4] = \"Warning\";\n  LogLevel[LogLevel[\"Error\"] = 5] = \"Error\";\n})(LogLevel || (LogLevel = {}));\nconst DEFAULT_LOG_LEVEL = LogLevel.Info;\nfunction log(logger, level, message) {\n  switch (level) {\n    case LogLevel.Trace:\n      logger.trace(message);\n      break;\n    case LogLevel.Debug:\n      logger.debug(message);\n      break;\n    case LogLevel.Info:\n      logger.info(message);\n      break;\n    case LogLevel.Warning:\n      logger.warn(message);\n      break;\n    case LogLevel.Error:\n      logger.error(message);\n      break;\n    case LogLevel.Off:\n      break;\n    default:\n      throw new Error(`Invalid log level ${level}`);\n  }\n}\nfunction format(args, verbose = false) {\n  let result = '';\n  for (let i = 0; i < args.length; i++) {\n    let a = args[i];\n    if (a instanceof Error) {\n      a = toErrorMessage(a, verbose);\n    }\n    if (typeof a === 'object') {\n      try {\n        a = JSON.stringify(a);\n      } catch (e) {}\n    }\n    result += (i > 0 ? ' ' : '') + a;\n  }\n  return result;\n}\nclass AbstractLogger extends Disposable {\n  constructor() {\n    super(...arguments);\n    this.level = DEFAULT_LOG_LEVEL;\n    this._onDidChangeLogLevel = this._register(new Emitter());\n    this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n  }\n  setLevel(level) {\n    if (this.level !== level) {\n      this.level = level;\n      this._onDidChangeLogLevel.fire(this.level);\n    }\n  }\n  getLevel() {\n    return this.level;\n  }\n  checkLogLevel(level) {\n    return this.level !== LogLevel.Off && this.level <= level;\n  }\n}\nclass AbstractMessageLogger extends AbstractLogger {\n  constructor(logAlways) {\n    super();\n    this.logAlways = logAlways;\n  }\n  checkLogLevel(level) {\n    return this.logAlways || super.checkLogLevel(level);\n  }\n  trace(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Trace)) {\n      this.log(LogLevel.Trace, format([message, ...args], true));\n    }\n  }\n  debug(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Debug)) {\n      this.log(LogLevel.Debug, format([message, ...args]));\n    }\n  }\n  info(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Info)) {\n      this.log(LogLevel.Info, format([message, ...args]));\n    }\n  }\n  warn(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Warning)) {\n      this.log(LogLevel.Warning, format([message, ...args]));\n    }\n  }\n  error(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Error)) {\n      if (message instanceof Error) {\n        const array = Array.prototype.slice.call(arguments);\n        array[0] = message.stack;\n        this.log(LogLevel.Error, format(array));\n      } else {\n        this.log(LogLevel.Error, format([message, ...args]));\n      }\n    }\n  }\n  flush() {}\n}\nclass ConsoleLogger extends AbstractLogger {\n  constructor(logLevel = DEFAULT_LOG_LEVEL, useColors = true) {\n    super();\n    this.useColors = useColors;\n    this.setLevel(logLevel);\n  }\n  trace(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Trace)) {\n      if (this.useColors) {\n        console.log('%cTRACE', 'color: #888', message, ...args);\n      } else {\n        console.log(message, ...args);\n      }\n    }\n  }\n  debug(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Debug)) {\n      if (this.useColors) {\n        console.log('%cDEBUG', 'background: #eee; color: #888', message, ...args);\n      } else {\n        console.log(message, ...args);\n      }\n    }\n  }\n  info(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Info)) {\n      if (this.useColors) {\n        console.log('%c INFO', 'color: #33f', message, ...args);\n      } else {\n        console.log(message, ...args);\n      }\n    }\n  }\n  warn(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Warning)) {\n      if (this.useColors) {\n        console.log('%c WARN', 'color: #993', message, ...args);\n      } else {\n        console.log(message, ...args);\n      }\n    }\n  }\n  error(message, ...args) {\n    if (this.checkLogLevel(LogLevel.Error)) {\n      if (this.useColors) {\n        console.log('%c  ERR', 'color: #f33', message, ...args);\n      } else {\n        console.error(message, ...args);\n      }\n    }\n  }\n  flush() {}\n}\nclass MultiplexLogger extends AbstractLogger {\n  constructor(loggers) {\n    super();\n    this.loggers = loggers;\n    if (loggers.length) {\n      this.setLevel(loggers[0].getLevel());\n    }\n  }\n  setLevel(level) {\n    for (const logger of this.loggers) {\n      logger.setLevel(level);\n    }\n    super.setLevel(level);\n  }\n  trace(message, ...args) {\n    for (const logger of this.loggers) {\n      logger.trace(message, ...args);\n    }\n  }\n  debug(message, ...args) {\n    for (const logger of this.loggers) {\n      logger.debug(message, ...args);\n    }\n  }\n  info(message, ...args) {\n    for (const logger of this.loggers) {\n      logger.info(message, ...args);\n    }\n  }\n  warn(message, ...args) {\n    for (const logger of this.loggers) {\n      logger.warn(message, ...args);\n    }\n  }\n  error(message, ...args) {\n    for (const logger of this.loggers) {\n      logger.error(message, ...args);\n    }\n  }\n  flush() {\n    for (const logger of this.loggers) {\n      logger.flush();\n    }\n  }\n  dispose() {\n    for (const logger of this.loggers) {\n      logger.dispose();\n    }\n    super.dispose();\n  }\n}\nclass AbstractLoggerService extends Disposable {\n  constructor(logLevel, logsHome, loggerResources) {\n    super();\n    this.logLevel = logLevel;\n    this.logsHome = logsHome;\n    this._loggers = new ResourceMap();\n    this._onDidChangeLoggers = this._register(new Emitter());\n    this.onDidChangeLoggers = this._onDidChangeLoggers.event;\n    this._onDidChangeLogLevel = this._register(new Emitter());\n    this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n    this._onDidChangeVisibility = this._register(new Emitter());\n    this.onDidChangeVisibility = this._onDidChangeVisibility.event;\n    if (loggerResources) {\n      for (const loggerResource of loggerResources) {\n        this._loggers.set(loggerResource.resource, {\n          logger: undefined,\n          info: loggerResource\n        });\n      }\n    }\n  }\n  getLoggerEntry(resourceOrId) {\n    if (isString(resourceOrId)) {\n      return [...this._loggers.values()].find(logger => logger.info.id === resourceOrId);\n    }\n    return this._loggers.get(resourceOrId);\n  }\n  getLogger(resourceOrId) {\n    return this.getLoggerEntry(resourceOrId)?.logger;\n  }\n  createLogger(idOrResource, options) {\n    const resource = this.toResource(idOrResource);\n    const id = isString(idOrResource) ? idOrResource : options?.id ?? hash(resource.toString()).toString(16);\n    let logger = this._loggers.get(resource)?.logger;\n    const logLevel = options?.logLevel === 'always' ? LogLevel.Trace : options?.logLevel;\n    if (!logger) {\n      logger = this.doCreateLogger(resource, logLevel ?? this.getLogLevel(resource) ?? this.logLevel, {\n        ...options,\n        id\n      });\n    }\n    const loggerEntry = {\n      logger,\n      info: {\n        resource,\n        id,\n        logLevel,\n        name: options?.name,\n        hidden: options?.hidden,\n        extensionId: options?.extensionId,\n        when: options?.when\n      }\n    };\n    this.registerLogger(loggerEntry.info);\n    this._loggers.set(resource, loggerEntry);\n    return logger;\n  }\n  toResource(idOrResource) {\n    return isString(idOrResource) ? joinPath(this.logsHome, `${idOrResource}.log`) : idOrResource;\n  }\n  setLogLevel(arg1, arg2) {\n    if (URI.isUri(arg1)) {\n      const resource = arg1;\n      const logLevel = arg2;\n      const logger = this._loggers.get(resource);\n      if (logger && logLevel !== logger.info.logLevel) {\n        logger.info.logLevel = logLevel === this.logLevel ? undefined : logLevel;\n        logger.logger?.setLevel(logLevel);\n        this._loggers.set(logger.info.resource, logger);\n        this._onDidChangeLogLevel.fire([resource, logLevel]);\n      }\n    } else {\n      this.logLevel = arg1;\n      for (const [resource, logger] of this._loggers.entries()) {\n        if (this._loggers.get(resource)?.info.logLevel === undefined) {\n          logger.logger?.setLevel(this.logLevel);\n        }\n      }\n      this._onDidChangeLogLevel.fire(this.logLevel);\n    }\n  }\n  setVisibility(resourceOrId, visibility) {\n    const logger = this.getLoggerEntry(resourceOrId);\n    if (logger && visibility !== !logger.info.hidden) {\n      logger.info.hidden = !visibility;\n      this._loggers.set(logger.info.resource, logger);\n      this._onDidChangeVisibility.fire([logger.info.resource, visibility]);\n    }\n  }\n  getLogLevel(resource) {\n    let logLevel;\n    if (resource) {\n      logLevel = this._loggers.get(resource)?.info.logLevel;\n    }\n    return logLevel ?? this.logLevel;\n  }\n  registerLogger(resource) {\n    const existing = this._loggers.get(resource.resource);\n    if (existing) {\n      if (existing.info.hidden !== resource.hidden) {\n        this.setVisibility(resource.resource, !resource.hidden);\n      }\n    } else {\n      this._loggers.set(resource.resource, {\n        info: resource,\n        logger: undefined\n      });\n      this._onDidChangeLoggers.fire({\n        added: [resource],\n        removed: []\n      });\n    }\n  }\n  deregisterLogger(resource) {\n    const existing = this._loggers.get(resource);\n    if (existing) {\n      if (existing.logger) {\n        existing.logger.dispose();\n      }\n      this._loggers.delete(resource);\n      this._onDidChangeLoggers.fire({\n        added: [],\n        removed: [existing.info]\n      });\n    }\n  }\n  *getRegisteredLoggers() {\n    for (const entry of this._loggers.values()) {\n      yield entry.info;\n    }\n  }\n  getRegisteredLogger(resource) {\n    return this._loggers.get(resource)?.info;\n  }\n  dispose() {\n    this._loggers.forEach(logger => logger.logger?.dispose());\n    this._loggers.clear();\n    super.dispose();\n  }\n}\nclass NullLogger {\n  constructor() {\n    this.onDidChangeLogLevel = new Emitter().event;\n  }\n  setLevel(level) {}\n  getLevel() {\n    return LogLevel.Info;\n  }\n  trace(message, ...args) {}\n  debug(message, ...args) {}\n  info(message, ...args) {}\n  warn(message, ...args) {}\n  error(message, ...args) {}\n  critical(message, ...args) {}\n  dispose() {}\n  flush() {}\n}\nclass NullLogService extends NullLogger {}\nfunction getLogLevel(environmentService) {\n  if (environmentService.verbose) {\n    return LogLevel.Trace;\n  }\n  if (typeof environmentService.logLevel === 'string') {\n    const logLevel = parseLogLevel(environmentService.logLevel.toLowerCase());\n    if (logLevel !== undefined) {\n      return logLevel;\n    }\n  }\n  return DEFAULT_LOG_LEVEL;\n}\nfunction LogLevelToString(logLevel) {\n  switch (logLevel) {\n    case LogLevel.Trace:\n      return 'trace';\n    case LogLevel.Debug:\n      return 'debug';\n    case LogLevel.Info:\n      return 'info';\n    case LogLevel.Warning:\n      return 'warn';\n    case LogLevel.Error:\n      return 'error';\n    case LogLevel.Off:\n      return 'off';\n  }\n}\nfunction LogLevelToLocalizedString(logLevel) {\n  switch (logLevel) {\n    case LogLevel.Trace:\n      return {\n        original: 'Trace',\n        value: localizeWithPath(_moduleId, 0, \"Trace\")\n      };\n    case LogLevel.Debug:\n      return {\n        original: 'Debug',\n        value: localizeWithPath(_moduleId, 1, \"Debug\")\n      };\n    case LogLevel.Info:\n      return {\n        original: 'Info',\n        value: localizeWithPath(_moduleId, 2, \"Info\")\n      };\n    case LogLevel.Warning:\n      return {\n        original: 'Warning',\n        value: localizeWithPath(_moduleId, 3, \"Warning\")\n      };\n    case LogLevel.Error:\n      return {\n        original: 'Error',\n        value: localizeWithPath(_moduleId, 4, \"Error\")\n      };\n    case LogLevel.Off:\n      return {\n        original: 'Off',\n        value: localizeWithPath(_moduleId, 5, \"Off\")\n      };\n  }\n}\nfunction parseLogLevel(logLevel) {\n  switch (logLevel) {\n    case 'trace':\n      return LogLevel.Trace;\n    case 'debug':\n      return LogLevel.Debug;\n    case 'info':\n      return LogLevel.Info;\n    case 'warn':\n      return LogLevel.Warning;\n    case 'error':\n      return LogLevel.Error;\n    case 'critical':\n      return LogLevel.Error;\n    case 'off':\n      return LogLevel.Off;\n  }\n  return undefined;\n}\nconst CONTEXT_LOG_LEVEL = new RawContextKey('logLevel', LogLevelToString(LogLevel.Info));\nexport { AbstractLogger, AbstractLoggerService, AbstractMessageLogger, CONTEXT_LOG_LEVEL, ConsoleLogger, DEFAULT_LOG_LEVEL, LogLevel, LogLevelToLocalizedString, LogLevelToString, MultiplexLogger, NullLogService, NullLogger, getLogLevel, isLogLevel, log, parseLogLevel };","map":{"version":3,"names":["localizeWithPath","toErrorMessage","Emitter","hash","Disposable","ResourceMap","joinPath","isNumber","isString","URI","RawContextKey","_moduleId","isLogLevel","thing","LogLevel","DEFAULT_LOG_LEVEL","Info","log","logger","level","message","Trace","trace","Debug","debug","info","Warning","warn","Error","error","Off","format","args","verbose","result","i","length","a","JSON","stringify","e","AbstractLogger","constructor","arguments","_onDidChangeLogLevel","_register","onDidChangeLogLevel","event","setLevel","fire","getLevel","checkLogLevel","AbstractMessageLogger","logAlways","array","Array","prototype","slice","call","stack","flush","ConsoleLogger","logLevel","useColors","console","MultiplexLogger","loggers","dispose","AbstractLoggerService","logsHome","loggerResources","_loggers","_onDidChangeLoggers","onDidChangeLoggers","_onDidChangeVisibility","onDidChangeVisibility","loggerResource","set","resource","undefined","getLoggerEntry","resourceOrId","values","find","id","get","getLogger","createLogger","idOrResource","options","toResource","toString","doCreateLogger","getLogLevel","loggerEntry","name","hidden","extensionId","when","registerLogger","setLogLevel","arg1","arg2","isUri","entries","setVisibility","visibility","existing","added","removed","deregisterLogger","delete","getRegisteredLoggers","entry","getRegisteredLogger","forEach","clear","NullLogger","critical","NullLogService","environmentService","parseLogLevel","toLowerCase","LogLevelToString","LogLevelToLocalizedString","original","value","CONTEXT_LOG_LEVEL"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/platform/log/common/log.js"],"sourcesContent":["import { localizeWithPath } from '../../../nls.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport '../../../base/common/platform.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { isNumber, isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { RawContextKey } from '../../contextkey/common/contextkey.js';\nconst _moduleId = \"vs/platform/log/common/log\";\nfunction isLogLevel(thing) {\n    return isNumber(thing);\n}\nvar LogLevel;\n( ((function(LogLevel) {\n    LogLevel[LogLevel[\"Off\"] = 0] = \"Off\";\n    LogLevel[LogLevel[\"Trace\"] = 1] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 2] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n    LogLevel[LogLevel[\"Warning\"] = 4] = \"Warning\";\n    LogLevel[LogLevel[\"Error\"] = 5] = \"Error\";\n})(LogLevel || (LogLevel = {}))));\nconst DEFAULT_LOG_LEVEL = LogLevel.Info;\nfunction log(logger, level, message) {\n    switch (level) {\n        case LogLevel.Trace:\n            logger.trace(message);\n            break;\n        case LogLevel.Debug:\n            logger.debug(message);\n            break;\n        case LogLevel.Info:\n            logger.info(message);\n            break;\n        case LogLevel.Warning:\n            logger.warn(message);\n            break;\n        case LogLevel.Error:\n            logger.error(message);\n            break;\n        case LogLevel.Off:  break;\n        default: throw ( (new Error(`Invalid log level ${level}`)));\n    }\n}\nfunction format(args, verbose = false) {\n    let result = '';\n    for (let i = 0; i < args.length; i++) {\n        let a = args[i];\n        if (a instanceof Error) {\n            a = toErrorMessage(a, verbose);\n        }\n        if (typeof a === 'object') {\n            try {\n                a = JSON.stringify(a);\n            }\n            catch (e) { }\n        }\n        result += (i > 0 ? ' ' : '') + a;\n    }\n    return result;\n}\nclass AbstractLogger extends Disposable {\n    constructor() {\n        super(...arguments);\n        this.level = DEFAULT_LOG_LEVEL;\n        this._onDidChangeLogLevel = this._register(( (new Emitter())));\n        this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n    }\n    setLevel(level) {\n        if (this.level !== level) {\n            this.level = level;\n            this._onDidChangeLogLevel.fire(this.level);\n        }\n    }\n    getLevel() {\n        return this.level;\n    }\n    checkLogLevel(level) {\n        return this.level !== LogLevel.Off && this.level <= level;\n    }\n}\nclass AbstractMessageLogger extends AbstractLogger {\n    constructor(logAlways) {\n        super();\n        this.logAlways = logAlways;\n    }\n    checkLogLevel(level) {\n        return this.logAlways || super.checkLogLevel(level);\n    }\n    trace(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Trace)) {\n            this.log(LogLevel.Trace, format([message, ...args], true));\n        }\n    }\n    debug(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Debug)) {\n            this.log(LogLevel.Debug, format([message, ...args]));\n        }\n    }\n    info(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Info)) {\n            this.log(LogLevel.Info, format([message, ...args]));\n        }\n    }\n    warn(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Warning)) {\n            this.log(LogLevel.Warning, format([message, ...args]));\n        }\n    }\n    error(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Error)) {\n            if (message instanceof Error) {\n                const array = Array.prototype.slice.call(arguments);\n                array[0] = message.stack;\n                this.log(LogLevel.Error, format(array));\n            }\n            else {\n                this.log(LogLevel.Error, format([message, ...args]));\n            }\n        }\n    }\n    flush() { }\n}\nclass ConsoleLogger extends AbstractLogger {\n    constructor(logLevel = DEFAULT_LOG_LEVEL, useColors = true) {\n        super();\n        this.useColors = useColors;\n        this.setLevel(logLevel);\n    }\n    trace(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Trace)) {\n            if (this.useColors) {\n                console.log('%cTRACE', 'color: #888', message, ...args);\n            }\n            else {\n                console.log(message, ...args);\n            }\n        }\n    }\n    debug(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Debug)) {\n            if (this.useColors) {\n                console.log('%cDEBUG', 'background: #eee; color: #888', message, ...args);\n            }\n            else {\n                console.log(message, ...args);\n            }\n        }\n    }\n    info(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Info)) {\n            if (this.useColors) {\n                console.log('%c INFO', 'color: #33f', message, ...args);\n            }\n            else {\n                console.log(message, ...args);\n            }\n        }\n    }\n    warn(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Warning)) {\n            if (this.useColors) {\n                console.log('%c WARN', 'color: #993', message, ...args);\n            }\n            else {\n                console.log(message, ...args);\n            }\n        }\n    }\n    error(message, ...args) {\n        if (this.checkLogLevel(LogLevel.Error)) {\n            if (this.useColors) {\n                console.log('%c  ERR', 'color: #f33', message, ...args);\n            }\n            else {\n                console.error(message, ...args);\n            }\n        }\n    }\n    flush() {\n    }\n}\nclass MultiplexLogger extends AbstractLogger {\n    constructor(loggers) {\n        super();\n        this.loggers = loggers;\n        if (loggers.length) {\n            this.setLevel(loggers[0].getLevel());\n        }\n    }\n    setLevel(level) {\n        for (const logger of this.loggers) {\n            logger.setLevel(level);\n        }\n        super.setLevel(level);\n    }\n    trace(message, ...args) {\n        for (const logger of this.loggers) {\n            logger.trace(message, ...args);\n        }\n    }\n    debug(message, ...args) {\n        for (const logger of this.loggers) {\n            logger.debug(message, ...args);\n        }\n    }\n    info(message, ...args) {\n        for (const logger of this.loggers) {\n            logger.info(message, ...args);\n        }\n    }\n    warn(message, ...args) {\n        for (const logger of this.loggers) {\n            logger.warn(message, ...args);\n        }\n    }\n    error(message, ...args) {\n        for (const logger of this.loggers) {\n            logger.error(message, ...args);\n        }\n    }\n    flush() {\n        for (const logger of this.loggers) {\n            logger.flush();\n        }\n    }\n    dispose() {\n        for (const logger of this.loggers) {\n            logger.dispose();\n        }\n        super.dispose();\n    }\n}\nclass AbstractLoggerService extends Disposable {\n    constructor(logLevel, logsHome, loggerResources) {\n        super();\n        this.logLevel = logLevel;\n        this.logsHome = logsHome;\n        this._loggers = ( (new ResourceMap()));\n        this._onDidChangeLoggers = this._register(( (new Emitter())));\n        this.onDidChangeLoggers = this._onDidChangeLoggers.event;\n        this._onDidChangeLogLevel = this._register(( (new Emitter())));\n        this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;\n        this._onDidChangeVisibility = this._register(( (new Emitter())));\n        this.onDidChangeVisibility = this._onDidChangeVisibility.event;\n        if (loggerResources) {\n            for (const loggerResource of loggerResources) {\n                this._loggers.set(loggerResource.resource, { logger: undefined, info: loggerResource });\n            }\n        }\n    }\n    getLoggerEntry(resourceOrId) {\n        if (isString(resourceOrId)) {\n            return [...( (this._loggers.values()))].find(logger => logger.info.id === resourceOrId);\n        }\n        return this._loggers.get(resourceOrId);\n    }\n    getLogger(resourceOrId) {\n        return this.getLoggerEntry(resourceOrId)?.logger;\n    }\n    createLogger(idOrResource, options) {\n        const resource = this.toResource(idOrResource);\n        const id = isString(idOrResource) ? idOrResource : (options?.id ?? ( (hash(( (resource.toString()))).toString(16))));\n        let logger = this._loggers.get(resource)?.logger;\n        const logLevel = options?.logLevel === 'always' ? LogLevel.Trace : options?.logLevel;\n        if (!logger) {\n            logger = this.doCreateLogger(resource, logLevel ?? this.getLogLevel(resource) ?? this.logLevel, { ...options, id });\n        }\n        const loggerEntry = {\n            logger,\n            info: { resource, id, logLevel, name: options?.name, hidden: options?.hidden, extensionId: options?.extensionId, when: options?.when }\n        };\n        this.registerLogger(loggerEntry.info);\n        this._loggers.set(resource, loggerEntry);\n        return logger;\n    }\n    toResource(idOrResource) {\n        return isString(idOrResource) ? joinPath(this.logsHome, `${idOrResource}.log`) : idOrResource;\n    }\n    setLogLevel(arg1, arg2) {\n        if (URI.isUri(arg1)) {\n            const resource = arg1;\n            const logLevel = arg2;\n            const logger = this._loggers.get(resource);\n            if (logger && logLevel !== logger.info.logLevel) {\n                logger.info.logLevel = logLevel === this.logLevel ? undefined : logLevel;\n                logger.logger?.setLevel(logLevel);\n                this._loggers.set(logger.info.resource, logger);\n                this._onDidChangeLogLevel.fire([resource, logLevel]);\n            }\n        }\n        else {\n            this.logLevel = arg1;\n            for (const [resource, logger] of this._loggers.entries()) {\n                if (this._loggers.get(resource)?.info.logLevel === undefined) {\n                    logger.logger?.setLevel(this.logLevel);\n                }\n            }\n            this._onDidChangeLogLevel.fire(this.logLevel);\n        }\n    }\n    setVisibility(resourceOrId, visibility) {\n        const logger = this.getLoggerEntry(resourceOrId);\n        if (logger && visibility !== !logger.info.hidden) {\n            logger.info.hidden = !visibility;\n            this._loggers.set(logger.info.resource, logger);\n            this._onDidChangeVisibility.fire([logger.info.resource, visibility]);\n        }\n    }\n    getLogLevel(resource) {\n        let logLevel;\n        if (resource) {\n            logLevel = this._loggers.get(resource)?.info.logLevel;\n        }\n        return logLevel ?? this.logLevel;\n    }\n    registerLogger(resource) {\n        const existing = this._loggers.get(resource.resource);\n        if (existing) {\n            if (existing.info.hidden !== resource.hidden) {\n                this.setVisibility(resource.resource, !resource.hidden);\n            }\n        }\n        else {\n            this._loggers.set(resource.resource, { info: resource, logger: undefined });\n            this._onDidChangeLoggers.fire({ added: [resource], removed: [] });\n        }\n    }\n    deregisterLogger(resource) {\n        const existing = this._loggers.get(resource);\n        if (existing) {\n            if (existing.logger) {\n                existing.logger.dispose();\n            }\n            this._loggers.delete(resource);\n            this._onDidChangeLoggers.fire({ added: [], removed: [existing.info] });\n        }\n    }\n    *getRegisteredLoggers() {\n        for (const entry of ( (this._loggers.values()))) {\n            yield entry.info;\n        }\n    }\n    getRegisteredLogger(resource) {\n        return this._loggers.get(resource)?.info;\n    }\n    dispose() {\n        this._loggers.forEach(logger => logger.logger?.dispose());\n        this._loggers.clear();\n        super.dispose();\n    }\n}\nclass NullLogger {\n    constructor() {\n        this.onDidChangeLogLevel = ( (new Emitter())).event;\n    }\n    setLevel(level) { }\n    getLevel() { return LogLevel.Info; }\n    trace(message, ...args) { }\n    debug(message, ...args) { }\n    info(message, ...args) { }\n    warn(message, ...args) { }\n    error(message, ...args) { }\n    critical(message, ...args) { }\n    dispose() { }\n    flush() { }\n}\nclass NullLogService extends NullLogger {\n}\nfunction getLogLevel(environmentService) {\n    if (environmentService.verbose) {\n        return LogLevel.Trace;\n    }\n    if (typeof environmentService.logLevel === 'string') {\n        const logLevel = parseLogLevel(environmentService.logLevel.toLowerCase());\n        if (logLevel !== undefined) {\n            return logLevel;\n        }\n    }\n    return DEFAULT_LOG_LEVEL;\n}\nfunction LogLevelToString(logLevel) {\n    switch (logLevel) {\n        case LogLevel.Trace: return 'trace';\n        case LogLevel.Debug: return 'debug';\n        case LogLevel.Info: return 'info';\n        case LogLevel.Warning: return 'warn';\n        case LogLevel.Error: return 'error';\n        case LogLevel.Off: return 'off';\n    }\n}\nfunction LogLevelToLocalizedString(logLevel) {\n    switch (logLevel) {\n        case LogLevel.Trace: return { original: 'Trace', value: ( localizeWithPath(_moduleId, 0, \"Trace\")) };\n        case LogLevel.Debug: return { original: 'Debug', value: ( localizeWithPath(_moduleId, 1, \"Debug\")) };\n        case LogLevel.Info: return { original: 'Info', value: ( localizeWithPath(_moduleId, 2, \"Info\")) };\n        case LogLevel.Warning: return { original: 'Warning', value: ( localizeWithPath(_moduleId, 3, \"Warning\")) };\n        case LogLevel.Error: return { original: 'Error', value: ( localizeWithPath(_moduleId, 4, \"Error\")) };\n        case LogLevel.Off: return { original: 'Off', value: ( localizeWithPath(_moduleId, 5, \"Off\")) };\n    }\n}\nfunction parseLogLevel(logLevel) {\n    switch (logLevel) {\n        case 'trace':\n            return LogLevel.Trace;\n        case 'debug':\n            return LogLevel.Debug;\n        case 'info':\n            return LogLevel.Info;\n        case 'warn':\n            return LogLevel.Warning;\n        case 'error':\n            return LogLevel.Error;\n        case 'critical':\n            return LogLevel.Error;\n        case 'off':\n            return LogLevel.Off;\n    }\n    return undefined;\n}\nconst CONTEXT_LOG_LEVEL = ( (new RawContextKey('logLevel', LogLevelToString(LogLevel.Info))));\nexport { AbstractLogger, AbstractLoggerService, AbstractMessageLogger, CONTEXT_LOG_LEVEL, ConsoleLogger, DEFAULT_LOG_LEVEL, LogLevel, LogLevelToLocalizedString, LogLevelToString, MultiplexLogger, NullLogService, NullLogger, getLogLevel, isLogLevel, log, parseLogLevel };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}