{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DocumentOnTypeFormattingFeature = exports.DocumentRangeFormattingFeature = exports.DocumentFormattingFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\nvar FileFormattingOptions;\n(function (FileFormattingOptions) {\n  function fromConfiguration(document) {\n    const filesConfig = vscode_1.workspace.getConfiguration('files', document);\n    return {\n      trimTrailingWhitespace: filesConfig.get('trimTrailingWhitespace'),\n      trimFinalNewlines: filesConfig.get('trimFinalNewlines'),\n      insertFinalNewline: filesConfig.get('insertFinalNewline')\n    };\n  }\n  FileFormattingOptions.fromConfiguration = fromConfiguration;\n})(FileFormattingOptions || (FileFormattingOptions = {}));\nclass DocumentFormattingFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DocumentFormattingRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'formatting').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.documentFormattingProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideDocumentFormattingEdits: (document, options, token) => {\n        const client = this._client;\n        const provideDocumentFormattingEdits = (document, options, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asTextEdits(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDocumentFormattingEdits ? middleware.provideDocumentFormattingEdits(document, options, token, provideDocumentFormattingEdits) : provideDocumentFormattingEdits(document, options, token);\n      }\n    };\n    return [vscode_1.languages.registerDocumentFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n  }\n}\nexports.DocumentFormattingFeature = DocumentFormattingFeature;\nclass DocumentRangeFormattingFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rangeFormatting');\n    capability.dynamicRegistration = true;\n    capability.rangesSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.documentRangeFormattingProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideDocumentRangeFormattingEdits: (document, range, options, token) => {\n        const client = this._client;\n        const provideDocumentRangeFormattingEdits = (document, range, options, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            range: client.code2ProtocolConverter.asRange(range),\n            options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asTextEdits(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDocumentRangeFormattingEdits ? middleware.provideDocumentRangeFormattingEdits(document, range, options, token, provideDocumentRangeFormattingEdits) : provideDocumentRangeFormattingEdits(document, range, options, token);\n      }\n    };\n    if (options.rangesSupport) {\n      provider.provideDocumentRangesFormattingEdits = (document, ranges, options, token) => {\n        const client = this._client;\n        const provideDocumentRangesFormattingEdits = (document, ranges, options, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            ranges: client.code2ProtocolConverter.asRanges(ranges),\n            options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangesFormattingRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asTextEdits(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentRangesFormattingRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDocumentRangesFormattingEdits ? middleware.provideDocumentRangesFormattingEdits(document, ranges, options, token, provideDocumentRangesFormattingEdits) : provideDocumentRangesFormattingEdits(document, ranges, options, token);\n      };\n    }\n    return [vscode_1.languages.registerDocumentRangeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n  }\n}\nexports.DocumentRangeFormattingFeature = DocumentRangeFormattingFeature;\nclass DocumentOnTypeFormattingFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'onTypeFormatting').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.documentOnTypeFormattingProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideOnTypeFormattingEdits: (document, position, ch, options, token) => {\n        const client = this._client;\n        const provideOnTypeFormattingEdits = (document, position, ch, options, token) => {\n          let params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            position: client.code2ProtocolConverter.asPosition(position),\n            ch: ch,\n            options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asTextEdits(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideOnTypeFormattingEdits ? middleware.provideOnTypeFormattingEdits(document, position, ch, options, token, provideOnTypeFormattingEdits) : provideOnTypeFormattingEdits(document, position, ch, options, token);\n      }\n    };\n    const moreTriggerCharacter = options.moreTriggerCharacter || [];\n    return [vscode_1.languages.registerOnTypeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, options.firstTriggerCharacter, ...moreTriggerCharacter), provider];\n  }\n}\nexports.DocumentOnTypeFormattingFeature = DocumentOnTypeFormattingFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","DocumentOnTypeFormattingFeature","DocumentRangeFormattingFeature","DocumentFormattingFeature","vscode_1","require","vscode_languageserver_protocol_1","UUID","features_1","FileFormattingOptions","fromConfiguration","document","filesConfig","workspace","getConfiguration","trimTrailingWhitespace","get","trimFinalNewlines","insertFinalNewline","TextDocumentLanguageFeature","constructor","client","DocumentFormattingRequest","type","fillClientCapabilities","capabilities","ensure","dynamicRegistration","initialize","documentSelector","options","getRegistrationOptions","documentFormattingProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","selector","provider","provideDocumentFormattingEdits","token","_client","params","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","asFormattingOptions","sendRequest","then","result","isCancellationRequested","protocol2CodeConverter","asTextEdits","error","handleFailedRequest","middleware","languages","registerDocumentFormattingEditProvider","asDocumentSelector","DocumentRangeFormattingRequest","capability","rangesSupport","documentRangeFormattingProvider","provideDocumentRangeFormattingEdits","range","asRange","provideDocumentRangesFormattingEdits","ranges","asRanges","DocumentRangesFormattingRequest","registerDocumentRangeFormattingEditProvider","DocumentOnTypeFormattingRequest","documentOnTypeFormattingProvider","provideOnTypeFormattingEdits","position","ch","asPosition","moreTriggerCharacter","registerOnTypeFormattingEditProvider","firstTriggerCharacter"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/formatting.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentOnTypeFormattingFeature = exports.DocumentRangeFormattingFeature = exports.DocumentFormattingFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\nvar FileFormattingOptions;\n(function (FileFormattingOptions) {\n    function fromConfiguration(document) {\n        const filesConfig = vscode_1.workspace.getConfiguration('files', document);\n        return {\n            trimTrailingWhitespace: filesConfig.get('trimTrailingWhitespace'),\n            trimFinalNewlines: filesConfig.get('trimFinalNewlines'),\n            insertFinalNewline: filesConfig.get('insertFinalNewline'),\n        };\n    }\n    FileFormattingOptions.fromConfiguration = fromConfiguration;\n})(FileFormattingOptions || (FileFormattingOptions = {}));\nclass DocumentFormattingFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DocumentFormattingRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'formatting').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.documentFormattingProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideDocumentFormattingEdits: (document, options, token) => {\n                const client = this._client;\n                const provideDocumentFormattingEdits = (document, options, token) => {\n                    const params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, params, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asTextEdits(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDocumentFormattingEdits\n                    ? middleware.provideDocumentFormattingEdits(document, options, token, provideDocumentFormattingEdits)\n                    : provideDocumentFormattingEdits(document, options, token);\n            }\n        };\n        return [vscode_1.languages.registerDocumentFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n    }\n}\nexports.DocumentFormattingFeature = DocumentFormattingFeature;\nclass DocumentRangeFormattingFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rangeFormatting');\n        capability.dynamicRegistration = true;\n        capability.rangesSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.documentRangeFormattingProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideDocumentRangeFormattingEdits: (document, range, options, token) => {\n                const client = this._client;\n                const provideDocumentRangeFormattingEdits = (document, range, options, token) => {\n                    const params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        range: client.code2ProtocolConverter.asRange(range),\n                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, params, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asTextEdits(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDocumentRangeFormattingEdits\n                    ? middleware.provideDocumentRangeFormattingEdits(document, range, options, token, provideDocumentRangeFormattingEdits)\n                    : provideDocumentRangeFormattingEdits(document, range, options, token);\n            }\n        };\n        if (options.rangesSupport) {\n            provider.provideDocumentRangesFormattingEdits = (document, ranges, options, token) => {\n                const client = this._client;\n                const provideDocumentRangesFormattingEdits = (document, ranges, options, token) => {\n                    const params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        ranges: client.code2ProtocolConverter.asRanges(ranges),\n                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangesFormattingRequest.type, params, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asTextEdits(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentRangesFormattingRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDocumentRangesFormattingEdits\n                    ? middleware.provideDocumentRangesFormattingEdits(document, ranges, options, token, provideDocumentRangesFormattingEdits)\n                    : provideDocumentRangesFormattingEdits(document, ranges, options, token);\n            };\n        }\n        return [vscode_1.languages.registerDocumentRangeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n    }\n}\nexports.DocumentRangeFormattingFeature = DocumentRangeFormattingFeature;\nclass DocumentOnTypeFormattingFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'onTypeFormatting').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.documentOnTypeFormattingProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideOnTypeFormattingEdits: (document, position, ch, options, token) => {\n                const client = this._client;\n                const provideOnTypeFormattingEdits = (document, position, ch, options, token) => {\n                    let params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        position: client.code2ProtocolConverter.asPosition(position),\n                        ch: ch,\n                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, params, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asTextEdits(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideOnTypeFormattingEdits\n                    ? middleware.provideOnTypeFormattingEdits(document, position, ch, options, token, provideOnTypeFormattingEdits)\n                    : provideOnTypeFormattingEdits(document, position, ch, options, token);\n            }\n        };\n        const moreTriggerCharacter = options.moreTriggerCharacter || [];\n        return [vscode_1.languages.registerOnTypeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, options.firstTriggerCharacter, ...moreTriggerCharacter), provider];\n    }\n}\nexports.DocumentOnTypeFormattingFeature = DocumentOnTypeFormattingFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}