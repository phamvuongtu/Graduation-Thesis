{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefinitionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DefinitionFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DefinitionRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    let definitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'definition');\n    definitionSupport.dynamicRegistration = true;\n    definitionSupport.linkSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.definitionProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideDefinition: (document, position, token) => {\n        const client = this._client;\n        const provideDefinition = (document, position, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asDefinitionResult(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDefinition ? middleware.provideDefinition(document, position, token, provideDefinition) : provideDefinition(document, position, token);\n      }\n    };\n    return [this.registerProvider(selector, provider), provider];\n  }\n  registerProvider(selector, provider) {\n    return vscode_1.languages.registerDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n  }\n}\nexports.DefinitionFeature = DefinitionFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","DefinitionFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","UUID","TextDocumentLanguageFeature","constructor","client","DefinitionRequest","type","fillClientCapabilities","capabilities","definitionSupport","ensure","dynamicRegistration","linkSupport","initialize","documentSelector","options","getRegistrationOptions","definitionProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","selector","provider","provideDefinition","document","position","token","_client","sendRequest","code2ProtocolConverter","asTextDocumentPositionParams","then","result","isCancellationRequested","protocol2CodeConverter","asDefinitionResult","error","handleFailedRequest","middleware","registerProvider","languages","registerDefinitionProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/definition.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefinitionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DefinitionFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DefinitionRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        let definitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'definition');\n        definitionSupport.dynamicRegistration = true;\n        definitionSupport.linkSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.definitionProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideDefinition: (document, position, token) => {\n                const client = this._client;\n                const provideDefinition = (document, position, token) => {\n                    return client.sendRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asDefinitionResult(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDefinition\n                    ? middleware.provideDefinition(document, position, token, provideDefinition)\n                    : provideDefinition(document, position, token);\n            }\n        };\n        return [this.registerProvider(selector, provider), provider];\n    }\n    registerProvider(selector, provider) {\n        return vscode_1.languages.registerDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n    }\n}\nexports.DefinitionFeature = DefinitionFeature;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMC,gCAAgC,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAClF,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMG,IAAI,GAAGH,OAAO,CAAC,cAAc,CAAC;AACpC,MAAMF,iBAAiB,SAASI,UAAU,CAACE,2BAA2B,CAAC;EACnEC,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAACA,MAAM,EAAEL,gCAAgC,CAACM,iBAAiB,CAACC,IAAI,CAAC;EAC1E;EACAC,sBAAsBA,CAACC,YAAY,EAAE;IACjC,IAAIC,iBAAiB,GAAG,CAAC,CAAC,EAAET,UAAU,CAACU,MAAM,EAAE,CAAC,CAAC,EAAEV,UAAU,CAACU,MAAM,EAAEF,YAAY,EAAE,cAAc,CAAC,EAAE,YAAY,CAAC;IAClHC,iBAAiB,CAACE,mBAAmB,GAAG,IAAI;IAC5CF,iBAAiB,CAACG,WAAW,GAAG,IAAI;EACxC;EACAC,UAAUA,CAACL,YAAY,EAAEM,gBAAgB,EAAE;IACvC,MAAMC,OAAO,GAAG,IAAI,CAACC,sBAAsB,CAACF,gBAAgB,EAAEN,YAAY,CAACS,kBAAkB,CAAC;IAC9F,IAAI,CAACF,OAAO,EAAE;MACV;IACJ;IACA,IAAI,CAACG,QAAQ,CAAC;MAAEC,EAAE,EAAElB,IAAI,CAACmB,YAAY,CAAC,CAAC;MAAEC,eAAe,EAAEN;IAAQ,CAAC,CAAC;EACxE;EACAO,wBAAwBA,CAACP,OAAO,EAAE;IAC9B,MAAMQ,QAAQ,GAAGR,OAAO,CAACD,gBAAgB;IACzC,MAAMU,QAAQ,GAAG;MACbC,iBAAiB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;QAC9C,MAAMxB,MAAM,GAAG,IAAI,CAACyB,OAAO;QAC3B,MAAMJ,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;UACrD,OAAOxB,MAAM,CAAC0B,WAAW,CAAC/B,gCAAgC,CAACM,iBAAiB,CAACC,IAAI,EAAEF,MAAM,CAAC2B,sBAAsB,CAACC,4BAA4B,CAACN,QAAQ,EAAEC,QAAQ,CAAC,EAAEC,KAAK,CAAC,CAACK,IAAI,CAAEC,MAAM,IAAK;YACvL,IAAIN,KAAK,CAACO,uBAAuB,EAAE;cAC/B,OAAO,IAAI;YACf;YACA,OAAO/B,MAAM,CAACgC,sBAAsB,CAACC,kBAAkB,CAACH,MAAM,EAAEN,KAAK,CAAC;UAC1E,CAAC,EAAGU,KAAK,IAAK;YACV,OAAOlC,MAAM,CAACmC,mBAAmB,CAACxC,gCAAgC,CAACM,iBAAiB,CAACC,IAAI,EAAEsB,KAAK,EAAEU,KAAK,EAAE,IAAI,CAAC;UAClH,CAAC,CAAC;QACN,CAAC;QACD,MAAME,UAAU,GAAGpC,MAAM,CAACoC,UAAU;QACpC,OAAOA,UAAU,CAACf,iBAAiB,GAC7Be,UAAU,CAACf,iBAAiB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEH,iBAAiB,CAAC,GAC1EA,iBAAiB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,CAAC;MACtD;IACJ,CAAC;IACD,OAAO,CAAC,IAAI,CAACa,gBAAgB,CAAClB,QAAQ,EAAEC,QAAQ,CAAC,EAAEA,QAAQ,CAAC;EAChE;EACAiB,gBAAgBA,CAAClB,QAAQ,EAAEC,QAAQ,EAAE;IACjC,OAAO3B,QAAQ,CAAC6C,SAAS,CAACC,0BAA0B,CAAC,IAAI,CAACd,OAAO,CAACO,sBAAsB,CAACQ,kBAAkB,CAACrB,QAAQ,CAAC,EAAEC,QAAQ,CAAC;EACpI;AACJ;AACA9B,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}