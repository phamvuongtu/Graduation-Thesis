{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst messages_1 = require(\"./messages\");\n/**\n * A notebook cell kind.\n *\n * @since 3.17.0\n */\nvar NotebookCellKind;\n(function (NotebookCellKind) {\n  /**\n   * A markup-cell is formatted source that is used for display.\n   */\n  NotebookCellKind.Markup = 1;\n  /**\n   * A code-cell is source code.\n   */\n  NotebookCellKind.Code = 2;\n  function is(value) {\n    return value === 1 || value === 2;\n  }\n  NotebookCellKind.is = is;\n})(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));\nvar ExecutionSummary;\n(function (ExecutionSummary) {\n  function create(executionOrder, success) {\n    const result = {\n      executionOrder\n    };\n    if (success === true || success === false) {\n      result.success = success;\n    }\n    return result;\n  }\n  ExecutionSummary.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));\n  }\n  ExecutionSummary.is = is;\n  function equals(one, other) {\n    if (one === other) {\n      return true;\n    }\n    if (one === null || one === undefined || other === null || other === undefined) {\n      return false;\n    }\n    return one.executionOrder === other.executionOrder && one.success === other.success;\n  }\n  ExecutionSummary.equals = equals;\n})(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));\nvar NotebookCell;\n(function (NotebookCell) {\n  function create(kind, document) {\n    return {\n      kind,\n      document\n    };\n  }\n  NotebookCell.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));\n  }\n  NotebookCell.is = is;\n  function diff(one, two) {\n    const result = new Set();\n    if (one.document !== two.document) {\n      result.add('document');\n    }\n    if (one.kind !== two.kind) {\n      result.add('kind');\n    }\n    if (one.executionSummary !== two.executionSummary) {\n      result.add('executionSummary');\n    }\n    if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {\n      result.add('metadata');\n    }\n    if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {\n      result.add('executionSummary');\n    }\n    return result;\n  }\n  NotebookCell.diff = diff;\n  function equalsMetadata(one, other) {\n    if (one === other) {\n      return true;\n    }\n    if (one === null || one === undefined || other === null || other === undefined) {\n      return false;\n    }\n    if (typeof one !== typeof other) {\n      return false;\n    }\n    if (typeof one !== 'object') {\n      return false;\n    }\n    const oneArray = Array.isArray(one);\n    const otherArray = Array.isArray(other);\n    if (oneArray !== otherArray) {\n      return false;\n    }\n    if (oneArray && otherArray) {\n      if (one.length !== other.length) {\n        return false;\n      }\n      for (let i = 0; i < one.length; i++) {\n        if (!equalsMetadata(one[i], other[i])) {\n          return false;\n        }\n      }\n    }\n    if (Is.objectLiteral(one) && Is.objectLiteral(other)) {\n      const oneKeys = Object.keys(one);\n      const otherKeys = Object.keys(other);\n      if (oneKeys.length !== otherKeys.length) {\n        return false;\n      }\n      oneKeys.sort();\n      otherKeys.sort();\n      if (!equalsMetadata(oneKeys, otherKeys)) {\n        return false;\n      }\n      for (let i = 0; i < oneKeys.length; i++) {\n        const prop = oneKeys[i];\n        if (!equalsMetadata(one[prop], other[prop])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n})(NotebookCell || (exports.NotebookCell = NotebookCell = {}));\nvar NotebookDocument;\n(function (NotebookDocument) {\n  function create(uri, notebookType, version, cells) {\n    return {\n      uri,\n      notebookType,\n      version,\n      cells\n    };\n  }\n  NotebookDocument.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);\n  }\n  NotebookDocument.is = is;\n})(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));\nvar NotebookDocumentSyncRegistrationType;\n(function (NotebookDocumentSyncRegistrationType) {\n  NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';\n  NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;\n  NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);\n})(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));\n/**\n * A notification sent when a notebook opens.\n *\n * @since 3.17.0\n */\nvar DidOpenNotebookDocumentNotification;\n(function (DidOpenNotebookDocumentNotification) {\n  DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';\n  DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);\n  DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));\nvar NotebookCellArrayChange;\n(function (NotebookCellArrayChange) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));\n  }\n  NotebookCellArrayChange.is = is;\n  function create(start, deleteCount, cells) {\n    const result = {\n      start,\n      deleteCount\n    };\n    if (cells !== undefined) {\n      result.cells = cells;\n    }\n    return result;\n  }\n  NotebookCellArrayChange.create = create;\n})(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));\nvar DidChangeNotebookDocumentNotification;\n(function (DidChangeNotebookDocumentNotification) {\n  DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';\n  DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);\n  DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook document is saved.\n *\n * @since 3.17.0\n */\nvar DidSaveNotebookDocumentNotification;\n(function (DidSaveNotebookDocumentNotification) {\n  DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';\n  DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);\n  DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook closes.\n *\n * @since 3.17.0\n */\nvar DidCloseNotebookDocumentNotification;\n(function (DidCloseNotebookDocumentNotification) {\n  DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';\n  DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);\n  DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","DidCloseNotebookDocumentNotification","DidSaveNotebookDocumentNotification","DidChangeNotebookDocumentNotification","NotebookCellArrayChange","DidOpenNotebookDocumentNotification","NotebookDocumentSyncRegistrationType","NotebookDocument","NotebookCell","ExecutionSummary","NotebookCellKind","vscode_languageserver_types_1","require","Is","messages_1","Markup","Code","is","create","executionOrder","success","result","candidate","objectLiteral","uinteger","undefined","boolean","equals","one","other","kind","document","DocumentUri","metadata","diff","two","Set","add","executionSummary","equalsMetadata","oneArray","Array","isArray","otherArray","length","i","oneKeys","keys","otherKeys","sort","prop","uri","notebookType","version","cells","string","integer","typedArray","method","messageDirection","MessageDirection","clientToServer","type","RegistrationType","ProtocolNotificationType","registrationMethod","start","deleteCount"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst messages_1 = require(\"./messages\");\n/**\n * A notebook cell kind.\n *\n * @since 3.17.0\n */\nvar NotebookCellKind;\n(function (NotebookCellKind) {\n    /**\n     * A markup-cell is formatted source that is used for display.\n     */\n    NotebookCellKind.Markup = 1;\n    /**\n     * A code-cell is source code.\n     */\n    NotebookCellKind.Code = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    NotebookCellKind.is = is;\n})(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));\nvar ExecutionSummary;\n(function (ExecutionSummary) {\n    function create(executionOrder, success) {\n        const result = { executionOrder };\n        if (success === true || success === false) {\n            result.success = success;\n        }\n        return result;\n    }\n    ExecutionSummary.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));\n    }\n    ExecutionSummary.is = is;\n    function equals(one, other) {\n        if (one === other) {\n            return true;\n        }\n        if (one === null || one === undefined || other === null || other === undefined) {\n            return false;\n        }\n        return one.executionOrder === other.executionOrder && one.success === other.success;\n    }\n    ExecutionSummary.equals = equals;\n})(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));\nvar NotebookCell;\n(function (NotebookCell) {\n    function create(kind, document) {\n        return { kind, document };\n    }\n    NotebookCell.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&\n            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));\n    }\n    NotebookCell.is = is;\n    function diff(one, two) {\n        const result = new Set();\n        if (one.document !== two.document) {\n            result.add('document');\n        }\n        if (one.kind !== two.kind) {\n            result.add('kind');\n        }\n        if (one.executionSummary !== two.executionSummary) {\n            result.add('executionSummary');\n        }\n        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {\n            result.add('metadata');\n        }\n        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {\n            result.add('executionSummary');\n        }\n        return result;\n    }\n    NotebookCell.diff = diff;\n    function equalsMetadata(one, other) {\n        if (one === other) {\n            return true;\n        }\n        if (one === null || one === undefined || other === null || other === undefined) {\n            return false;\n        }\n        if (typeof one !== typeof other) {\n            return false;\n        }\n        if (typeof one !== 'object') {\n            return false;\n        }\n        const oneArray = Array.isArray(one);\n        const otherArray = Array.isArray(other);\n        if (oneArray !== otherArray) {\n            return false;\n        }\n        if (oneArray && otherArray) {\n            if (one.length !== other.length) {\n                return false;\n            }\n            for (let i = 0; i < one.length; i++) {\n                if (!equalsMetadata(one[i], other[i])) {\n                    return false;\n                }\n            }\n        }\n        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {\n            const oneKeys = Object.keys(one);\n            const otherKeys = Object.keys(other);\n            if (oneKeys.length !== otherKeys.length) {\n                return false;\n            }\n            oneKeys.sort();\n            otherKeys.sort();\n            if (!equalsMetadata(oneKeys, otherKeys)) {\n                return false;\n            }\n            for (let i = 0; i < oneKeys.length; i++) {\n                const prop = oneKeys[i];\n                if (!equalsMetadata(one[prop], other[prop])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n})(NotebookCell || (exports.NotebookCell = NotebookCell = {}));\nvar NotebookDocument;\n(function (NotebookDocument) {\n    function create(uri, notebookType, version, cells) {\n        return { uri, notebookType, version, cells };\n    }\n    NotebookDocument.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);\n    }\n    NotebookDocument.is = is;\n})(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));\nvar NotebookDocumentSyncRegistrationType;\n(function (NotebookDocumentSyncRegistrationType) {\n    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';\n    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;\n    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);\n})(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));\n/**\n * A notification sent when a notebook opens.\n *\n * @since 3.17.0\n */\nvar DidOpenNotebookDocumentNotification;\n(function (DidOpenNotebookDocumentNotification) {\n    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';\n    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);\n    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));\nvar NotebookCellArrayChange;\n(function (NotebookCellArrayChange) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));\n    }\n    NotebookCellArrayChange.is = is;\n    function create(start, deleteCount, cells) {\n        const result = { start, deleteCount };\n        if (cells !== undefined) {\n            result.cells = cells;\n        }\n        return result;\n    }\n    NotebookCellArrayChange.create = create;\n})(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));\nvar DidChangeNotebookDocumentNotification;\n(function (DidChangeNotebookDocumentNotification) {\n    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';\n    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);\n    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook document is saved.\n *\n * @since 3.17.0\n */\nvar DidSaveNotebookDocumentNotification;\n(function (DidSaveNotebookDocumentNotification) {\n    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';\n    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);\n    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook closes.\n *\n * @since 3.17.0\n */\nvar DidCloseNotebookDocumentNotification;\n(function (DidCloseNotebookDocumentNotification) {\n    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';\n    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);\n    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}