{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst Is = require(\"./utils/is\");\nconst features_1 = require(\"./features\");\nclass RenameFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.RenameRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    let rename = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rename');\n    rename.dynamicRegistration = true;\n    rename.prepareSupport = true;\n    rename.prepareSupportDefaultBehavior = vscode_languageserver_protocol_1.PrepareSupportDefaultBehavior.Identifier;\n    rename.honorsChangeAnnotations = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.renameProvider);\n    if (!options) {\n      return;\n    }\n    if (Is.boolean(capabilities.renameProvider)) {\n      options.prepareProvider = false;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideRenameEdits: (document, position, newName, token) => {\n        const client = this._client;\n        const provideRenameEdits = (document, position, newName, token) => {\n          let params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            position: client.code2ProtocolConverter.asPosition(position),\n            newName: newName\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.RenameRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asWorkspaceEdit(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.RenameRequest.type, token, error, null, false);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideRenameEdits ? middleware.provideRenameEdits(document, position, newName, token, provideRenameEdits) : provideRenameEdits(document, position, newName, token);\n      },\n      prepareRename: options.prepareProvider ? (document, position, token) => {\n        const client = this._client;\n        const prepareRename = (document, position, token) => {\n          let params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            position: client.code2ProtocolConverter.asPosition(position)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, params, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            if (vscode_languageserver_protocol_1.Range.is(result)) {\n              return client.protocol2CodeConverter.asRange(result);\n            } else if (this.isDefaultBehavior(result)) {\n              return result.defaultBehavior === true ? null : Promise.reject(new Error(`The element can't be renamed.`));\n            } else if (result && vscode_languageserver_protocol_1.Range.is(result.range)) {\n              return {\n                range: client.protocol2CodeConverter.asRange(result.range),\n                placeholder: result.placeholder\n              };\n            }\n            // To cancel the rename vscode API expects a rejected promise.\n            return Promise.reject(new Error(`The element can't be renamed.`));\n          }, error => {\n            if (typeof error.message === 'string') {\n              throw new Error(error.message);\n            } else {\n              throw new Error(`The element can't be renamed.`);\n            }\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.prepareRename ? middleware.prepareRename(document, position, token, prepareRename) : prepareRename(document, position, token);\n      } : undefined\n    };\n    return [this.registerProvider(selector, provider), provider];\n  }\n  registerProvider(selector, provider) {\n    return vscode_1.languages.registerRenameProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n  }\n  isDefaultBehavior(value) {\n    const candidate = value;\n    return candidate && Is.boolean(candidate.defaultBehavior);\n  }\n}\nexports.RenameFeature = RenameFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","RenameFeature","vscode_1","require","vscode_languageserver_protocol_1","UUID","Is","features_1","TextDocumentLanguageFeature","constructor","client","RenameRequest","type","fillClientCapabilities","capabilities","rename","ensure","dynamicRegistration","prepareSupport","prepareSupportDefaultBehavior","PrepareSupportDefaultBehavior","Identifier","honorsChangeAnnotations","initialize","documentSelector","options","getRegistrationOptions","renameProvider","boolean","prepareProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","selector","provider","provideRenameEdits","document","position","newName","token","_client","params","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","asPosition","sendRequest","then","result","isCancellationRequested","protocol2CodeConverter","asWorkspaceEdit","error","handleFailedRequest","middleware","prepareRename","PrepareRenameRequest","Range","is","asRange","isDefaultBehavior","defaultBehavior","Promise","reject","Error","range","placeholder","message","undefined","registerProvider","languages","registerRenameProvider","asDocumentSelector","candidate"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/rename.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenameFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst Is = require(\"./utils/is\");\nconst features_1 = require(\"./features\");\nclass RenameFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.RenameRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        let rename = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rename');\n        rename.dynamicRegistration = true;\n        rename.prepareSupport = true;\n        rename.prepareSupportDefaultBehavior = vscode_languageserver_protocol_1.PrepareSupportDefaultBehavior.Identifier;\n        rename.honorsChangeAnnotations = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.renameProvider);\n        if (!options) {\n            return;\n        }\n        if (Is.boolean(capabilities.renameProvider)) {\n            options.prepareProvider = false;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideRenameEdits: (document, position, newName, token) => {\n                const client = this._client;\n                const provideRenameEdits = (document, position, newName, token) => {\n                    let params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        position: client.code2ProtocolConverter.asPosition(position),\n                        newName: newName\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.RenameRequest.type, params, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asWorkspaceEdit(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.RenameRequest.type, token, error, null, false);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideRenameEdits\n                    ? middleware.provideRenameEdits(document, position, newName, token, provideRenameEdits)\n                    : provideRenameEdits(document, position, newName, token);\n            },\n            prepareRename: options.prepareProvider\n                ? (document, position, token) => {\n                    const client = this._client;\n                    const prepareRename = (document, position, token) => {\n                        let params = {\n                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                            position: client.code2ProtocolConverter.asPosition(position),\n                        };\n                        return client.sendRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, params, token).then((result) => {\n                            if (token.isCancellationRequested) {\n                                return null;\n                            }\n                            if (vscode_languageserver_protocol_1.Range.is(result)) {\n                                return client.protocol2CodeConverter.asRange(result);\n                            }\n                            else if (this.isDefaultBehavior(result)) {\n                                return result.defaultBehavior === true\n                                    ? null\n                                    : Promise.reject(new Error(`The element can't be renamed.`));\n                            }\n                            else if (result && vscode_languageserver_protocol_1.Range.is(result.range)) {\n                                return {\n                                    range: client.protocol2CodeConverter.asRange(result.range),\n                                    placeholder: result.placeholder\n                                };\n                            }\n                            // To cancel the rename vscode API expects a rejected promise.\n                            return Promise.reject(new Error(`The element can't be renamed.`));\n                        }, (error) => {\n                            if (typeof error.message === 'string') {\n                                throw new Error(error.message);\n                            }\n                            else {\n                                throw new Error(`The element can't be renamed.`);\n                            }\n                        });\n                    };\n                    const middleware = client.middleware;\n                    return middleware.prepareRename\n                        ? middleware.prepareRename(document, position, token, prepareRename)\n                        : prepareRename(document, position, token);\n                }\n                : undefined\n        };\n        return [this.registerProvider(selector, provider), provider];\n    }\n    registerProvider(selector, provider) {\n        return vscode_1.languages.registerRenameProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n    }\n    isDefaultBehavior(value) {\n        const candidate = value;\n        return candidate && Is.boolean(candidate.defaultBehavior);\n    }\n}\nexports.RenameFeature = RenameFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}