{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DocumentLinkFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DocumentLinkFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DocumentLinkRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    const documentLinkCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentLink');\n    documentLinkCapabilities.dynamicRegistration = true;\n    documentLinkCapabilities.tooltipSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.documentLinkProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideDocumentLinks: (document, token) => {\n        const client = this._client;\n        const provideDocumentLinks = (document, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, client.code2ProtocolConverter.asDocumentLinkParams(document), token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asDocumentLinks(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDocumentLinks ? middleware.provideDocumentLinks(document, token, provideDocumentLinks) : provideDocumentLinks(document, token);\n      },\n      resolveDocumentLink: options.resolveProvider ? (link, token) => {\n        const client = this._client;\n        let resolveDocumentLink = (link, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, client.code2ProtocolConverter.asDocumentLink(link), token).then(result => {\n            if (token.isCancellationRequested) {\n              return link;\n            }\n            return client.protocol2CodeConverter.asDocumentLink(result);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, token, error, link);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.resolveDocumentLink ? middleware.resolveDocumentLink(link, token, resolveDocumentLink) : resolveDocumentLink(link, token);\n      } : undefined\n    };\n    return [vscode_1.languages.registerDocumentLinkProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n  }\n}\nexports.DocumentLinkFeature = DocumentLinkFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","DocumentLinkFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","UUID","TextDocumentLanguageFeature","constructor","client","DocumentLinkRequest","type","fillClientCapabilities","capabilities","documentLinkCapabilities","ensure","dynamicRegistration","tooltipSupport","initialize","documentSelector","options","getRegistrationOptions","documentLinkProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","selector","provider","provideDocumentLinks","document","token","_client","sendRequest","code2ProtocolConverter","asDocumentLinkParams","then","result","isCancellationRequested","protocol2CodeConverter","asDocumentLinks","error","handleFailedRequest","middleware","resolveDocumentLink","resolveProvider","link","DocumentLinkResolveRequest","asDocumentLink","undefined","languages","registerDocumentLinkProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/documentLink.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentLinkFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DocumentLinkFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DocumentLinkRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        const documentLinkCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentLink');\n        documentLinkCapabilities.dynamicRegistration = true;\n        documentLinkCapabilities.tooltipSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.documentLinkProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideDocumentLinks: (document, token) => {\n                const client = this._client;\n                const provideDocumentLinks = (document, token) => {\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, client.code2ProtocolConverter.asDocumentLinkParams(document), token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asDocumentLinks(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDocumentLinks\n                    ? middleware.provideDocumentLinks(document, token, provideDocumentLinks)\n                    : provideDocumentLinks(document, token);\n            },\n            resolveDocumentLink: options.resolveProvider\n                ? (link, token) => {\n                    const client = this._client;\n                    let resolveDocumentLink = (link, token) => {\n                        return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, client.code2ProtocolConverter.asDocumentLink(link), token).then((result) => {\n                            if (token.isCancellationRequested) {\n                                return link;\n                            }\n                            return client.protocol2CodeConverter.asDocumentLink(result);\n                        }, (error) => {\n                            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, token, error, link);\n                        });\n                    };\n                    const middleware = client.middleware;\n                    return middleware.resolveDocumentLink\n                        ? middleware.resolveDocumentLink(link, token, resolveDocumentLink)\n                        : resolveDocumentLink(link, token);\n                }\n                : undefined\n        };\n        return [vscode_1.languages.registerDocumentLinkProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n    }\n}\nexports.DocumentLinkFeature = DocumentLinkFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}