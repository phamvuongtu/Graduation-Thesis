{"ast":null,"code":"import { shuffle } from './arrays.js';\nimport { compareSubstring, compareSubstringIgnoreCase, compareIgnoreCase, compare } from './strings.js';\nclass StringIterator {\n  constructor() {\n    this._value = '';\n    this._pos = 0;\n  }\n  reset(key) {\n    this._value = key;\n    this._pos = 0;\n    return this;\n  }\n  next() {\n    this._pos += 1;\n    return this;\n  }\n  hasNext() {\n    return this._pos < this._value.length - 1;\n  }\n  cmp(a) {\n    const aCode = a.charCodeAt(0);\n    const thisCode = this._value.charCodeAt(this._pos);\n    return aCode - thisCode;\n  }\n  value() {\n    return this._value[this._pos];\n  }\n}\nclass ConfigKeysIterator {\n  constructor(_caseSensitive = true) {\n    this._caseSensitive = _caseSensitive;\n  }\n  reset(key) {\n    this._value = key;\n    this._from = 0;\n    this._to = 0;\n    return this.next();\n  }\n  hasNext() {\n    return this._to < this._value.length;\n  }\n  next() {\n    this._from = this._to;\n    let justSeps = true;\n    for (; this._to < this._value.length; this._to++) {\n      const ch = this._value.charCodeAt(this._to);\n      if (ch === 46) {\n        if (justSeps) {\n          this._from++;\n        } else {\n          break;\n        }\n      } else {\n        justSeps = false;\n      }\n    }\n    return this;\n  }\n  cmp(a) {\n    return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n  }\n  value() {\n    return this._value.substring(this._from, this._to);\n  }\n}\nclass PathIterator {\n  constructor(_splitOnBackslash = true, _caseSensitive = true) {\n    this._splitOnBackslash = _splitOnBackslash;\n    this._caseSensitive = _caseSensitive;\n  }\n  reset(key) {\n    this._from = 0;\n    this._to = 0;\n    this._value = key;\n    this._valueLen = key.length;\n    for (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n      const ch = this._value.charCodeAt(pos);\n      if (!(ch === 47 || this._splitOnBackslash && ch === 92)) {\n        break;\n      }\n    }\n    return this.next();\n  }\n  hasNext() {\n    return this._to < this._valueLen;\n  }\n  next() {\n    this._from = this._to;\n    let justSeps = true;\n    for (; this._to < this._valueLen; this._to++) {\n      const ch = this._value.charCodeAt(this._to);\n      if (ch === 47 || this._splitOnBackslash && ch === 92) {\n        if (justSeps) {\n          this._from++;\n        } else {\n          break;\n        }\n      } else {\n        justSeps = false;\n      }\n    }\n    return this;\n  }\n  cmp(a) {\n    return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n  }\n  value() {\n    return this._value.substring(this._from, this._to);\n  }\n}\nclass UriIterator {\n  constructor(_ignorePathCasing, _ignoreQueryAndFragment) {\n    this._ignorePathCasing = _ignorePathCasing;\n    this._ignoreQueryAndFragment = _ignoreQueryAndFragment;\n    this._states = [];\n    this._stateIdx = 0;\n  }\n  reset(key) {\n    this._value = key;\n    this._states = [];\n    if (this._value.scheme) {\n      this._states.push(1);\n    }\n    if (this._value.authority) {\n      this._states.push(2);\n    }\n    if (this._value.path) {\n      this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n      this._pathIterator.reset(key.path);\n      if (this._pathIterator.value()) {\n        this._states.push(3);\n      }\n    }\n    if (!this._ignoreQueryAndFragment(key)) {\n      if (this._value.query) {\n        this._states.push(4);\n      }\n      if (this._value.fragment) {\n        this._states.push(5);\n      }\n    }\n    this._stateIdx = 0;\n    return this;\n  }\n  next() {\n    if (this._states[this._stateIdx] === 3 && this._pathIterator.hasNext()) {\n      this._pathIterator.next();\n    } else {\n      this._stateIdx += 1;\n    }\n    return this;\n  }\n  hasNext() {\n    return this._states[this._stateIdx] === 3 && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;\n  }\n  cmp(a) {\n    if (this._states[this._stateIdx] === 1) {\n      return compareIgnoreCase(a, this._value.scheme);\n    } else if (this._states[this._stateIdx] === 2) {\n      return compareIgnoreCase(a, this._value.authority);\n    } else if (this._states[this._stateIdx] === 3) {\n      return this._pathIterator.cmp(a);\n    } else if (this._states[this._stateIdx] === 4) {\n      return compare(a, this._value.query);\n    } else if (this._states[this._stateIdx] === 5) {\n      return compare(a, this._value.fragment);\n    }\n    throw new Error();\n  }\n  value() {\n    if (this._states[this._stateIdx] === 1) {\n      return this._value.scheme;\n    } else if (this._states[this._stateIdx] === 2) {\n      return this._value.authority;\n    } else if (this._states[this._stateIdx] === 3) {\n      return this._pathIterator.value();\n    } else if (this._states[this._stateIdx] === 4) {\n      return this._value.query;\n    } else if (this._states[this._stateIdx] === 5) {\n      return this._value.fragment;\n    }\n    throw new Error();\n  }\n}\nclass TernarySearchTreeNode {\n  constructor() {\n    this.height = 1;\n  }\n  isEmpty() {\n    return !this.left && !this.mid && !this.right && !this.value;\n  }\n  rotateLeft() {\n    const tmp = this.right;\n    this.right = tmp.left;\n    tmp.left = this;\n    this.updateHeight();\n    tmp.updateHeight();\n    return tmp;\n  }\n  rotateRight() {\n    const tmp = this.left;\n    this.left = tmp.right;\n    tmp.right = this;\n    this.updateHeight();\n    tmp.updateHeight();\n    return tmp;\n  }\n  updateHeight() {\n    this.height = 1 + Math.max(this.heightLeft, this.heightRight);\n  }\n  balanceFactor() {\n    return this.heightRight - this.heightLeft;\n  }\n  get heightLeft() {\n    return this.left?.height ?? 0;\n  }\n  get heightRight() {\n    return this.right?.height ?? 0;\n  }\n}\nclass TernarySearchTree {\n  static forUris(ignorePathCasing = () => false, ignoreQueryAndFragment = () => false) {\n    return new TernarySearchTree(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n  }\n  static forPaths(ignorePathCasing = false) {\n    return new TernarySearchTree(new PathIterator(undefined, !ignorePathCasing));\n  }\n  static forStrings() {\n    return new TernarySearchTree(new StringIterator());\n  }\n  static forConfigKeys() {\n    return new TernarySearchTree(new ConfigKeysIterator());\n  }\n  constructor(segments) {\n    this._iter = segments;\n  }\n  clear() {\n    this._root = undefined;\n  }\n  fill(values, keys) {\n    if (keys) {\n      const arr = keys.slice(0);\n      shuffle(arr);\n      for (const k of arr) {\n        this.set(k, values);\n      }\n    } else {\n      const arr = values.slice(0);\n      shuffle(arr);\n      for (const entry of arr) {\n        this.set(entry[0], entry[1]);\n      }\n    }\n  }\n  set(key, element) {\n    const iter = this._iter.reset(key);\n    let node;\n    if (!this._root) {\n      this._root = new TernarySearchTreeNode();\n      this._root.segment = iter.value();\n    }\n    const stack = [];\n    node = this._root;\n    while (true) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        if (!node.left) {\n          node.left = new TernarySearchTreeNode();\n          node.left.segment = iter.value();\n        }\n        stack.push([-1, node]);\n        node = node.left;\n      } else if (val < 0) {\n        if (!node.right) {\n          node.right = new TernarySearchTreeNode();\n          node.right.segment = iter.value();\n        }\n        stack.push([1, node]);\n        node = node.right;\n      } else if (iter.hasNext()) {\n        iter.next();\n        if (!node.mid) {\n          node.mid = new TernarySearchTreeNode();\n          node.mid.segment = iter.value();\n        }\n        stack.push([0, node]);\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    const oldElement = node.value;\n    node.value = element;\n    node.key = key;\n    for (let i = stack.length - 1; i >= 0; i--) {\n      const node = stack[i][1];\n      node.updateHeight();\n      const bf = node.balanceFactor();\n      if (bf < -1 || bf > 1) {\n        const d1 = stack[i][0];\n        const d2 = stack[i + 1][0];\n        if (d1 === 1 && d2 === 1) {\n          stack[i][1] = node.rotateLeft();\n        } else if (d1 === -1 && d2 === -1) {\n          stack[i][1] = node.rotateRight();\n        } else if (d1 === 1 && d2 === -1) {\n          node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n          stack[i][1] = node.rotateLeft();\n        } else if (d1 === -1 && d2 === 1) {\n          node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n          stack[i][1] = node.rotateRight();\n        } else {\n          throw new Error();\n        }\n        if (i > 0) {\n          switch (stack[i - 1][0]) {\n            case -1:\n              stack[i - 1][1].left = stack[i][1];\n              break;\n            case 1:\n              stack[i - 1][1].right = stack[i][1];\n              break;\n            case 0:\n              stack[i - 1][1].mid = stack[i][1];\n              break;\n          }\n        } else {\n          this._root = stack[0][1];\n        }\n      }\n    }\n    return oldElement;\n  }\n  get(key) {\n    return this._getNode(key)?.value;\n  }\n  _getNode(key) {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        node = node.left;\n      } else if (val < 0) {\n        node = node.right;\n      } else if (iter.hasNext()) {\n        iter.next();\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    return node;\n  }\n  has(key) {\n    const node = this._getNode(key);\n    return !(node?.value === undefined && node?.mid === undefined);\n  }\n  delete(key) {\n    return this._delete(key, false);\n  }\n  deleteSuperstr(key) {\n    return this._delete(key, true);\n  }\n  _delete(key, superStr) {\n    const iter = this._iter.reset(key);\n    const stack = [];\n    let node = this._root;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        stack.push([-1, node]);\n        node = node.left;\n      } else if (val < 0) {\n        stack.push([1, node]);\n        node = node.right;\n      } else if (iter.hasNext()) {\n        iter.next();\n        stack.push([0, node]);\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    if (!node) {\n      return;\n    }\n    if (superStr) {\n      node.left = undefined;\n      node.mid = undefined;\n      node.right = undefined;\n      node.height = 1;\n    } else {\n      node.key = undefined;\n      node.value = undefined;\n    }\n    if (!node.mid && !node.value) {\n      if (node.left && node.right) {\n        const min = this._min(node.right);\n        if (min.key) {\n          const {\n            key,\n            value,\n            segment\n          } = min;\n          this._delete(min.key, false);\n          node.key = key;\n          node.value = value;\n          node.segment = segment;\n        }\n      } else {\n        const newChild = node.left ?? node.right;\n        if (stack.length > 0) {\n          const [dir, parent] = stack[stack.length - 1];\n          switch (dir) {\n            case -1:\n              parent.left = newChild;\n              break;\n            case 0:\n              parent.mid = newChild;\n              break;\n            case 1:\n              parent.right = newChild;\n              break;\n          }\n        } else {\n          this._root = newChild;\n        }\n      }\n    }\n    for (let i = stack.length - 1; i >= 0; i--) {\n      const node = stack[i][1];\n      node.updateHeight();\n      const bf = node.balanceFactor();\n      if (bf > 1) {\n        if (node.right.balanceFactor() >= 0) {\n          stack[i][1] = node.rotateLeft();\n        } else {\n          node.right = node.right.rotateRight();\n          stack[i][1] = node.rotateLeft();\n        }\n      } else if (bf < -1) {\n        if (node.left.balanceFactor() <= 0) {\n          stack[i][1] = node.rotateRight();\n        } else {\n          node.left = node.left.rotateLeft();\n          stack[i][1] = node.rotateRight();\n        }\n      }\n      if (i > 0) {\n        switch (stack[i - 1][0]) {\n          case -1:\n            stack[i - 1][1].left = stack[i][1];\n            break;\n          case 1:\n            stack[i - 1][1].right = stack[i][1];\n            break;\n          case 0:\n            stack[i - 1][1].mid = stack[i][1];\n            break;\n        }\n      } else {\n        this._root = stack[0][1];\n      }\n    }\n  }\n  _min(node) {\n    while (node.left) {\n      node = node.left;\n    }\n    return node;\n  }\n  findSubstr(key) {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    let candidate = undefined;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        node = node.left;\n      } else if (val < 0) {\n        node = node.right;\n      } else if (iter.hasNext()) {\n        iter.next();\n        candidate = node.value || candidate;\n        node = node.mid;\n      } else {\n        break;\n      }\n    }\n    return node && node.value || candidate;\n  }\n  findSuperstr(key) {\n    return this._findSuperstrOrElement(key, false);\n  }\n  _findSuperstrOrElement(key, allowValue) {\n    const iter = this._iter.reset(key);\n    let node = this._root;\n    while (node) {\n      const val = iter.cmp(node.segment);\n      if (val > 0) {\n        node = node.left;\n      } else if (val < 0) {\n        node = node.right;\n      } else if (iter.hasNext()) {\n        iter.next();\n        node = node.mid;\n      } else {\n        if (!node.mid) {\n          if (allowValue) {\n            return node.value;\n          } else {\n            return undefined;\n          }\n        } else {\n          return this._entries(node.mid);\n        }\n      }\n    }\n    return undefined;\n  }\n  hasElementOrSubtree(key) {\n    return this._findSuperstrOrElement(key, true) !== undefined;\n  }\n  forEach(callback) {\n    for (const [key, value] of this) {\n      callback(value, key);\n    }\n  }\n  *[Symbol.iterator]() {\n    yield* this._entries(this._root);\n  }\n  _entries(node) {\n    const result = [];\n    this._dfsEntries(node, result);\n    return result[Symbol.iterator]();\n  }\n  _dfsEntries(node, bucket) {\n    if (!node) {\n      return;\n    }\n    if (node.left) {\n      this._dfsEntries(node.left, bucket);\n    }\n    if (node.value) {\n      bucket.push([node.key, node.value]);\n    }\n    if (node.mid) {\n      this._dfsEntries(node.mid, bucket);\n    }\n    if (node.right) {\n      this._dfsEntries(node.right, bucket);\n    }\n  }\n  _isBalanced() {\n    const nodeIsBalanced = node => {\n      if (!node) {\n        return true;\n      }\n      const bf = node.balanceFactor();\n      if (bf < -1 || bf > 1) {\n        return false;\n      }\n      return nodeIsBalanced(node.left) && nodeIsBalanced(node.right);\n    };\n    return nodeIsBalanced(this._root);\n  }\n}\nexport { ConfigKeysIterator, PathIterator, StringIterator, TernarySearchTree, UriIterator };","map":{"version":3,"names":["shuffle","compareSubstring","compareSubstringIgnoreCase","compareIgnoreCase","compare","StringIterator","constructor","_value","_pos","reset","key","next","hasNext","length","cmp","a","aCode","charCodeAt","thisCode","value","ConfigKeysIterator","_caseSensitive","_from","_to","justSeps","ch","substring","PathIterator","_splitOnBackslash","_valueLen","pos","UriIterator","_ignorePathCasing","_ignoreQueryAndFragment","_states","_stateIdx","scheme","push","authority","path","_pathIterator","query","fragment","Error","TernarySearchTreeNode","height","isEmpty","left","mid","right","rotateLeft","tmp","updateHeight","rotateRight","Math","max","heightLeft","heightRight","balanceFactor","TernarySearchTree","forUris","ignorePathCasing","ignoreQueryAndFragment","forPaths","undefined","forStrings","forConfigKeys","segments","_iter","clear","_root","fill","values","keys","arr","slice","k","set","entry","element","iter","node","segment","stack","val","oldElement","i","bf","d1","d2","get","_getNode","has","delete","_delete","deleteSuperstr","superStr","min","_min","newChild","dir","parent","findSubstr","candidate","findSuperstr","_findSuperstrOrElement","allowValue","_entries","hasElementOrSubtree","forEach","callback","Symbol","iterator","result","_dfsEntries","bucket","_isBalanced","nodeIsBalanced"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js"],"sourcesContent":["import { shuffle } from './arrays.js';\nimport { compareSubstring, compareSubstringIgnoreCase, compareIgnoreCase, compare } from './strings.js';\nclass StringIterator {\n    constructor() {\n        this._value = '';\n        this._pos = 0;\n    }\n    reset(key) {\n        this._value = key;\n        this._pos = 0;\n        return this;\n    }\n    next() {\n        this._pos += 1;\n        return this;\n    }\n    hasNext() {\n        return this._pos < this._value.length - 1;\n    }\n    cmp(a) {\n        const aCode = a.charCodeAt(0);\n        const thisCode = this._value.charCodeAt(this._pos);\n        return aCode - thisCode;\n    }\n    value() {\n        return this._value[this._pos];\n    }\n}\nclass ConfigKeysIterator {\n    constructor(_caseSensitive = true) {\n        this._caseSensitive = _caseSensitive;\n    }\n    reset(key) {\n        this._value = key;\n        this._from = 0;\n        this._to = 0;\n        return this.next();\n    }\n    hasNext() {\n        return this._to < this._value.length;\n    }\n    next() {\n        this._from = this._to;\n        let justSeps = true;\n        for (; this._to < this._value.length; this._to++) {\n            const ch = this._value.charCodeAt(this._to);\n            if (ch === 46 ) {\n                if (justSeps) {\n                    this._from++;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                justSeps = false;\n            }\n        }\n        return this;\n    }\n    cmp(a) {\n        return this._caseSensitive\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n    value() {\n        return this._value.substring(this._from, this._to);\n    }\n}\nclass PathIterator {\n    constructor(_splitOnBackslash = true, _caseSensitive = true) {\n        this._splitOnBackslash = _splitOnBackslash;\n        this._caseSensitive = _caseSensitive;\n    }\n    reset(key) {\n        this._from = 0;\n        this._to = 0;\n        this._value = key;\n        this._valueLen = key.length;\n        for (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n            const ch = this._value.charCodeAt(pos);\n            if (!((ch === 47  || this._splitOnBackslash && ch === 92) )) {\n                break;\n            }\n        }\n        return this.next();\n    }\n    hasNext() {\n        return this._to < this._valueLen;\n    }\n    next() {\n        this._from = this._to;\n        let justSeps = true;\n        for (; this._to < this._valueLen; this._to++) {\n            const ch = this._value.charCodeAt(this._to);\n            if (ch === 47  || this._splitOnBackslash && ch === 92 ) {\n                if (justSeps) {\n                    this._from++;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                justSeps = false;\n            }\n        }\n        return this;\n    }\n    cmp(a) {\n        return this._caseSensitive\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n    value() {\n        return this._value.substring(this._from, this._to);\n    }\n}\nclass UriIterator {\n    constructor(_ignorePathCasing, _ignoreQueryAndFragment) {\n        this._ignorePathCasing = _ignorePathCasing;\n        this._ignoreQueryAndFragment = _ignoreQueryAndFragment;\n        this._states = [];\n        this._stateIdx = 0;\n    }\n    reset(key) {\n        this._value = key;\n        this._states = [];\n        if (this._value.scheme) {\n            this._states.push(1 );\n        }\n        if (this._value.authority) {\n            this._states.push(2 );\n        }\n        if (this._value.path) {\n            this._pathIterator = ( new PathIterator(false, !this._ignorePathCasing(key)));\n            this._pathIterator.reset(key.path);\n            if (this._pathIterator.value()) {\n                this._states.push(3 );\n            }\n        }\n        if (!this._ignoreQueryAndFragment(key)) {\n            if (this._value.query) {\n                this._states.push(4 );\n            }\n            if (this._value.fragment) {\n                this._states.push(5 );\n            }\n        }\n        this._stateIdx = 0;\n        return this;\n    }\n    next() {\n        if (this._states[this._stateIdx] === 3  && this._pathIterator.hasNext()) {\n            this._pathIterator.next();\n        }\n        else {\n            this._stateIdx += 1;\n        }\n        return this;\n    }\n    hasNext() {\n        return (this._states[this._stateIdx] === 3  && this._pathIterator.hasNext())\n            || this._stateIdx < this._states.length - 1;\n    }\n    cmp(a) {\n        if (this._states[this._stateIdx] === 1 ) {\n            return compareIgnoreCase(a, this._value.scheme);\n        }\n        else if (this._states[this._stateIdx] === 2 ) {\n            return compareIgnoreCase(a, this._value.authority);\n        }\n        else if (this._states[this._stateIdx] === 3 ) {\n            return this._pathIterator.cmp(a);\n        }\n        else if (this._states[this._stateIdx] === 4 ) {\n            return compare(a, this._value.query);\n        }\n        else if (this._states[this._stateIdx] === 5 ) {\n            return compare(a, this._value.fragment);\n        }\n        throw ( new Error());\n    }\n    value() {\n        if (this._states[this._stateIdx] === 1 ) {\n            return this._value.scheme;\n        }\n        else if (this._states[this._stateIdx] === 2 ) {\n            return this._value.authority;\n        }\n        else if (this._states[this._stateIdx] === 3 ) {\n            return this._pathIterator.value();\n        }\n        else if (this._states[this._stateIdx] === 4 ) {\n            return this._value.query;\n        }\n        else if (this._states[this._stateIdx] === 5 ) {\n            return this._value.fragment;\n        }\n        throw ( new Error());\n    }\n}\nclass TernarySearchTreeNode {\n    constructor() {\n        this.height = 1;\n    }\n    isEmpty() {\n        return !this.left && !this.mid && !this.right && !this.value;\n    }\n    rotateLeft() {\n        const tmp = this.right;\n        this.right = tmp.left;\n        tmp.left = this;\n        this.updateHeight();\n        tmp.updateHeight();\n        return tmp;\n    }\n    rotateRight() {\n        const tmp = this.left;\n        this.left = tmp.right;\n        tmp.right = this;\n        this.updateHeight();\n        tmp.updateHeight();\n        return tmp;\n    }\n    updateHeight() {\n        this.height = 1 + Math.max(this.heightLeft, this.heightRight);\n    }\n    balanceFactor() {\n        return this.heightRight - this.heightLeft;\n    }\n    get heightLeft() {\n        return this.left?.height ?? 0;\n    }\n    get heightRight() {\n        return this.right?.height ?? 0;\n    }\n}\nclass TernarySearchTree {\n    static forUris(ignorePathCasing = () => false, ignoreQueryAndFragment = () => false) {\n        return ( new TernarySearchTree(( new UriIterator(ignorePathCasing, ignoreQueryAndFragment))));\n    }\n    static forPaths(ignorePathCasing = false) {\n        return ( new TernarySearchTree(( new PathIterator(undefined, !ignorePathCasing))));\n    }\n    static forStrings() {\n        return ( new TernarySearchTree(( new StringIterator())));\n    }\n    static forConfigKeys() {\n        return ( new TernarySearchTree(( new ConfigKeysIterator())));\n    }\n    constructor(segments) {\n        this._iter = segments;\n    }\n    clear() {\n        this._root = undefined;\n    }\n    fill(values, keys) {\n        if (keys) {\n            const arr = keys.slice(0);\n            shuffle(arr);\n            for (const k of arr) {\n                this.set(k, values);\n            }\n        }\n        else {\n            const arr = values.slice(0);\n            shuffle(arr);\n            for (const entry of arr) {\n                this.set(entry[0], entry[1]);\n            }\n        }\n    }\n    set(key, element) {\n        const iter = this._iter.reset(key);\n        let node;\n        if (!this._root) {\n            this._root = ( new TernarySearchTreeNode());\n            this._root.segment = iter.value();\n        }\n        const stack = [];\n        node = this._root;\n        while (true) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                if (!node.left) {\n                    node.left = ( new TernarySearchTreeNode());\n                    node.left.segment = iter.value();\n                }\n                stack.push([-1 , node]);\n                node = node.left;\n            }\n            else if (val < 0) {\n                if (!node.right) {\n                    node.right = ( new TernarySearchTreeNode());\n                    node.right.segment = iter.value();\n                }\n                stack.push([1 , node]);\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                iter.next();\n                if (!node.mid) {\n                    node.mid = ( new TernarySearchTreeNode());\n                    node.mid.segment = iter.value();\n                }\n                stack.push([0 , node]);\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        const oldElement = node.value;\n        node.value = element;\n        node.key = key;\n        for (let i = stack.length - 1; i >= 0; i--) {\n            const node = stack[i][1];\n            node.updateHeight();\n            const bf = node.balanceFactor();\n            if (bf < -1 || bf > 1) {\n                const d1 = stack[i][0];\n                const d2 = stack[i + 1][0];\n                if (d1 === 1  && d2 === 1 ) {\n                    stack[i][1] = node.rotateLeft();\n                }\n                else if (d1 === -1  && d2 === -1 ) {\n                    stack[i][1] = node.rotateRight();\n                }\n                else if (d1 === 1  && d2 === -1 ) {\n                    node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n                    stack[i][1] = node.rotateLeft();\n                }\n                else if (d1 === -1  && d2 === 1 ) {\n                    node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n                    stack[i][1] = node.rotateRight();\n                }\n                else {\n                    throw ( new Error());\n                }\n                if (i > 0) {\n                    switch (stack[i - 1][0]) {\n                        case -1 :\n                            stack[i - 1][1].left = stack[i][1];\n                            break;\n                        case 1 :\n                            stack[i - 1][1].right = stack[i][1];\n                            break;\n                        case 0 :\n                            stack[i - 1][1].mid = stack[i][1];\n                            break;\n                    }\n                }\n                else {\n                    this._root = stack[0][1];\n                }\n            }\n        }\n        return oldElement;\n    }\n    get(key) {\n        return this._getNode(key)?.value;\n    }\n    _getNode(key) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                node = node.left;\n            }\n            else if (val < 0) {\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                iter.next();\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        return node;\n    }\n    has(key) {\n        const node = this._getNode(key);\n        return !(node?.value === undefined && node?.mid === undefined);\n    }\n    delete(key) {\n        return this._delete(key, false);\n    }\n    deleteSuperstr(key) {\n        return this._delete(key, true);\n    }\n    _delete(key, superStr) {\n        const iter = this._iter.reset(key);\n        const stack = [];\n        let node = this._root;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                stack.push([-1 , node]);\n                node = node.left;\n            }\n            else if (val < 0) {\n                stack.push([1 , node]);\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                iter.next();\n                stack.push([0 , node]);\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        if (!node) {\n            return;\n        }\n        if (superStr) {\n            node.left = undefined;\n            node.mid = undefined;\n            node.right = undefined;\n            node.height = 1;\n        }\n        else {\n            node.key = undefined;\n            node.value = undefined;\n        }\n        if (!node.mid && !node.value) {\n            if (node.left && node.right) {\n                const min = this._min(node.right);\n                if (min.key) {\n                    const { key, value, segment } = min;\n                    this._delete(min.key, false);\n                    node.key = key;\n                    node.value = value;\n                    node.segment = segment;\n                }\n            }\n            else {\n                const newChild = node.left ?? node.right;\n                if (stack.length > 0) {\n                    const [dir, parent] = stack[stack.length - 1];\n                    switch (dir) {\n                        case -1 :\n                            parent.left = newChild;\n                            break;\n                        case 0 :\n                            parent.mid = newChild;\n                            break;\n                        case 1 :\n                            parent.right = newChild;\n                            break;\n                    }\n                }\n                else {\n                    this._root = newChild;\n                }\n            }\n        }\n        for (let i = stack.length - 1; i >= 0; i--) {\n            const node = stack[i][1];\n            node.updateHeight();\n            const bf = node.balanceFactor();\n            if (bf > 1) {\n                if (node.right.balanceFactor() >= 0) {\n                    stack[i][1] = node.rotateLeft();\n                }\n                else {\n                    node.right = node.right.rotateRight();\n                    stack[i][1] = node.rotateLeft();\n                }\n            }\n            else if (bf < -1) {\n                if (node.left.balanceFactor() <= 0) {\n                    stack[i][1] = node.rotateRight();\n                }\n                else {\n                    node.left = node.left.rotateLeft();\n                    stack[i][1] = node.rotateRight();\n                }\n            }\n            if (i > 0) {\n                switch (stack[i - 1][0]) {\n                    case -1 :\n                        stack[i - 1][1].left = stack[i][1];\n                        break;\n                    case 1 :\n                        stack[i - 1][1].right = stack[i][1];\n                        break;\n                    case 0 :\n                        stack[i - 1][1].mid = stack[i][1];\n                        break;\n                }\n            }\n            else {\n                this._root = stack[0][1];\n            }\n        }\n    }\n    _min(node) {\n        while (node.left) {\n            node = node.left;\n        }\n        return node;\n    }\n    findSubstr(key) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        let candidate = undefined;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                node = node.left;\n            }\n            else if (val < 0) {\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                iter.next();\n                candidate = node.value || candidate;\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        return node && node.value || candidate;\n    }\n    findSuperstr(key) {\n        return this._findSuperstrOrElement(key, false);\n    }\n    _findSuperstrOrElement(key, allowValue) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                node = node.left;\n            }\n            else if (val < 0) {\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                iter.next();\n                node = node.mid;\n            }\n            else {\n                if (!node.mid) {\n                    if (allowValue) {\n                        return node.value;\n                    }\n                    else {\n                        return undefined;\n                    }\n                }\n                else {\n                    return this._entries(node.mid);\n                }\n            }\n        }\n        return undefined;\n    }\n    hasElementOrSubtree(key) {\n        return this._findSuperstrOrElement(key, true) !== undefined;\n    }\n    forEach(callback) {\n        for (const [key, value] of this) {\n            callback(value, key);\n        }\n    }\n    *[Symbol.iterator]() {\n        yield* this._entries(this._root);\n    }\n    _entries(node) {\n        const result = [];\n        this._dfsEntries(node, result);\n        return result[Symbol.iterator]();\n    }\n    _dfsEntries(node, bucket) {\n        if (!node) {\n            return;\n        }\n        if (node.left) {\n            this._dfsEntries(node.left, bucket);\n        }\n        if (node.value) {\n            bucket.push([node.key, node.value]);\n        }\n        if (node.mid) {\n            this._dfsEntries(node.mid, bucket);\n        }\n        if (node.right) {\n            this._dfsEntries(node.right, bucket);\n        }\n    }\n    _isBalanced() {\n        const nodeIsBalanced = (node) => {\n            if (!node) {\n                return true;\n            }\n            const bf = node.balanceFactor();\n            if (bf < -1 || bf > 1) {\n                return false;\n            }\n            return nodeIsBalanced(node.left) && nodeIsBalanced(node.right);\n        };\n        return nodeIsBalanced(this._root);\n    }\n}\nexport { ConfigKeysIterator, PathIterator, StringIterator, TernarySearchTree, UriIterator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}