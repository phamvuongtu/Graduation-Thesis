{"ast":null,"code":"function getKoreanAltChars(code) {\n  const result = disassembleKorean(code);\n  if (result && result.length > 0) {\n    return new Uint32Array(result);\n  }\n  return undefined;\n}\nlet codeBufferLength = 0;\nconst codeBuffer = new Uint32Array(10);\nfunction disassembleKorean(code) {\n  codeBufferLength = 0;\n  getCodesFromArray(code, modernConsonants, 4352);\n  if (codeBufferLength > 0) {\n    return codeBuffer.subarray(0, codeBufferLength);\n  }\n  getCodesFromArray(code, modernVowels, 4449);\n  if (codeBufferLength > 0) {\n    return codeBuffer.subarray(0, codeBufferLength);\n  }\n  getCodesFromArray(code, modernFinalConsonants, 4520);\n  if (codeBufferLength > 0) {\n    return codeBuffer.subarray(0, codeBufferLength);\n  }\n  getCodesFromArray(code, compatibilityJamo, 12593);\n  if (codeBufferLength) {\n    return codeBuffer.subarray(0, codeBufferLength);\n  }\n  if (code >= 0xAC00 && code <= 0xD7A3) {\n    const hangulIndex = code - 0xAC00;\n    const vowelAndFinalConsonantProduct = hangulIndex % 588;\n    const initialConsonantIndex = Math.floor(hangulIndex / 588);\n    const vowelIndex = Math.floor(vowelAndFinalConsonantProduct / 28);\n    const finalConsonantIndex = vowelAndFinalConsonantProduct % 28 - 1;\n    if (initialConsonantIndex < modernConsonants.length) {\n      getCodesFromArray(initialConsonantIndex, modernConsonants, 0);\n    } else if (4352 + initialConsonantIndex - 12593 < compatibilityJamo.length) {\n      getCodesFromArray(4352 + initialConsonantIndex, compatibilityJamo, 12593);\n    }\n    if (vowelIndex < modernVowels.length) {\n      getCodesFromArray(vowelIndex, modernVowels, 0);\n    } else if (4449 + vowelIndex - 12593 < compatibilityJamo.length) {\n      getCodesFromArray(4449 + vowelIndex - 12593, compatibilityJamo, 12593);\n    }\n    if (finalConsonantIndex >= 0) {\n      if (finalConsonantIndex < modernFinalConsonants.length) {\n        getCodesFromArray(finalConsonantIndex, modernFinalConsonants, 0);\n      } else if (4520 + finalConsonantIndex - 12593 < compatibilityJamo.length) {\n        getCodesFromArray(4520 + finalConsonantIndex - 12593, compatibilityJamo, 12593);\n      }\n    }\n    if (codeBufferLength > 0) {\n      return codeBuffer.subarray(0, codeBufferLength);\n    }\n  }\n  return undefined;\n}\nfunction getCodesFromArray(code, array, arrayStartIndex) {\n  if (code >= arrayStartIndex && code < arrayStartIndex + array.length) {\n    addCodesToBuffer(array[code - arrayStartIndex]);\n  }\n}\nfunction addCodesToBuffer(codes) {\n  if (codes === 0) {\n    return;\n  }\n  codeBuffer[codeBufferLength++] = codes & 0xFF;\n  if (codes >> 8) {\n    codeBuffer[codeBufferLength++] = codes >> 8 & 0xFF;\n  }\n  if (codes >> 16) {\n    codeBuffer[codeBufferLength++] = codes >> 16 & 0xFF;\n  }\n}\nconst modernConsonants = new Uint8Array([114, 82, 115, 101, 69, 102, 97, 113, 81, 116, 84, 100, 119, 87, 99, 122, 120, 118, 103]);\nconst modernVowels = new Uint16Array([107, 111, 105, 79, 106, 112, 117, 80, 104, 27496, 28520, 27752, 121, 110, 27246, 28782, 27758, 98, 109, 27757, 108]);\nconst modernFinalConsonants = new Uint16Array([114, 82, 29810, 115, 30579, 26483, 101, 102, 29286, 24934, 29030, 29798, 30822, 30310, 26470, 97, 113, 29809, 116, 84, 100, 119, 99, 122, 120, 118, 103]);\nconst compatibilityJamo = new Uint16Array([114, 82, 29810, 115, 30579, 26483, 101, 69, 102, 29286, 24934, 29030, 29798, 30822, 30310, 26470, 97, 113, 81, 29809, 116, 84, 100, 119, 87, 99, 122, 120, 118, 103, 107, 111, 105, 79, 106, 112, 117, 80, 104, 27496, 28520, 27752, 121, 110, 27246, 28782, 27758, 98, 109, 27757, 108]);\nexport { getKoreanAltChars };","map":{"version":3,"names":["getKoreanAltChars","code","result","disassembleKorean","length","Uint32Array","undefined","codeBufferLength","codeBuffer","getCodesFromArray","modernConsonants","subarray","modernVowels","modernFinalConsonants","compatibilityJamo","hangulIndex","vowelAndFinalConsonantProduct","initialConsonantIndex","Math","floor","vowelIndex","finalConsonantIndex","array","arrayStartIndex","addCodesToBuffer","codes","Uint8Array","Uint16Array"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/naturalLanguage/korean.js"],"sourcesContent":["function getKoreanAltChars(code) {\n    const result = disassembleKorean(code);\n    if (result && result.length > 0) {\n        return ( new Uint32Array(result));\n    }\n    return undefined;\n}\nlet codeBufferLength = 0;\nconst codeBuffer = ( new Uint32Array(10));\nfunction disassembleKorean(code) {\n    codeBufferLength = 0;\n    getCodesFromArray(code, modernConsonants, 4352 );\n    if (codeBufferLength > 0) {\n        return codeBuffer.subarray(0, codeBufferLength);\n    }\n    getCodesFromArray(code, modernVowels, 4449 );\n    if (codeBufferLength > 0) {\n        return codeBuffer.subarray(0, codeBufferLength);\n    }\n    getCodesFromArray(code, modernFinalConsonants, 4520 );\n    if (codeBufferLength > 0) {\n        return codeBuffer.subarray(0, codeBufferLength);\n    }\n    getCodesFromArray(code, compatibilityJamo, 12593 );\n    if (codeBufferLength) {\n        return codeBuffer.subarray(0, codeBufferLength);\n    }\n    if (code >= 0xAC00 && code <= 0xD7A3) {\n        const hangulIndex = code - 0xAC00;\n        const vowelAndFinalConsonantProduct = hangulIndex % 588;\n        const initialConsonantIndex = Math.floor(hangulIndex / 588);\n        const vowelIndex = Math.floor(vowelAndFinalConsonantProduct / 28);\n        const finalConsonantIndex = vowelAndFinalConsonantProduct % 28 - 1;\n        if (initialConsonantIndex < modernConsonants.length) {\n            getCodesFromArray(initialConsonantIndex, modernConsonants, 0);\n        }\n        else if (4352  + initialConsonantIndex - 12593  < compatibilityJamo.length) {\n            getCodesFromArray(4352  + initialConsonantIndex, compatibilityJamo, 12593 );\n        }\n        if (vowelIndex < modernVowels.length) {\n            getCodesFromArray(vowelIndex, modernVowels, 0);\n        }\n        else if (4449  + vowelIndex - 12593  < compatibilityJamo.length) {\n            getCodesFromArray(4449  + vowelIndex - 12593 , compatibilityJamo, 12593 );\n        }\n        if (finalConsonantIndex >= 0) {\n            if (finalConsonantIndex < modernFinalConsonants.length) {\n                getCodesFromArray(finalConsonantIndex, modernFinalConsonants, 0);\n            }\n            else if (4520  + finalConsonantIndex - 12593  < compatibilityJamo.length) {\n                getCodesFromArray(4520  + finalConsonantIndex - 12593 , compatibilityJamo, 12593 );\n            }\n        }\n        if (codeBufferLength > 0) {\n            return codeBuffer.subarray(0, codeBufferLength);\n        }\n    }\n    return undefined;\n}\nfunction getCodesFromArray(code, array, arrayStartIndex) {\n    if (code >= arrayStartIndex && code < arrayStartIndex + array.length) {\n        addCodesToBuffer(array[code - arrayStartIndex]);\n    }\n}\nfunction addCodesToBuffer(codes) {\n    if (codes === 0 ) {\n        return;\n    }\n    codeBuffer[codeBufferLength++] = codes & 0xFF;\n    if (codes >> 8) {\n        codeBuffer[codeBufferLength++] = (codes >> 8) & 0xFF;\n    }\n    if (codes >> 16) {\n        codeBuffer[codeBufferLength++] = (codes >> 16) & 0xFF;\n    }\n}\nconst modernConsonants = ( new Uint8Array([\n    114 ,\n    82 ,\n    115 ,\n    101 ,\n    69 ,\n    102 ,\n    97 ,\n    113 ,\n    81 ,\n    116 ,\n    84 ,\n    100 ,\n    119 ,\n    87 ,\n    99 ,\n    122 ,\n    120 ,\n    118 ,\n    103 ,\n]));\nconst modernVowels = ( new Uint16Array([\n    107 ,\n    111 ,\n    105 ,\n    79 ,\n    106 ,\n    112 ,\n    117 ,\n    80 ,\n    104 ,\n    27496 ,\n    28520 ,\n    27752 ,\n    121 ,\n    110 ,\n    27246 ,\n    28782 ,\n    27758 ,\n    98 ,\n    109 ,\n    27757 ,\n    108 ,\n]));\nconst modernFinalConsonants = ( new Uint16Array([\n    114 ,\n    82 ,\n    29810 ,\n    115 ,\n    30579 ,\n    26483 ,\n    101 ,\n    102 ,\n    29286 ,\n    24934 ,\n    29030 ,\n    29798 ,\n    30822 ,\n    30310 ,\n    26470 ,\n    97 ,\n    113 ,\n    29809 ,\n    116 ,\n    84 ,\n    100 ,\n    119 ,\n    99 ,\n    122 ,\n    120 ,\n    118 ,\n    103 ,\n]));\nconst compatibilityJamo = ( new Uint16Array([\n    114 ,\n    82 ,\n    29810 ,\n    115 ,\n    30579 ,\n    26483 ,\n    101 ,\n    69 ,\n    102 ,\n    29286 ,\n    24934 ,\n    29030 ,\n    29798 ,\n    30822 ,\n    30310 ,\n    26470 ,\n    97 ,\n    113 ,\n    81 ,\n    29809 ,\n    116 ,\n    84 ,\n    100 ,\n    119 ,\n    87 ,\n    99 ,\n    122 ,\n    120 ,\n    118 ,\n    103 ,\n    107 ,\n    111 ,\n    105 ,\n    79 ,\n    106 ,\n    112 ,\n    117 ,\n    80 ,\n    104 ,\n    27496 ,\n    28520 ,\n    27752 ,\n    121 ,\n    110 ,\n    27246 ,\n    28782 ,\n    27758 ,\n    98 ,\n    109 ,\n    27757 ,\n    108 ,\n]));\nexport { getKoreanAltChars };\n"],"mappings":"AAAA,SAASA,iBAAiBA,CAACC,IAAI,EAAE;EAC7B,MAAMC,MAAM,GAAGC,iBAAiB,CAACF,IAAI,CAAC;EACtC,IAAIC,MAAM,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;IAC7B,OAAS,IAAIC,WAAW,CAACH,MAAM,CAAC;EACpC;EACA,OAAOI,SAAS;AACpB;AACA,IAAIC,gBAAgB,GAAG,CAAC;AACxB,MAAMC,UAAU,GAAK,IAAIH,WAAW,CAAC,EAAE,CAAE;AACzC,SAASF,iBAAiBA,CAACF,IAAI,EAAE;EAC7BM,gBAAgB,GAAG,CAAC;EACpBE,iBAAiB,CAACR,IAAI,EAAES,gBAAgB,EAAE,IAAK,CAAC;EAChD,IAAIH,gBAAgB,GAAG,CAAC,EAAE;IACtB,OAAOC,UAAU,CAACG,QAAQ,CAAC,CAAC,EAAEJ,gBAAgB,CAAC;EACnD;EACAE,iBAAiB,CAACR,IAAI,EAAEW,YAAY,EAAE,IAAK,CAAC;EAC5C,IAAIL,gBAAgB,GAAG,CAAC,EAAE;IACtB,OAAOC,UAAU,CAACG,QAAQ,CAAC,CAAC,EAAEJ,gBAAgB,CAAC;EACnD;EACAE,iBAAiB,CAACR,IAAI,EAAEY,qBAAqB,EAAE,IAAK,CAAC;EACrD,IAAIN,gBAAgB,GAAG,CAAC,EAAE;IACtB,OAAOC,UAAU,CAACG,QAAQ,CAAC,CAAC,EAAEJ,gBAAgB,CAAC;EACnD;EACAE,iBAAiB,CAACR,IAAI,EAAEa,iBAAiB,EAAE,KAAM,CAAC;EAClD,IAAIP,gBAAgB,EAAE;IAClB,OAAOC,UAAU,CAACG,QAAQ,CAAC,CAAC,EAAEJ,gBAAgB,CAAC;EACnD;EACA,IAAIN,IAAI,IAAI,MAAM,IAAIA,IAAI,IAAI,MAAM,EAAE;IAClC,MAAMc,WAAW,GAAGd,IAAI,GAAG,MAAM;IACjC,MAAMe,6BAA6B,GAAGD,WAAW,GAAG,GAAG;IACvD,MAAME,qBAAqB,GAAGC,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG,GAAG,CAAC;IAC3D,MAAMK,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACH,6BAA6B,GAAG,EAAE,CAAC;IACjE,MAAMK,mBAAmB,GAAGL,6BAA6B,GAAG,EAAE,GAAG,CAAC;IAClE,IAAIC,qBAAqB,GAAGP,gBAAgB,CAACN,MAAM,EAAE;MACjDK,iBAAiB,CAACQ,qBAAqB,EAAEP,gBAAgB,EAAE,CAAC,CAAC;IACjE,CAAC,MACI,IAAI,IAAI,GAAIO,qBAAqB,GAAG,KAAK,GAAIH,iBAAiB,CAACV,MAAM,EAAE;MACxEK,iBAAiB,CAAC,IAAI,GAAIQ,qBAAqB,EAAEH,iBAAiB,EAAE,KAAM,CAAC;IAC/E;IACA,IAAIM,UAAU,GAAGR,YAAY,CAACR,MAAM,EAAE;MAClCK,iBAAiB,CAACW,UAAU,EAAER,YAAY,EAAE,CAAC,CAAC;IAClD,CAAC,MACI,IAAI,IAAI,GAAIQ,UAAU,GAAG,KAAK,GAAIN,iBAAiB,CAACV,MAAM,EAAE;MAC7DK,iBAAiB,CAAC,IAAI,GAAIW,UAAU,GAAG,KAAK,EAAGN,iBAAiB,EAAE,KAAM,CAAC;IAC7E;IACA,IAAIO,mBAAmB,IAAI,CAAC,EAAE;MAC1B,IAAIA,mBAAmB,GAAGR,qBAAqB,CAACT,MAAM,EAAE;QACpDK,iBAAiB,CAACY,mBAAmB,EAAER,qBAAqB,EAAE,CAAC,CAAC;MACpE,CAAC,MACI,IAAI,IAAI,GAAIQ,mBAAmB,GAAG,KAAK,GAAIP,iBAAiB,CAACV,MAAM,EAAE;QACtEK,iBAAiB,CAAC,IAAI,GAAIY,mBAAmB,GAAG,KAAK,EAAGP,iBAAiB,EAAE,KAAM,CAAC;MACtF;IACJ;IACA,IAAIP,gBAAgB,GAAG,CAAC,EAAE;MACtB,OAAOC,UAAU,CAACG,QAAQ,CAAC,CAAC,EAAEJ,gBAAgB,CAAC;IACnD;EACJ;EACA,OAAOD,SAAS;AACpB;AACA,SAASG,iBAAiBA,CAACR,IAAI,EAAEqB,KAAK,EAAEC,eAAe,EAAE;EACrD,IAAItB,IAAI,IAAIsB,eAAe,IAAItB,IAAI,GAAGsB,eAAe,GAAGD,KAAK,CAAClB,MAAM,EAAE;IAClEoB,gBAAgB,CAACF,KAAK,CAACrB,IAAI,GAAGsB,eAAe,CAAC,CAAC;EACnD;AACJ;AACA,SAASC,gBAAgBA,CAACC,KAAK,EAAE;EAC7B,IAAIA,KAAK,KAAK,CAAC,EAAG;IACd;EACJ;EACAjB,UAAU,CAACD,gBAAgB,EAAE,CAAC,GAAGkB,KAAK,GAAG,IAAI;EAC7C,IAAIA,KAAK,IAAI,CAAC,EAAE;IACZjB,UAAU,CAACD,gBAAgB,EAAE,CAAC,GAAIkB,KAAK,IAAI,CAAC,GAAI,IAAI;EACxD;EACA,IAAIA,KAAK,IAAI,EAAE,EAAE;IACbjB,UAAU,CAACD,gBAAgB,EAAE,CAAC,GAAIkB,KAAK,IAAI,EAAE,GAAI,IAAI;EACzD;AACJ;AACA,MAAMf,gBAAgB,GAAK,IAAIgB,UAAU,CAAC,CACtC,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,EAAE,EACF,GAAG,EACH,EAAE,EACF,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,EAAE,EACF,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAE;AACH,MAAMd,YAAY,GAAK,IAAIe,WAAW,CAAC,CACnC,GAAG,EACH,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,GAAG,EACH,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,EAAE,EACF,GAAG,EACH,KAAK,EACL,GAAG,CACN,CAAE;AACH,MAAMd,qBAAqB,GAAK,IAAIc,WAAW,CAAC,CAC5C,GAAG,EACH,EAAE,EACF,KAAK,EACL,GAAG,EACH,KAAK,EACL,KAAK,EACL,GAAG,EACH,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,EAAE,EACF,GAAG,EACH,KAAK,EACL,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACN,CAAE;AACH,MAAMb,iBAAiB,GAAK,IAAIa,WAAW,CAAC,CACxC,GAAG,EACH,EAAE,EACF,KAAK,EACL,GAAG,EACH,KAAK,EACL,KAAK,EACL,GAAG,EACH,EAAE,EACF,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,EAAE,EACF,GAAG,EACH,EAAE,EACF,KAAK,EACL,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,EAAE,EACF,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,EAAE,EACF,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,GAAG,EACH,GAAG,EACH,KAAK,EACL,KAAK,EACL,KAAK,EACL,EAAE,EACF,GAAG,EACH,KAAK,EACL,GAAG,CACN,CAAE;AACH,SAAS3B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}