{"ast":null,"code":"import { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { equalsIgnoreCase, startsWithIgnoreCase } from './strings.js';\nimport { isNumber } from './types.js';\nfunction isPathSeparator(code) {\n  return code === 47 || code === 92;\n}\nfunction toSlashes(osPath) {\n  return osPath.replace(/[\\\\/]/g, posix.sep);\n}\nfunction toPosixPath(osPath) {\n  if (osPath.indexOf('/') === -1) {\n    osPath = toSlashes(osPath);\n  }\n  if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) {\n    osPath = '/' + osPath;\n  }\n  return osPath;\n}\nfunction getRoot(path, sep = posix.sep) {\n  if (!path) {\n    return '';\n  }\n  const len = path.length;\n  const firstLetter = path.charCodeAt(0);\n  if (isPathSeparator(firstLetter)) {\n    if (isPathSeparator(path.charCodeAt(1))) {\n      if (!isPathSeparator(path.charCodeAt(2))) {\n        let pos = 3;\n        const start = pos;\n        for (; pos < len; pos++) {\n          if (isPathSeparator(path.charCodeAt(pos))) {\n            break;\n          }\n        }\n        if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n          pos += 1;\n          for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n              return path.slice(0, pos + 1).replace(/[\\\\/]/g, sep);\n            }\n          }\n        }\n      }\n    }\n    return sep;\n  } else if (isWindowsDriveLetter(firstLetter)) {\n    if (path.charCodeAt(1) === 58) {\n      if (isPathSeparator(path.charCodeAt(2))) {\n        return path.slice(0, 2) + sep;\n      } else {\n        return path.slice(0, 2);\n      }\n    }\n  }\n  let pos = path.indexOf('://');\n  if (pos !== -1) {\n    pos += 3;\n    for (; pos < len; pos++) {\n      if (isPathSeparator(path.charCodeAt(pos))) {\n        return path.slice(0, pos + 1);\n      }\n    }\n  }\n  return '';\n}\nfunction isUNC(path) {\n  if (!isWindows) {\n    return false;\n  }\n  if (!path || path.length < 5) {\n    return false;\n  }\n  let code = path.charCodeAt(0);\n  if (code !== 92) {\n    return false;\n  }\n  code = path.charCodeAt(1);\n  if (code !== 92) {\n    return false;\n  }\n  let pos = 2;\n  const start = pos;\n  for (; pos < path.length; pos++) {\n    code = path.charCodeAt(pos);\n    if (code === 92) {\n      break;\n    }\n  }\n  if (start === pos) {\n    return false;\n  }\n  code = path.charCodeAt(pos + 1);\n  if (isNaN(code) || code === 92) {\n    return false;\n  }\n  return true;\n}\nconst WINDOWS_INVALID_FILE_CHARS = /[\\\\/:\\*\\?\"<>\\|]/g;\nconst UNIX_INVALID_FILE_CHARS = /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])(\\.(.*?))?$/i;\nfunction isValidBasename(name, isWindowsOS = isWindows) {\n  const invalidFileChars = isWindowsOS ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n  if (!name || name.length === 0 || /^\\s+$/.test(name)) {\n    return false;\n  }\n  invalidFileChars.lastIndex = 0;\n  if (invalidFileChars.test(name)) {\n    return false;\n  }\n  if (isWindowsOS && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n    return false;\n  }\n  if (name === '.' || name === '..') {\n    return false;\n  }\n  if (isWindowsOS && name[name.length - 1] === '.') {\n    return false;\n  }\n  if (isWindowsOS && name.length !== name.trim().length) {\n    return false;\n  }\n  if (name.length > 255) {\n    return false;\n  }\n  return true;\n}\nfunction isEqual(pathA, pathB, ignoreCase) {\n  const identityEquals = pathA === pathB;\n  if (!ignoreCase || identityEquals) {\n    return identityEquals;\n  }\n  if (!pathA || !pathB) {\n    return false;\n  }\n  return equalsIgnoreCase(pathA, pathB);\n}\nfunction isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n  if (base === parentCandidate) {\n    return true;\n  }\n  if (!base || !parentCandidate) {\n    return false;\n  }\n  if (parentCandidate.length > base.length) {\n    return false;\n  }\n  if (ignoreCase) {\n    const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n    if (!beginsWith) {\n      return false;\n    }\n    if (parentCandidate.length === base.length) {\n      return true;\n    }\n    let sepOffset = parentCandidate.length;\n    if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n      sepOffset--;\n    }\n    return base.charAt(sepOffset) === separator;\n  }\n  if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n    parentCandidate += separator;\n  }\n  return base.indexOf(parentCandidate) === 0;\n}\nfunction isWindowsDriveLetter(char0) {\n  return char0 >= 65 && char0 <= 90 || char0 >= 97 && char0 <= 122;\n}\nfunction hasDriveLetter(path, isWindowsOS = isWindows) {\n  if (isWindowsOS) {\n    return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58;\n  }\n  return false;\n}\nfunction getDriveLetter(path, isWindowsOS = isWindows) {\n  return hasDriveLetter(path, isWindowsOS) ? path[0] : undefined;\n}\nfunction indexOfPath(path, candidate, ignoreCase) {\n  if (candidate.length > path.length) {\n    return -1;\n  }\n  if (path === candidate) {\n    return 0;\n  }\n  if (ignoreCase) {\n    path = path.toLowerCase();\n    candidate = candidate.toLowerCase();\n  }\n  return path.indexOf(candidate);\n}\nfunction parseLineAndColumnAware(rawPath) {\n  const segments = rawPath.split(':');\n  let path = undefined;\n  let line = undefined;\n  let column = undefined;\n  for (const segment of segments) {\n    const segmentAsNumber = Number(segment);\n    if (!isNumber(segmentAsNumber)) {\n      path = !!path ? [path, segment].join(':') : segment;\n    } else if (line === undefined) {\n      line = segmentAsNumber;\n    } else if (column === undefined) {\n      column = segmentAsNumber;\n    }\n  }\n  if (!path) {\n    throw new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`');\n  }\n  return {\n    path,\n    line: line !== undefined ? line : undefined,\n    column: column !== undefined ? column : line !== undefined ? 1 : undefined\n  };\n}\nconst pathChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nconst windowsSafePathFirstChars = 'BDEFGHIJKMOQRSTUVWXYZbdefghijkmoqrstuvwxyz0123456789';\nfunction randomPath(parent, prefix, randomLength = 8) {\n  let suffix = '';\n  for (let i = 0; i < randomLength; i++) {\n    let pathCharsTouse;\n    if (i === 0 && isWindows && !prefix && (randomLength === 3 || randomLength === 4)) {\n      pathCharsTouse = windowsSafePathFirstChars;\n    } else {\n      pathCharsTouse = pathChars;\n    }\n    suffix += pathCharsTouse.charAt(Math.floor(Math.random() * pathCharsTouse.length));\n  }\n  let randomFileName;\n  {\n    randomFileName = suffix;\n  }\n  return randomFileName;\n}\nexport { getDriveLetter, getRoot, hasDriveLetter, indexOfPath, isEqual, isEqualOrParent, isPathSeparator, isUNC, isValidBasename, isWindowsDriveLetter, parseLineAndColumnAware, randomPath, toPosixPath, toSlashes };","map":{"version":3,"names":["posix","sep","isWindows","equalsIgnoreCase","startsWithIgnoreCase","isNumber","isPathSeparator","code","toSlashes","osPath","replace","toPosixPath","indexOf","test","getRoot","path","len","length","firstLetter","charCodeAt","pos","start","slice","isWindowsDriveLetter","isUNC","isNaN","WINDOWS_INVALID_FILE_CHARS","UNIX_INVALID_FILE_CHARS","WINDOWS_FORBIDDEN_NAMES","isValidBasename","name","isWindowsOS","invalidFileChars","lastIndex","trim","isEqual","pathA","pathB","ignoreCase","identityEquals","isEqualOrParent","base","parentCandidate","separator","beginsWith","sepOffset","charAt","char0","hasDriveLetter","getDriveLetter","undefined","indexOfPath","candidate","toLowerCase","parseLineAndColumnAware","rawPath","segments","split","line","column","segment","segmentAsNumber","Number","join","Error","pathChars","windowsSafePathFirstChars","randomPath","parent","prefix","randomLength","suffix","i","pathCharsTouse","Math","floor","random","randomFileName"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/extpath.js"],"sourcesContent":["import { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { equalsIgnoreCase, startsWithIgnoreCase } from './strings.js';\nimport { isNumber } from './types.js';\nfunction isPathSeparator(code) {\n    return code === 47  || code === 92 ;\n}\nfunction toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\nfunction toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) {\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\nfunction getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1)\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        if (path.charCodeAt(1) === 58 ) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                return path.slice(0, 2);\n            }\n        }\n    }\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3;\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1);\n            }\n        }\n    }\n    return '';\n}\nfunction isUNC(path) {\n    if (!isWindows) {\n        return false;\n    }\n    if (!path || path.length < 5) {\n        return false;\n    }\n    let code = path.charCodeAt(0);\n    if (code !== 92 ) {\n        return false;\n    }\n    code = path.charCodeAt(1);\n    if (code !== 92 ) {\n        return false;\n    }\n    let pos = 2;\n    const start = pos;\n    for (; pos < path.length; pos++) {\n        code = path.charCodeAt(pos);\n        if (code === 92 ) {\n            break;\n        }\n    }\n    if (start === pos) {\n        return false;\n    }\n    code = path.charCodeAt(pos + 1);\n    if (isNaN(code) || code === 92 ) {\n        return false;\n    }\n    return true;\n}\nconst WINDOWS_INVALID_FILE_CHARS = /[\\\\/:\\*\\?\"<>\\|]/g;\nconst UNIX_INVALID_FILE_CHARS = /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])(\\.(.*?))?$/i;\nfunction isValidBasename(name, isWindowsOS = isWindows) {\n    const invalidFileChars = isWindowsOS ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n    if (!name || name.length === 0 || /^\\s+$/.test(name)) {\n        return false;\n    }\n    invalidFileChars.lastIndex = 0;\n    if (invalidFileChars.test(name)) {\n        return false;\n    }\n    if (isWindowsOS && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n        return false;\n    }\n    if (name === '.' || name === '..') {\n        return false;\n    }\n    if (isWindowsOS && name[name.length - 1] === '.') {\n        return false;\n    }\n    if (isWindowsOS && name.length !== name.trim().length) {\n        return false;\n    }\n    if (name.length > 255) {\n        return false;\n    }\n    return true;\n}\nfunction isEqual(pathA, pathB, ignoreCase) {\n    const identityEquals = (pathA === pathB);\n    if (!ignoreCase || identityEquals) {\n        return identityEquals;\n    }\n    if (!pathA || !pathB) {\n        return false;\n    }\n    return equalsIgnoreCase(pathA, pathB);\n}\nfunction isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true;\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--;\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nfunction isWindowsDriveLetter(char0) {\n    return char0 >= 65  && char0 <= 90  || char0 >= 97  && char0 <= 122 ;\n}\nfunction hasDriveLetter(path, isWindowsOS = isWindows) {\n    if (isWindowsOS) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 ;\n    }\n    return false;\n}\nfunction getDriveLetter(path, isWindowsOS = isWindows) {\n    return hasDriveLetter(path, isWindowsOS) ? path[0] : undefined;\n}\nfunction indexOfPath(path, candidate, ignoreCase) {\n    if (candidate.length > path.length) {\n        return -1;\n    }\n    if (path === candidate) {\n        return 0;\n    }\n    if (ignoreCase) {\n        path = path.toLowerCase();\n        candidate = candidate.toLowerCase();\n    }\n    return path.indexOf(candidate);\n}\nfunction parseLineAndColumnAware(rawPath) {\n    const segments = rawPath.split(':');\n    let path = undefined;\n    let line = undefined;\n    let column = undefined;\n    for (const segment of segments) {\n        const segmentAsNumber = Number(segment);\n        if (!isNumber(segmentAsNumber)) {\n            path = !!path ? [path, segment].join(':') : segment;\n        }\n        else if (line === undefined) {\n            line = segmentAsNumber;\n        }\n        else if (column === undefined) {\n            column = segmentAsNumber;\n        }\n    }\n    if (!path) {\n        throw ( new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`'));\n    }\n    return {\n        path,\n        line: line !== undefined ? line : undefined,\n        column: column !== undefined ? column : line !== undefined ? 1 : undefined\n    };\n}\nconst pathChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nconst windowsSafePathFirstChars = 'BDEFGHIJKMOQRSTUVWXYZbdefghijkmoqrstuvwxyz0123456789';\nfunction randomPath(parent, prefix, randomLength = 8) {\n    let suffix = '';\n    for (let i = 0; i < randomLength; i++) {\n        let pathCharsTouse;\n        if (i === 0 && isWindows && !prefix && (randomLength === 3 || randomLength === 4)) {\n            pathCharsTouse = windowsSafePathFirstChars;\n        }\n        else {\n            pathCharsTouse = pathChars;\n        }\n        suffix += pathCharsTouse.charAt(Math.floor(Math.random() * pathCharsTouse.length));\n    }\n    let randomFileName;\n    {\n        randomFileName = suffix;\n    }\n    return randomFileName;\n}\nexport { getDriveLetter, getRoot, hasDriveLetter, indexOfPath, isEqual, isEqualOrParent, isPathSeparator, isUNC, isValidBasename, isWindowsDriveLetter, parseLineAndColumnAware, randomPath, toPosixPath, toSlashes };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}