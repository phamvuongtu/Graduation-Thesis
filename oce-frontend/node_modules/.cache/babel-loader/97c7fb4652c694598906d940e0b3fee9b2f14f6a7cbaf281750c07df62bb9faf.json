{"ast":null,"code":"import { findFirstIdxMonotonousOrArrLen } from './arraysFind.js';\nfunction tail(array, n = 0) {\n  return array[array.length - (1 + n)];\n}\nfunction tail2(arr) {\n  if (arr.length === 0) {\n    throw new Error('Invalid tail call');\n  }\n  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nfunction equals(one, other, itemEquals = (a, b) => a === b) {\n  if (one === other) {\n    return true;\n  }\n  if (!one || !other) {\n    return false;\n  }\n  if (one.length !== other.length) {\n    return false;\n  }\n  for (let i = 0, len = one.length; i < len; i++) {\n    if (!itemEquals(one[i], other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction removeFastWithoutKeepingOrder(array, index) {\n  const last = array.length - 1;\n  if (index < last) {\n    array[index] = array[last];\n  }\n  array.pop();\n}\nfunction binarySearch(array, key, comparator) {\n  return binarySearch2(array.length, i => comparator(array[i], key));\n}\nfunction binarySearch2(length, compareToKey) {\n  let low = 0,\n    high = length - 1;\n  while (low <= high) {\n    const mid = (low + high) / 2 | 0;\n    const comp = compareToKey(mid);\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(low + 1);\n}\nfunction quickSelect(nth, data, compare) {\n  nth = nth | 0;\n  if (nth >= data.length) {\n    throw new TypeError('invalid index');\n  }\n  const pivotValue = data[Math.floor(data.length * Math.random())];\n  const lower = [];\n  const higher = [];\n  const pivots = [];\n  for (const value of data) {\n    const val = compare(value, pivotValue);\n    if (val < 0) {\n      lower.push(value);\n    } else if (val > 0) {\n      higher.push(value);\n    } else {\n      pivots.push(value);\n    }\n  }\n  if (nth < lower.length) {\n    return quickSelect(nth, lower, compare);\n  } else if (nth < lower.length + pivots.length) {\n    return pivots[0];\n  } else {\n    return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n  }\n}\nfunction groupBy(data, compare) {\n  const result = [];\n  let currentGroup = undefined;\n  for (const element of data.slice(0).sort(compare)) {\n    if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n      currentGroup = [element];\n      result.push(currentGroup);\n    } else {\n      currentGroup.push(element);\n    }\n  }\n  return result;\n}\nfunction* groupAdjacentBy(items, shouldBeGrouped) {\n  let currentGroup;\n  let last;\n  for (const item of items) {\n    if (last !== undefined && shouldBeGrouped(last, item)) {\n      currentGroup.push(item);\n    } else {\n      if (currentGroup) {\n        yield currentGroup;\n      }\n      currentGroup = [item];\n    }\n    last = item;\n  }\n  if (currentGroup) {\n    yield currentGroup;\n  }\n}\nfunction forEachAdjacent(arr, f) {\n  for (let i = 0; i <= arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n  }\n}\nfunction forEachWithNeighbors(arr, f) {\n  for (let i = 0; i < arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n  }\n}\nfunction sortedDiff(before, after, compare) {\n  const result = [];\n  function pushSplice(start, deleteCount, toInsert) {\n    if (deleteCount === 0 && toInsert.length === 0) {\n      return;\n    }\n    const latest = result[result.length - 1];\n    if (latest && latest.start + latest.deleteCount === start) {\n      latest.deleteCount += deleteCount;\n      latest.toInsert.push(...toInsert);\n    } else {\n      result.push({\n        start,\n        deleteCount,\n        toInsert\n      });\n    }\n  }\n  let beforeIdx = 0;\n  let afterIdx = 0;\n  while (true) {\n    if (beforeIdx === before.length) {\n      pushSplice(beforeIdx, 0, after.slice(afterIdx));\n      break;\n    }\n    if (afterIdx === after.length) {\n      pushSplice(beforeIdx, before.length - beforeIdx, []);\n      break;\n    }\n    const beforeElement = before[beforeIdx];\n    const afterElement = after[afterIdx];\n    const n = compare(beforeElement, afterElement);\n    if (n === 0) {\n      beforeIdx += 1;\n      afterIdx += 1;\n    } else if (n < 0) {\n      pushSplice(beforeIdx, 1, []);\n      beforeIdx += 1;\n    } else if (n > 0) {\n      pushSplice(beforeIdx, 0, [afterElement]);\n      afterIdx += 1;\n    }\n  }\n  return result;\n}\nfunction delta(before, after, compare) {\n  const splices = sortedDiff(before, after, compare);\n  const removed = [];\n  const added = [];\n  for (const splice of splices) {\n    removed.push(...before.slice(splice.start, splice.start + splice.deleteCount));\n    added.push(...splice.toInsert);\n  }\n  return {\n    removed,\n    added\n  };\n}\nfunction top(array, compare, n) {\n  if (n === 0) {\n    return [];\n  }\n  const result = array.slice(0, n).sort(compare);\n  topStep(array, compare, result, n, array.length);\n  return result;\n}\nfunction topStep(array, compare, result, i, m) {\n  for (const n = result.length; i < m; i++) {\n    const element = array[i];\n    if (compare(element, result[n - 1]) < 0) {\n      result.pop();\n      const j = findFirstIdxMonotonousOrArrLen(result, e => compare(element, e) < 0);\n      result.splice(j, 0, element);\n    }\n  }\n}\nfunction coalesce(array) {\n  return array.filter(e => !!e);\n}\nfunction coalesceInPlace(array) {\n  let to = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (!!array[i]) {\n      array[to] = array[i];\n      to += 1;\n    }\n  }\n  array.length = to;\n}\nfunction move(array, from, to) {\n  array.splice(to, 0, array.splice(from, 1)[0]);\n}\nfunction isFalsyOrEmpty(obj) {\n  return !Array.isArray(obj) || obj.length === 0;\n}\nfunction isNonEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length > 0;\n}\nfunction distinct(array, keyFn = value => value) {\n  const seen = new Set();\n  return array.filter(element => {\n    const key = keyFn(element);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\nfunction uniqueFilter(keyFn) {\n  const seen = new Set();\n  return element => {\n    const key = keyFn(element);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  };\n}\nfunction firstOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[0] : notFoundValue;\n}\nfunction lastOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[array.length - 1] : notFoundValue;\n}\nfunction commonPrefixLength(one, other, equals = (a, b) => a === b) {\n  let result = 0;\n  for (let i = 0, len = Math.min(one.length, other.length); i < len && equals(one[i], other[i]); i++) {\n    result++;\n  }\n  return result;\n}\nfunction flatten(arr) {\n  return [].concat(...arr);\n}\nfunction range(arg, to) {\n  let from = typeof to === 'number' ? arg : 0;\n  if (typeof to === 'number') {\n    from = arg;\n  } else {\n    from = 0;\n    to = arg;\n  }\n  const result = [];\n  if (from <= to) {\n    for (let i = from; i < to; i++) {\n      result.push(i);\n    }\n  } else {\n    for (let i = from; i > to; i--) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction index(array, indexer, mapper) {\n  return array.reduce((r, t) => {\n    r[indexer(t)] = mapper ? mapper(t) : t;\n    return r;\n  }, Object.create(null));\n}\nfunction insert(array, element) {\n  array.push(element);\n  return () => remove(array, element);\n}\nfunction remove(array, element) {\n  const index = array.indexOf(element);\n  if (index > -1) {\n    array.splice(index, 1);\n    return element;\n  }\n  return undefined;\n}\nfunction arrayInsert(target, insertIndex, insertArr) {\n  const before = target.slice(0, insertIndex);\n  const after = target.slice(insertIndex);\n  return before.concat(insertArr, after);\n}\nfunction shuffle(array, _seed) {\n  let rand;\n  if (typeof _seed === 'number') {\n    let seed = _seed;\n    rand = () => {\n      const x = Math.sin(seed++) * 179426549;\n      return x - Math.floor(x);\n    };\n  } else {\n    rand = Math.random;\n  }\n  for (let i = array.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(rand() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\nfunction pushToStart(arr, value) {\n  const index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.unshift(value);\n  }\n}\nfunction pushToEnd(arr, value) {\n  const index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.push(value);\n  }\n}\nfunction pushMany(arr, items) {\n  for (const item of items) {\n    arr.push(item);\n  }\n}\nfunction mapArrayOrNot(items, fn) {\n  return Array.isArray(items) ? items.map(fn) : fn(items);\n}\nfunction asArray(x) {\n  return Array.isArray(x) ? x : [x];\n}\nfunction insertInto(array, start, newItems) {\n  const startIdx = getActualStartIndex(array, start);\n  const originalLength = array.length;\n  const newItemsLength = newItems.length;\n  array.length = originalLength + newItemsLength;\n  for (let i = originalLength - 1; i >= startIdx; i--) {\n    array[i + newItemsLength] = array[i];\n  }\n  for (let i = 0; i < newItemsLength; i++) {\n    array[i + startIdx] = newItems[i];\n  }\n}\nfunction splice(array, start, deleteCount, newItems) {\n  const index = getActualStartIndex(array, start);\n  let result = array.splice(index, deleteCount);\n  if (result === undefined) {\n    result = [];\n  }\n  insertInto(array, index, newItems);\n  return result;\n}\nfunction getActualStartIndex(array, start) {\n  return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nvar CompareResult;\n(function (CompareResult) {\n  function isLessThan(result) {\n    return result < 0;\n  }\n  CompareResult.isLessThan = isLessThan;\n  function isLessThanOrEqual(result) {\n    return result <= 0;\n  }\n  CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n  function isGreaterThan(result) {\n    return result > 0;\n  }\n  CompareResult.isGreaterThan = isGreaterThan;\n  function isNeitherLessOrGreaterThan(result) {\n    return result === 0;\n  }\n  CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n  CompareResult.greaterThan = 1;\n  CompareResult.lessThan = -1;\n  CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {}));\nfunction compareBy(selector, comparator) {\n  return (a, b) => comparator(selector(a), selector(b));\n}\nfunction tieBreakComparators(...comparators) {\n  return (item1, item2) => {\n    for (const comparator of comparators) {\n      const result = comparator(item1, item2);\n      if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n        return result;\n      }\n    }\n    return CompareResult.neitherLessOrGreaterThan;\n  };\n}\nconst numberComparator = (a, b) => a - b;\nconst booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\nfunction reverseOrder(comparator) {\n  return (a, b) => -comparator(a, b);\n}\nclass ArrayQueue {\n  constructor(items) {\n    this.items = items;\n    this.firstIdx = 0;\n    this.lastIdx = this.items.length - 1;\n  }\n  get length() {\n    return this.lastIdx - this.firstIdx + 1;\n  }\n  takeWhile(predicate) {\n    let startIdx = this.firstIdx;\n    while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n      startIdx++;\n    }\n    const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n    this.firstIdx = startIdx;\n    return result;\n  }\n  takeFromEndWhile(predicate) {\n    let endIdx = this.lastIdx;\n    while (endIdx >= 0 && predicate(this.items[endIdx])) {\n      endIdx--;\n    }\n    const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n    this.lastIdx = endIdx;\n    return result;\n  }\n  peek() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    return this.items[this.firstIdx];\n  }\n  peekLast() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    return this.items[this.lastIdx];\n  }\n  dequeue() {\n    const result = this.items[this.firstIdx];\n    this.firstIdx++;\n    return result;\n  }\n  removeLast() {\n    const result = this.items[this.lastIdx];\n    this.lastIdx--;\n    return result;\n  }\n  takeCount(count) {\n    const result = this.items.slice(this.firstIdx, this.firstIdx + count);\n    this.firstIdx += count;\n    return result;\n  }\n}\nclass CallbackIterable {\n  static {\n    this.empty = new CallbackIterable(_callback => {});\n  }\n  constructor(iterate) {\n    this.iterate = iterate;\n  }\n  forEach(handler) {\n    this.iterate(item => {\n      handler(item);\n      return true;\n    });\n  }\n  toArray() {\n    const result = [];\n    this.iterate(item => {\n      result.push(item);\n      return true;\n    });\n    return result;\n  }\n  filter(predicate) {\n    return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));\n  }\n  map(mapFn) {\n    return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));\n  }\n  some(predicate) {\n    let result = false;\n    this.iterate(item => {\n      result = predicate(item);\n      return !result;\n    });\n    return result;\n  }\n  findFirst(predicate) {\n    let result;\n    this.iterate(item => {\n      if (predicate(item)) {\n        result = item;\n        return false;\n      }\n      return true;\n    });\n    return result;\n  }\n  findLast(predicate) {\n    let result;\n    this.iterate(item => {\n      if (predicate(item)) {\n        result = item;\n      }\n      return true;\n    });\n    return result;\n  }\n  findLastMaxBy(comparator) {\n    let result;\n    let first = true;\n    this.iterate(item => {\n      if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n        first = false;\n        result = item;\n      }\n      return true;\n    });\n    return result;\n  }\n}\nclass Permutation {\n  constructor(_indexMap) {\n    this._indexMap = _indexMap;\n  }\n  static createSortPermutation(arr, compareFn) {\n    const sortIndices = Array.from(arr.keys()).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\n    return new Permutation(sortIndices);\n  }\n  apply(arr) {\n    return arr.map((_, index) => arr[this._indexMap[index]]);\n  }\n  inverse() {\n    const inverseIndexMap = this._indexMap.slice();\n    for (let i = 0; i < this._indexMap.length; i++) {\n      inverseIndexMap[this._indexMap[i]] = i;\n    }\n    return new Permutation(inverseIndexMap);\n  }\n}\nexport { ArrayQueue, CallbackIterable, CompareResult, Permutation, arrayInsert, asArray, binarySearch, binarySearch2, booleanComparator, coalesce, coalesceInPlace, commonPrefixLength, compareBy, delta, distinct, equals, firstOrDefault, flatten, forEachAdjacent, forEachWithNeighbors, groupAdjacentBy, groupBy, index, insert, insertInto, isFalsyOrEmpty, isNonEmptyArray, lastOrDefault, mapArrayOrNot, move, numberComparator, pushMany, pushToEnd, pushToStart, quickSelect, range, remove, removeFastWithoutKeepingOrder, reverseOrder, shuffle, sortedDiff, splice, tail, tail2, tieBreakComparators, top, uniqueFilter };","map":{"version":3,"names":["findFirstIdxMonotonousOrArrLen","tail","array","n","length","tail2","arr","Error","slice","equals","one","other","itemEquals","a","b","i","len","removeFastWithoutKeepingOrder","index","last","pop","binarySearch","key","comparator","binarySearch2","compareToKey","low","high","mid","comp","quickSelect","nth","data","compare","TypeError","pivotValue","Math","floor","random","lower","higher","pivots","value","val","push","groupBy","result","currentGroup","undefined","element","sort","groupAdjacentBy","items","shouldBeGrouped","item","forEachAdjacent","f","forEachWithNeighbors","sortedDiff","before","after","pushSplice","start","deleteCount","toInsert","latest","beforeIdx","afterIdx","beforeElement","afterElement","delta","splices","removed","added","splice","top","topStep","m","j","e","coalesce","filter","coalesceInPlace","to","move","from","isFalsyOrEmpty","obj","Array","isArray","isNonEmptyArray","distinct","keyFn","seen","Set","has","add","uniqueFilter","firstOrDefault","notFoundValue","lastOrDefault","commonPrefixLength","min","flatten","concat","range","arg","indexer","mapper","reduce","r","t","Object","create","insert","remove","indexOf","arrayInsert","target","insertIndex","insertArr","shuffle","_seed","rand","seed","x","sin","temp","pushToStart","unshift","pushToEnd","pushMany","mapArrayOrNot","fn","map","asArray","insertInto","newItems","startIdx","getActualStartIndex","originalLength","newItemsLength","max","CompareResult","isLessThan","isLessThanOrEqual","isGreaterThan","isNeitherLessOrGreaterThan","greaterThan","lessThan","neitherLessOrGreaterThan","compareBy","selector","tieBreakComparators","comparators","item1","item2","numberComparator","booleanComparator","reverseOrder","ArrayQueue","constructor","firstIdx","lastIdx","takeWhile","predicate","takeFromEndWhile","endIdx","peek","peekLast","dequeue","removeLast","takeCount","count","CallbackIterable","empty","_callback","iterate","forEach","handler","toArray","cb","mapFn","some","findFirst","findLast","findLastMaxBy","first","Permutation","_indexMap","createSortPermutation","compareFn","sortIndices","keys","index1","index2","apply","_","inverse","inverseIndexMap"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/arrays.js"],"sourcesContent":["import { findFirstIdxMonotonousOrArrLen } from './arraysFind.js';\nfunction tail(array, n = 0) {\n    return array[array.length - (1 + n)];\n}\nfunction tail2(arr) {\n    if (arr.length === 0) {\n        throw ( new Error('Invalid tail call'));\n    }\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nfunction equals(one, other, itemEquals = (a, b) => a === b) {\n    if (one === other) {\n        return true;\n    }\n    if (!one || !other) {\n        return false;\n    }\n    if (one.length !== other.length) {\n        return false;\n    }\n    for (let i = 0, len = one.length; i < len; i++) {\n        if (!itemEquals(one[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction removeFastWithoutKeepingOrder(array, index) {\n    const last = array.length - 1;\n    if (index < last) {\n        array[index] = array[last];\n    }\n    array.pop();\n}\nfunction binarySearch(array, key, comparator) {\n    return binarySearch2(array.length, i => comparator(array[i], key));\n}\nfunction binarySearch2(length, compareToKey) {\n    let low = 0, high = length - 1;\n    while (low <= high) {\n        const mid = ((low + high) / 2) | 0;\n        const comp = compareToKey(mid);\n        if (comp < 0) {\n            low = mid + 1;\n        }\n        else if (comp > 0) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return -(low + 1);\n}\nfunction quickSelect(nth, data, compare) {\n    nth = nth | 0;\n    if (nth >= data.length) {\n        throw ( new TypeError('invalid index'));\n    }\n    const pivotValue = data[Math.floor(data.length * Math.random())];\n    const lower = [];\n    const higher = [];\n    const pivots = [];\n    for (const value of data) {\n        const val = compare(value, pivotValue);\n        if (val < 0) {\n            lower.push(value);\n        }\n        else if (val > 0) {\n            higher.push(value);\n        }\n        else {\n            pivots.push(value);\n        }\n    }\n    if (nth < lower.length) {\n        return quickSelect(nth, lower, compare);\n    }\n    else if (nth < lower.length + pivots.length) {\n        return pivots[0];\n    }\n    else {\n        return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n    }\n}\nfunction groupBy(data, compare) {\n    const result = [];\n    let currentGroup = undefined;\n    for (const element of data.slice(0).sort(compare)) {\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n            currentGroup = [element];\n            result.push(currentGroup);\n        }\n        else {\n            currentGroup.push(element);\n        }\n    }\n    return result;\n}\nfunction* groupAdjacentBy(items, shouldBeGrouped) {\n    let currentGroup;\n    let last;\n    for (const item of items) {\n        if (last !== undefined && shouldBeGrouped(last, item)) {\n            currentGroup.push(item);\n        }\n        else {\n            if (currentGroup) {\n                yield currentGroup;\n            }\n            currentGroup = [item];\n        }\n        last = item;\n    }\n    if (currentGroup) {\n        yield currentGroup;\n    }\n}\nfunction forEachAdjacent(arr, f) {\n    for (let i = 0; i <= arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n    }\n}\nfunction forEachWithNeighbors(arr, f) {\n    for (let i = 0; i < arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n    }\n}\nfunction sortedDiff(before, after, compare) {\n    const result = [];\n    function pushSplice(start, deleteCount, toInsert) {\n        if (deleteCount === 0 && toInsert.length === 0) {\n            return;\n        }\n        const latest = result[result.length - 1];\n        if (latest && latest.start + latest.deleteCount === start) {\n            latest.deleteCount += deleteCount;\n            latest.toInsert.push(...toInsert);\n        }\n        else {\n            result.push({ start, deleteCount, toInsert });\n        }\n    }\n    let beforeIdx = 0;\n    let afterIdx = 0;\n    while (true) {\n        if (beforeIdx === before.length) {\n            pushSplice(beforeIdx, 0, after.slice(afterIdx));\n            break;\n        }\n        if (afterIdx === after.length) {\n            pushSplice(beforeIdx, before.length - beforeIdx, []);\n            break;\n        }\n        const beforeElement = before[beforeIdx];\n        const afterElement = after[afterIdx];\n        const n = compare(beforeElement, afterElement);\n        if (n === 0) {\n            beforeIdx += 1;\n            afterIdx += 1;\n        }\n        else if (n < 0) {\n            pushSplice(beforeIdx, 1, []);\n            beforeIdx += 1;\n        }\n        else if (n > 0) {\n            pushSplice(beforeIdx, 0, [afterElement]);\n            afterIdx += 1;\n        }\n    }\n    return result;\n}\nfunction delta(before, after, compare) {\n    const splices = sortedDiff(before, after, compare);\n    const removed = [];\n    const added = [];\n    for (const splice of splices) {\n        removed.push(...before.slice(splice.start, splice.start + splice.deleteCount));\n        added.push(...splice.toInsert);\n    }\n    return { removed, added };\n}\nfunction top(array, compare, n) {\n    if (n === 0) {\n        return [];\n    }\n    const result = array.slice(0, n).sort(compare);\n    topStep(array, compare, result, n, array.length);\n    return result;\n}\nfunction topStep(array, compare, result, i, m) {\n    for (const n = result.length; i < m; i++) {\n        const element = array[i];\n        if (compare(element, result[n - 1]) < 0) {\n            result.pop();\n            const j = findFirstIdxMonotonousOrArrLen(result, e => compare(element, e) < 0);\n            result.splice(j, 0, element);\n        }\n    }\n}\nfunction coalesce(array) {\n    return array.filter(e => !!e);\n}\nfunction coalesceInPlace(array) {\n    let to = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (!!array[i]) {\n            array[to] = array[i];\n            to += 1;\n        }\n    }\n    array.length = to;\n}\nfunction move(array, from, to) {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n}\nfunction isFalsyOrEmpty(obj) {\n    return !Array.isArray(obj) || obj.length === 0;\n}\nfunction isNonEmptyArray(obj) {\n    return Array.isArray(obj) && obj.length > 0;\n}\nfunction distinct(array, keyFn = value => value) {\n    const seen = ( new Set());\n    return array.filter(element => {\n        const key = keyFn(element);\n        if (( seen.has(key))) {\n            return false;\n        }\n        seen.add(key);\n        return true;\n    });\n}\nfunction uniqueFilter(keyFn) {\n    const seen = ( new Set());\n    return element => {\n        const key = keyFn(element);\n        if (( seen.has(key))) {\n            return false;\n        }\n        seen.add(key);\n        return true;\n    };\n}\nfunction firstOrDefault(array, notFoundValue) {\n    return array.length > 0 ? array[0] : notFoundValue;\n}\nfunction lastOrDefault(array, notFoundValue) {\n    return array.length > 0 ? array[array.length - 1] : notFoundValue;\n}\nfunction commonPrefixLength(one, other, equals = (a, b) => a === b) {\n    let result = 0;\n    for (let i = 0, len = Math.min(one.length, other.length); i < len && equals(one[i], other[i]); i++) {\n        result++;\n    }\n    return result;\n}\nfunction flatten(arr) {\n    return [].concat(...arr);\n}\nfunction range(arg, to) {\n    let from = typeof to === 'number' ? arg : 0;\n    if (typeof to === 'number') {\n        from = arg;\n    }\n    else {\n        from = 0;\n        to = arg;\n    }\n    const result = [];\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    }\n    else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n    return result;\n}\nfunction index(array, indexer, mapper) {\n    return array.reduce((r, t) => {\n        r[indexer(t)] = mapper ? mapper(t) : t;\n        return r;\n    }, Object.create(null));\n}\nfunction insert(array, element) {\n    array.push(element);\n    return () => remove(array, element);\n}\nfunction remove(array, element) {\n    const index = array.indexOf(element);\n    if (index > -1) {\n        array.splice(index, 1);\n        return element;\n    }\n    return undefined;\n}\nfunction arrayInsert(target, insertIndex, insertArr) {\n    const before = target.slice(0, insertIndex);\n    const after = target.slice(insertIndex);\n    return before.concat(insertArr, after);\n}\nfunction shuffle(array, _seed) {\n    let rand;\n    if (typeof _seed === 'number') {\n        let seed = _seed;\n        rand = () => {\n            const x = Math.sin(seed++) * 179426549;\n            return x - Math.floor(x);\n        };\n    }\n    else {\n        rand = Math.random;\n    }\n    for (let i = array.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(rand() * (i + 1));\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\nfunction pushToStart(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\nfunction pushToEnd(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\nfunction pushMany(arr, items) {\n    for (const item of items) {\n        arr.push(item);\n    }\n}\nfunction mapArrayOrNot(items, fn) {\n    return Array.isArray(items) ?\n        ( items.map(fn)) :\n        fn(items);\n}\nfunction asArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\nfunction insertInto(array, start, newItems) {\n    const startIdx = getActualStartIndex(array, start);\n    const originalLength = array.length;\n    const newItemsLength = newItems.length;\n    array.length = originalLength + newItemsLength;\n    for (let i = originalLength - 1; i >= startIdx; i--) {\n        array[i + newItemsLength] = array[i];\n    }\n    for (let i = 0; i < newItemsLength; i++) {\n        array[i + startIdx] = newItems[i];\n    }\n}\nfunction splice(array, start, deleteCount, newItems) {\n    const index = getActualStartIndex(array, start);\n    let result = array.splice(index, deleteCount);\n    if (result === undefined) {\n        result = [];\n    }\n    insertInto(array, index, newItems);\n    return result;\n}\nfunction getActualStartIndex(array, start) {\n    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nvar CompareResult;\n( (function(CompareResult) {\n    function isLessThan(result) {\n        return result < 0;\n    }\n    CompareResult.isLessThan = isLessThan;\n    function isLessThanOrEqual(result) {\n        return result <= 0;\n    }\n    CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n    function isGreaterThan(result) {\n        return result > 0;\n    }\n    CompareResult.isGreaterThan = isGreaterThan;\n    function isNeitherLessOrGreaterThan(result) {\n        return result === 0;\n    }\n    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n    CompareResult.greaterThan = 1;\n    CompareResult.lessThan = -1;\n    CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {})));\nfunction compareBy(selector, comparator) {\n    return (a, b) => comparator(selector(a), selector(b));\n}\nfunction tieBreakComparators(...comparators) {\n    return (item1, item2) => {\n        for (const comparator of comparators) {\n            const result = comparator(item1, item2);\n            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n                return result;\n            }\n        }\n        return CompareResult.neitherLessOrGreaterThan;\n    };\n}\nconst numberComparator = (a, b) => a - b;\nconst booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\nfunction reverseOrder(comparator) {\n    return (a, b) => -comparator(a, b);\n}\nclass ArrayQueue {\n    constructor(items) {\n        this.items = items;\n        this.firstIdx = 0;\n        this.lastIdx = this.items.length - 1;\n    }\n    get length() {\n        return this.lastIdx - this.firstIdx + 1;\n    }\n    takeWhile(predicate) {\n        let startIdx = this.firstIdx;\n        while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n            startIdx++;\n        }\n        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n        this.firstIdx = startIdx;\n        return result;\n    }\n    takeFromEndWhile(predicate) {\n        let endIdx = this.lastIdx;\n        while (endIdx >= 0 && predicate(this.items[endIdx])) {\n            endIdx--;\n        }\n        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n        this.lastIdx = endIdx;\n        return result;\n    }\n    peek() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        return this.items[this.firstIdx];\n    }\n    peekLast() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        return this.items[this.lastIdx];\n    }\n    dequeue() {\n        const result = this.items[this.firstIdx];\n        this.firstIdx++;\n        return result;\n    }\n    removeLast() {\n        const result = this.items[this.lastIdx];\n        this.lastIdx--;\n        return result;\n    }\n    takeCount(count) {\n        const result = this.items.slice(this.firstIdx, this.firstIdx + count);\n        this.firstIdx += count;\n        return result;\n    }\n}\nclass CallbackIterable {\n    static { this.empty = ( new CallbackIterable(_callback => { })); }\n    constructor(\n    iterate) {\n        this.iterate = iterate;\n    }\n    forEach(handler) {\n        this.iterate(item => { handler(item); return true; });\n    }\n    toArray() {\n        const result = [];\n        this.iterate(item => { result.push(item); return true; });\n        return result;\n    }\n    filter(predicate) {\n        return ( new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true)));\n    }\n    map(mapFn) {\n        return ( new CallbackIterable(cb => this.iterate(item => cb(mapFn(item)))));\n    }\n    some(predicate) {\n        let result = false;\n        this.iterate(item => { result = predicate(item); return !result; });\n        return result;\n    }\n    findFirst(predicate) {\n        let result;\n        this.iterate(item => {\n            if (predicate(item)) {\n                result = item;\n                return false;\n            }\n            return true;\n        });\n        return result;\n    }\n    findLast(predicate) {\n        let result;\n        this.iterate(item => {\n            if (predicate(item)) {\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n    findLastMaxBy(comparator) {\n        let result;\n        let first = true;\n        this.iterate(item => {\n            if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n                first = false;\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n}\nclass Permutation {\n    constructor(_indexMap) {\n        this._indexMap = _indexMap;\n    }\n    static createSortPermutation(arr, compareFn) {\n        const sortIndices = Array.from(( arr.keys())).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\n        return ( new Permutation(sortIndices));\n    }\n    apply(arr) {\n        return ( arr.map((_, index) => arr[this._indexMap[index]]));\n    }\n    inverse() {\n        const inverseIndexMap = this._indexMap.slice();\n        for (let i = 0; i < this._indexMap.length; i++) {\n            inverseIndexMap[this._indexMap[i]] = i;\n        }\n        return ( new Permutation(inverseIndexMap));\n    }\n}\nexport { ArrayQueue, CallbackIterable, CompareResult, Permutation, arrayInsert, asArray, binarySearch, binarySearch2, booleanComparator, coalesce, coalesceInPlace, commonPrefixLength, compareBy, delta, distinct, equals, firstOrDefault, flatten, forEachAdjacent, forEachWithNeighbors, groupAdjacentBy, groupBy, index, insert, insertInto, isFalsyOrEmpty, isNonEmptyArray, lastOrDefault, mapArrayOrNot, move, numberComparator, pushMany, pushToEnd, pushToStart, quickSelect, range, remove, removeFastWithoutKeepingOrder, reverseOrder, shuffle, sortedDiff, splice, tail, tail2, tieBreakComparators, top, uniqueFilter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}