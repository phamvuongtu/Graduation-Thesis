{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DidSaveTextDocumentFeature = exports.WillSaveWaitUntilFeature = exports.WillSaveFeature = exports.DidChangeTextDocumentFeature = exports.DidCloseTextDocumentFeature = exports.DidOpenTextDocumentFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DidOpenTextDocumentFeature extends features_1.TextDocumentEventFeature {\n  constructor(client, syncedDocuments) {\n    super(client, vscode_1.workspace.onDidOpenTextDocument, vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, () => client.middleware.didOpen, textDocument => client.code2ProtocolConverter.asOpenTextDocumentParams(textDocument), data => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n    this._syncedDocuments = syncedDocuments;\n  }\n  get openDocuments() {\n    return this._syncedDocuments.values();\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: {\n          documentSelector: documentSelector\n        }\n      });\n    }\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type;\n  }\n  register(data) {\n    super.register(data);\n    if (!data.registerOptions.documentSelector) {\n      return;\n    }\n    const documentSelector = this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector);\n    vscode_1.workspace.textDocuments.forEach(textDocument => {\n      const uri = textDocument.uri.toString();\n      if (this._syncedDocuments.has(uri)) {\n        return;\n      }\n      if (vscode_1.languages.match(documentSelector, textDocument) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {\n        const middleware = this._client.middleware;\n        const didOpen = textDocument => {\n          return this._client.sendNotification(this._type, this._createParams(textDocument));\n        };\n        (middleware.didOpen ? middleware.didOpen(textDocument, didOpen) : didOpen(textDocument)).catch(error => {\n          this._client.error(`Sending document notification ${this._type.method} failed`, error);\n        });\n        this._syncedDocuments.set(uri, textDocument);\n      }\n    });\n  }\n  getTextDocument(data) {\n    return data;\n  }\n  notificationSent(textDocument, type, params) {\n    this._syncedDocuments.set(textDocument.uri.toString(), textDocument);\n    super.notificationSent(textDocument, type, params);\n  }\n}\nexports.DidOpenTextDocumentFeature = DidOpenTextDocumentFeature;\nclass DidCloseTextDocumentFeature extends features_1.TextDocumentEventFeature {\n  constructor(client, syncedDocuments, pendingTextDocumentChanges) {\n    super(client, vscode_1.workspace.onDidCloseTextDocument, vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, () => client.middleware.didClose, textDocument => client.code2ProtocolConverter.asCloseTextDocumentParams(textDocument), data => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n    this._syncedDocuments = syncedDocuments;\n    this._pendingTextDocumentChanges = pendingTextDocumentChanges;\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: {\n          documentSelector: documentSelector\n        }\n      });\n    }\n  }\n  async callback(data) {\n    await super.callback(data);\n    this._pendingTextDocumentChanges.delete(data.uri.toString());\n  }\n  getTextDocument(data) {\n    return data;\n  }\n  notificationSent(textDocument, type, params) {\n    this._syncedDocuments.delete(textDocument.uri.toString());\n    super.notificationSent(textDocument, type, params);\n  }\n  unregister(id) {\n    const selector = this._selectors.get(id);\n    // The super call removed the selector from the map\n    // of selectors.\n    super.unregister(id);\n    const selectors = this._selectors.values();\n    this._syncedDocuments.forEach(textDocument => {\n      if (vscode_1.languages.match(selector, textDocument) > 0 && !this._selectorFilter(selectors, textDocument) && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {\n        let middleware = this._client.middleware;\n        let didClose = textDocument => {\n          return this._client.sendNotification(this._type, this._createParams(textDocument));\n        };\n        this._syncedDocuments.delete(textDocument.uri.toString());\n        (middleware.didClose ? middleware.didClose(textDocument, didClose) : didClose(textDocument)).catch(error => {\n          this._client.error(`Sending document notification ${this._type.method} failed`, error);\n        });\n      }\n    });\n  }\n}\nexports.DidCloseTextDocumentFeature = DidCloseTextDocumentFeature;\nclass DidChangeTextDocumentFeature extends features_1.DynamicDocumentFeature {\n  constructor(client, pendingTextDocumentChanges) {\n    super(client);\n    this._changeData = new Map();\n    this._onNotificationSent = new vscode_1.EventEmitter();\n    this._onPendingChangeAdded = new vscode_1.EventEmitter();\n    this._pendingTextDocumentChanges = pendingTextDocumentChanges;\n    this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n  }\n  get onNotificationSent() {\n    return this._onNotificationSent.event;\n  }\n  get onPendingChangeAdded() {\n    return this._onPendingChangeAdded.event;\n  }\n  get syncKind() {\n    return this._syncKind;\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.change !== undefined && textDocumentSyncOptions.change !== vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: Object.assign({}, {\n          documentSelector: documentSelector\n        }, {\n          syncKind: textDocumentSyncOptions.change\n        })\n      });\n    }\n  }\n  register(data) {\n    if (!data.registerOptions.documentSelector) {\n      return;\n    }\n    if (!this._listener) {\n      this._listener = vscode_1.workspace.onDidChangeTextDocument(this.callback, this);\n    }\n    this._changeData.set(data.id, {\n      syncKind: data.registerOptions.syncKind,\n      documentSelector: this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector)\n    });\n    this.updateSyncKind(data.registerOptions.syncKind);\n  }\n  *getDocumentSelectors() {\n    for (const data of this._changeData.values()) {\n      yield data.documentSelector;\n    }\n  }\n  async callback(event) {\n    // Text document changes are send for dirty changes as well. We don't\n    // have dirty / un-dirty events in the LSP so we ignore content changes\n    // with length zero.\n    if (event.contentChanges.length === 0) {\n      return;\n    }\n    // We need to capture the URI and version here since they might change on the text document\n    // until we reach did `didChange` call since the middleware support async execution.\n    const uri = event.document.uri;\n    const version = event.document.version;\n    const promises = [];\n    for (const changeData of this._changeData.values()) {\n      if (vscode_1.languages.match(changeData.documentSelector, event.document) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {\n        const middleware = this._client.middleware;\n        if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental) {\n          const didChange = async event => {\n            const params = this._client.code2ProtocolConverter.asChangeTextDocumentParams(event, uri, version);\n            await this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n            this.notificationSent(event.document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n          };\n          promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));\n        } else if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n          const didChange = async event => {\n            const eventUri = event.document.uri.toString();\n            this._pendingTextDocumentChanges.set(eventUri, event.document);\n            this._onPendingChangeAdded.fire();\n          };\n          promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));\n        }\n      }\n    }\n    return Promise.all(promises).then(undefined, error => {\n      this._client.error(`Sending document notification ${vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type.method} failed`, error);\n      throw error;\n    });\n  }\n  notificationSent(textDocument, type, params) {\n    this._onNotificationSent.fire({\n      textDocument,\n      type,\n      params\n    });\n  }\n  unregister(id) {\n    this._changeData.delete(id);\n    if (this._changeData.size === 0) {\n      if (this._listener) {\n        this._listener.dispose();\n        this._listener = undefined;\n      }\n      this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n    } else {\n      this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n      for (const changeData of this._changeData.values()) {\n        this.updateSyncKind(changeData.syncKind);\n        if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n          break;\n        }\n      }\n    }\n  }\n  clear() {\n    this._pendingTextDocumentChanges.clear();\n    this._changeData.clear();\n    this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n    if (this._listener) {\n      this._listener.dispose();\n      this._listener = undefined;\n    }\n  }\n  getPendingDocumentChanges(excludes) {\n    if (this._pendingTextDocumentChanges.size === 0) {\n      return [];\n    }\n    let result;\n    if (excludes.size === 0) {\n      result = Array.from(this._pendingTextDocumentChanges.values());\n      this._pendingTextDocumentChanges.clear();\n    } else {\n      result = [];\n      for (const entry of this._pendingTextDocumentChanges) {\n        if (!excludes.has(entry[0])) {\n          result.push(entry[1]);\n          this._pendingTextDocumentChanges.delete(entry[0]);\n        }\n      }\n    }\n    return result;\n  }\n  getProvider(document) {\n    for (const changeData of this._changeData.values()) {\n      if (vscode_1.languages.match(changeData.documentSelector, document) > 0) {\n        return {\n          send: event => {\n            return this.callback(event);\n          }\n        };\n      }\n    }\n    return undefined;\n  }\n  updateSyncKind(syncKind) {\n    if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n      return;\n    }\n    switch (syncKind) {\n      case vscode_languageserver_protocol_1.TextDocumentSyncKind.Full:\n        this._syncKind = syncKind;\n        break;\n      case vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental:\n        if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n          this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;\n        }\n        break;\n    }\n  }\n}\nexports.DidChangeTextDocumentFeature = DidChangeTextDocumentFeature;\nclass WillSaveFeature extends features_1.TextDocumentEventFeature {\n  constructor(client) {\n    super(client, vscode_1.workspace.onWillSaveTextDocument, vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, () => client.middleware.willSave, willSaveEvent => client.code2ProtocolConverter.asWillSaveTextDocumentParams(willSaveEvent), event => event.document, (selectors, willSaveEvent) => features_1.TextDocumentEventFeature.textDocumentFilter(selectors, willSaveEvent.document));\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');\n    value.willSave = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSave) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: {\n          documentSelector: documentSelector\n        }\n      });\n    }\n  }\n  getTextDocument(data) {\n    return data.document;\n  }\n}\nexports.WillSaveFeature = WillSaveFeature;\nclass WillSaveWaitUntilFeature extends features_1.DynamicDocumentFeature {\n  constructor(client) {\n    super(client);\n    this._selectors = new Map();\n  }\n  getDocumentSelectors() {\n    return this._selectors.values();\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type;\n  }\n  fillClientCapabilities(capabilities) {\n    let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');\n    value.willSaveWaitUntil = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSaveWaitUntil) {\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: {\n          documentSelector: documentSelector\n        }\n      });\n    }\n  }\n  register(data) {\n    if (!data.registerOptions.documentSelector) {\n      return;\n    }\n    if (!this._listener) {\n      this._listener = vscode_1.workspace.onWillSaveTextDocument(this.callback, this);\n    }\n    this._selectors.set(data.id, this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector));\n  }\n  callback(event) {\n    if (features_1.TextDocumentEventFeature.textDocumentFilter(this._selectors.values(), event.document) && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {\n      let middleware = this._client.middleware;\n      let willSaveWaitUntil = event => {\n        return this._client.sendRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, this._client.code2ProtocolConverter.asWillSaveTextDocumentParams(event)).then(async edits => {\n          let vEdits = await this._client.protocol2CodeConverter.asTextEdits(edits);\n          return vEdits === undefined ? [] : vEdits;\n        });\n      };\n      event.waitUntil(middleware.willSaveWaitUntil ? middleware.willSaveWaitUntil(event, willSaveWaitUntil) : willSaveWaitUntil(event));\n    }\n  }\n  unregister(id) {\n    this._selectors.delete(id);\n    if (this._selectors.size === 0 && this._listener) {\n      this._listener.dispose();\n      this._listener = undefined;\n    }\n  }\n  clear() {\n    this._selectors.clear();\n    if (this._listener) {\n      this._listener.dispose();\n      this._listener = undefined;\n    }\n  }\n}\nexports.WillSaveWaitUntilFeature = WillSaveWaitUntilFeature;\nclass DidSaveTextDocumentFeature extends features_1.TextDocumentEventFeature {\n  constructor(client) {\n    super(client, vscode_1.workspace.onDidSaveTextDocument, vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, () => client.middleware.didSave, textDocument => client.code2ProtocolConverter.asSaveTextDocumentParams(textDocument, this._includeText), data => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n    this._includeText = false;\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').didSave = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n    if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.save) {\n      const saveOptions = typeof textDocumentSyncOptions.save === 'boolean' ? {\n        includeText: false\n      } : {\n        includeText: !!textDocumentSyncOptions.save.includeText\n      };\n      this.register({\n        id: UUID.generateUuid(),\n        registerOptions: Object.assign({}, {\n          documentSelector: documentSelector\n        }, saveOptions)\n      });\n    }\n  }\n  register(data) {\n    this._includeText = !!data.registerOptions.includeText;\n    super.register(data);\n  }\n  getTextDocument(data) {\n    return data;\n  }\n}\nexports.DidSaveTextDocumentFeature = DidSaveTextDocumentFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","DidSaveTextDocumentFeature","WillSaveWaitUntilFeature","WillSaveFeature","DidChangeTextDocumentFeature","DidCloseTextDocumentFeature","DidOpenTextDocumentFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","UUID","TextDocumentEventFeature","constructor","client","syncedDocuments","workspace","onDidOpenTextDocument","DidOpenTextDocumentNotification","type","middleware","didOpen","textDocument","code2ProtocolConverter","asOpenTextDocumentParams","data","textDocumentFilter","_syncedDocuments","openDocuments","values","fillClientCapabilities","capabilities","ensure","dynamicRegistration","initialize","documentSelector","textDocumentSyncOptions","resolvedTextDocumentSync","openClose","register","id","generateUuid","registerOptions","registrationType","_client","protocol2CodeConverter","asDocumentSelector","textDocuments","forEach","uri","toString","has","languages","match","hasDedicatedTextSynchronizationFeature","sendNotification","_type","_createParams","catch","error","method","set","getTextDocument","notificationSent","params","pendingTextDocumentChanges","onDidCloseTextDocument","DidCloseTextDocumentNotification","didClose","asCloseTextDocumentParams","_pendingTextDocumentChanges","callback","delete","unregister","selector","_selectors","get","selectors","_selectorFilter","DynamicDocumentFeature","_changeData","Map","_onNotificationSent","EventEmitter","_onPendingChangeAdded","_syncKind","TextDocumentSyncKind","None","onNotificationSent","event","onPendingChangeAdded","syncKind","DidChangeTextDocumentNotification","change","undefined","assign","_listener","onDidChangeTextDocument","updateSyncKind","getDocumentSelectors","contentChanges","length","document","version","promises","changeData","Incremental","didChange","asChangeTextDocumentParams","push","Full","eventUri","fire","Promise","all","then","size","dispose","clear","getPendingDocumentChanges","excludes","result","Array","from","entry","getProvider","send","onWillSaveTextDocument","WillSaveTextDocumentNotification","willSave","willSaveEvent","asWillSaveTextDocumentParams","WillSaveTextDocumentWaitUntilRequest","willSaveWaitUntil","sendRequest","edits","vEdits","asTextEdits","waitUntil","onDidSaveTextDocument","DidSaveTextDocumentNotification","didSave","asSaveTextDocumentParams","_includeText","save","saveOptions","includeText"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/textSynchronization.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DidSaveTextDocumentFeature = exports.WillSaveWaitUntilFeature = exports.WillSaveFeature = exports.DidChangeTextDocumentFeature = exports.DidCloseTextDocumentFeature = exports.DidOpenTextDocumentFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nconst UUID = require(\"./utils/uuid\");\nclass DidOpenTextDocumentFeature extends features_1.TextDocumentEventFeature {\n    constructor(client, syncedDocuments) {\n        super(client, vscode_1.workspace.onDidOpenTextDocument, vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, () => client.middleware.didOpen, (textDocument) => client.code2ProtocolConverter.asOpenTextDocumentParams(textDocument), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n        this._syncedDocuments = syncedDocuments;\n    }\n    get openDocuments() {\n        return this._syncedDocuments.values();\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\n            this.register({ id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });\n        }\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type;\n    }\n    register(data) {\n        super.register(data);\n        if (!data.registerOptions.documentSelector) {\n            return;\n        }\n        const documentSelector = this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector);\n        vscode_1.workspace.textDocuments.forEach((textDocument) => {\n            const uri = textDocument.uri.toString();\n            if (this._syncedDocuments.has(uri)) {\n                return;\n            }\n            if (vscode_1.languages.match(documentSelector, textDocument) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {\n                const middleware = this._client.middleware;\n                const didOpen = (textDocument) => {\n                    return this._client.sendNotification(this._type, this._createParams(textDocument));\n                };\n                (middleware.didOpen ? middleware.didOpen(textDocument, didOpen) : didOpen(textDocument)).catch((error) => {\n                    this._client.error(`Sending document notification ${this._type.method} failed`, error);\n                });\n                this._syncedDocuments.set(uri, textDocument);\n            }\n        });\n    }\n    getTextDocument(data) {\n        return data;\n    }\n    notificationSent(textDocument, type, params) {\n        this._syncedDocuments.set(textDocument.uri.toString(), textDocument);\n        super.notificationSent(textDocument, type, params);\n    }\n}\nexports.DidOpenTextDocumentFeature = DidOpenTextDocumentFeature;\nclass DidCloseTextDocumentFeature extends features_1.TextDocumentEventFeature {\n    constructor(client, syncedDocuments, pendingTextDocumentChanges) {\n        super(client, vscode_1.workspace.onDidCloseTextDocument, vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, () => client.middleware.didClose, (textDocument) => client.code2ProtocolConverter.asCloseTextDocumentParams(textDocument), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n        this._syncedDocuments = syncedDocuments;\n        this._pendingTextDocumentChanges = pendingTextDocumentChanges;\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {\n            this.register({ id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });\n        }\n    }\n    async callback(data) {\n        await super.callback(data);\n        this._pendingTextDocumentChanges.delete(data.uri.toString());\n    }\n    getTextDocument(data) {\n        return data;\n    }\n    notificationSent(textDocument, type, params) {\n        this._syncedDocuments.delete(textDocument.uri.toString());\n        super.notificationSent(textDocument, type, params);\n    }\n    unregister(id) {\n        const selector = this._selectors.get(id);\n        // The super call removed the selector from the map\n        // of selectors.\n        super.unregister(id);\n        const selectors = this._selectors.values();\n        this._syncedDocuments.forEach((textDocument) => {\n            if (vscode_1.languages.match(selector, textDocument) > 0 && !this._selectorFilter(selectors, textDocument) && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {\n                let middleware = this._client.middleware;\n                let didClose = (textDocument) => {\n                    return this._client.sendNotification(this._type, this._createParams(textDocument));\n                };\n                this._syncedDocuments.delete(textDocument.uri.toString());\n                (middleware.didClose ? middleware.didClose(textDocument, didClose) : didClose(textDocument)).catch((error) => {\n                    this._client.error(`Sending document notification ${this._type.method} failed`, error);\n                });\n            }\n        });\n    }\n}\nexports.DidCloseTextDocumentFeature = DidCloseTextDocumentFeature;\nclass DidChangeTextDocumentFeature extends features_1.DynamicDocumentFeature {\n    constructor(client, pendingTextDocumentChanges) {\n        super(client);\n        this._changeData = new Map();\n        this._onNotificationSent = new vscode_1.EventEmitter();\n        this._onPendingChangeAdded = new vscode_1.EventEmitter();\n        this._pendingTextDocumentChanges = pendingTextDocumentChanges;\n        this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n    }\n    get onNotificationSent() {\n        return this._onNotificationSent.event;\n    }\n    get onPendingChangeAdded() {\n        return this._onPendingChangeAdded.event;\n    }\n    get syncKind() {\n        return this._syncKind;\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.change !== undefined && textDocumentSyncOptions.change !== vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n            this.register({\n                id: UUID.generateUuid(),\n                registerOptions: Object.assign({}, { documentSelector: documentSelector }, { syncKind: textDocumentSyncOptions.change })\n            });\n        }\n    }\n    register(data) {\n        if (!data.registerOptions.documentSelector) {\n            return;\n        }\n        if (!this._listener) {\n            this._listener = vscode_1.workspace.onDidChangeTextDocument(this.callback, this);\n        }\n        this._changeData.set(data.id, {\n            syncKind: data.registerOptions.syncKind,\n            documentSelector: this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector),\n        });\n        this.updateSyncKind(data.registerOptions.syncKind);\n    }\n    *getDocumentSelectors() {\n        for (const data of this._changeData.values()) {\n            yield data.documentSelector;\n        }\n    }\n    async callback(event) {\n        // Text document changes are send for dirty changes as well. We don't\n        // have dirty / un-dirty events in the LSP so we ignore content changes\n        // with length zero.\n        if (event.contentChanges.length === 0) {\n            return;\n        }\n        // We need to capture the URI and version here since they might change on the text document\n        // until we reach did `didChange` call since the middleware support async execution.\n        const uri = event.document.uri;\n        const version = event.document.version;\n        const promises = [];\n        for (const changeData of this._changeData.values()) {\n            if (vscode_1.languages.match(changeData.documentSelector, event.document) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {\n                const middleware = this._client.middleware;\n                if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental) {\n                    const didChange = async (event) => {\n                        const params = this._client.code2ProtocolConverter.asChangeTextDocumentParams(event, uri, version);\n                        await this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n                        this.notificationSent(event.document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n                    };\n                    promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));\n                }\n                else if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n                    const didChange = async (event) => {\n                        const eventUri = event.document.uri.toString();\n                        this._pendingTextDocumentChanges.set(eventUri, event.document);\n                        this._onPendingChangeAdded.fire();\n                    };\n                    promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));\n                }\n            }\n        }\n        return Promise.all(promises).then(undefined, (error) => {\n            this._client.error(`Sending document notification ${vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type.method} failed`, error);\n            throw error;\n        });\n    }\n    notificationSent(textDocument, type, params) {\n        this._onNotificationSent.fire({ textDocument, type, params });\n    }\n    unregister(id) {\n        this._changeData.delete(id);\n        if (this._changeData.size === 0) {\n            if (this._listener) {\n                this._listener.dispose();\n                this._listener = undefined;\n            }\n            this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        }\n        else {\n            this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n            for (const changeData of this._changeData.values()) {\n                this.updateSyncKind(changeData.syncKind);\n                if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n                    break;\n                }\n            }\n        }\n    }\n    clear() {\n        this._pendingTextDocumentChanges.clear();\n        this._changeData.clear();\n        this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n        if (this._listener) {\n            this._listener.dispose();\n            this._listener = undefined;\n        }\n    }\n    getPendingDocumentChanges(excludes) {\n        if (this._pendingTextDocumentChanges.size === 0) {\n            return [];\n        }\n        let result;\n        if (excludes.size === 0) {\n            result = Array.from(this._pendingTextDocumentChanges.values());\n            this._pendingTextDocumentChanges.clear();\n        }\n        else {\n            result = [];\n            for (const entry of this._pendingTextDocumentChanges) {\n                if (!excludes.has(entry[0])) {\n                    result.push(entry[1]);\n                    this._pendingTextDocumentChanges.delete(entry[0]);\n                }\n            }\n        }\n        return result;\n    }\n    getProvider(document) {\n        for (const changeData of this._changeData.values()) {\n            if (vscode_1.languages.match(changeData.documentSelector, document) > 0) {\n                return {\n                    send: (event) => {\n                        return this.callback(event);\n                    }\n                };\n            }\n        }\n        return undefined;\n    }\n    updateSyncKind(syncKind) {\n        if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n            return;\n        }\n        switch (syncKind) {\n            case vscode_languageserver_protocol_1.TextDocumentSyncKind.Full:\n                this._syncKind = syncKind;\n                break;\n            case vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental:\n                if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n                    this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;\n                }\n                break;\n        }\n    }\n}\nexports.DidChangeTextDocumentFeature = DidChangeTextDocumentFeature;\nclass WillSaveFeature extends features_1.TextDocumentEventFeature {\n    constructor(client) {\n        super(client, vscode_1.workspace.onWillSaveTextDocument, vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, () => client.middleware.willSave, (willSaveEvent) => client.code2ProtocolConverter.asWillSaveTextDocumentParams(willSaveEvent), (event) => event.document, (selectors, willSaveEvent) => features_1.TextDocumentEventFeature.textDocumentFilter(selectors, willSaveEvent.document));\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');\n        value.willSave = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSave) {\n            this.register({\n                id: UUID.generateUuid(),\n                registerOptions: { documentSelector: documentSelector }\n            });\n        }\n    }\n    getTextDocument(data) {\n        return data.document;\n    }\n}\nexports.WillSaveFeature = WillSaveFeature;\nclass WillSaveWaitUntilFeature extends features_1.DynamicDocumentFeature {\n    constructor(client) {\n        super(client);\n        this._selectors = new Map();\n    }\n    getDocumentSelectors() {\n        return this._selectors.values();\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type;\n    }\n    fillClientCapabilities(capabilities) {\n        let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');\n        value.willSaveWaitUntil = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSaveWaitUntil) {\n            this.register({\n                id: UUID.generateUuid(),\n                registerOptions: { documentSelector: documentSelector }\n            });\n        }\n    }\n    register(data) {\n        if (!data.registerOptions.documentSelector) {\n            return;\n        }\n        if (!this._listener) {\n            this._listener = vscode_1.workspace.onWillSaveTextDocument(this.callback, this);\n        }\n        this._selectors.set(data.id, this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector));\n    }\n    callback(event) {\n        if (features_1.TextDocumentEventFeature.textDocumentFilter(this._selectors.values(), event.document) && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {\n            let middleware = this._client.middleware;\n            let willSaveWaitUntil = (event) => {\n                return this._client.sendRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, this._client.code2ProtocolConverter.asWillSaveTextDocumentParams(event)).then(async (edits) => {\n                    let vEdits = await this._client.protocol2CodeConverter.asTextEdits(edits);\n                    return vEdits === undefined ? [] : vEdits;\n                });\n            };\n            event.waitUntil(middleware.willSaveWaitUntil\n                ? middleware.willSaveWaitUntil(event, willSaveWaitUntil)\n                : willSaveWaitUntil(event));\n        }\n    }\n    unregister(id) {\n        this._selectors.delete(id);\n        if (this._selectors.size === 0 && this._listener) {\n            this._listener.dispose();\n            this._listener = undefined;\n        }\n    }\n    clear() {\n        this._selectors.clear();\n        if (this._listener) {\n            this._listener.dispose();\n            this._listener = undefined;\n        }\n    }\n}\nexports.WillSaveWaitUntilFeature = WillSaveWaitUntilFeature;\nclass DidSaveTextDocumentFeature extends features_1.TextDocumentEventFeature {\n    constructor(client) {\n        super(client, vscode_1.workspace.onDidSaveTextDocument, vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, () => client.middleware.didSave, (textDocument) => client.code2ProtocolConverter.asSaveTextDocumentParams(textDocument, this._includeText), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);\n        this._includeText = false;\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').didSave = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;\n        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.save) {\n            const saveOptions = typeof textDocumentSyncOptions.save === 'boolean'\n                ? { includeText: false }\n                : { includeText: !!textDocumentSyncOptions.save.includeText };\n            this.register({\n                id: UUID.generateUuid(),\n                registerOptions: Object.assign({}, { documentSelector: documentSelector }, saveOptions)\n            });\n        }\n    }\n    register(data) {\n        this._includeText = !!data.registerOptions.includeText;\n        super.register(data);\n    }\n    getTextDocument(data) {\n        return data;\n    }\n}\nexports.DidSaveTextDocumentFeature = DidSaveTextDocumentFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}