{"ast":null,"code":"import { illegalState } from '../../../base/common/errors.js';\nimport { localizeWithPath } from '../../../nls.js';\nconst _moduleId = \"vs/platform/contextkey/common/scanner\";\nfunction hintDidYouMean(...meant) {\n  switch (meant.length) {\n    case 1:\n      return localizeWithPath(_moduleId, 0, \"Did you mean {0}?\", meant[0]);\n    case 2:\n      return localizeWithPath(_moduleId, 1, \"Did you mean {0} or {1}?\", meant[0], meant[1]);\n    case 3:\n      return localizeWithPath(_moduleId, 2, \"Did you mean {0}, {1} or {2}?\", meant[0], meant[1], meant[2]);\n    default:\n      return undefined;\n  }\n}\nconst hintDidYouForgetToOpenOrCloseQuote = localizeWithPath(_moduleId, 3, \"Did you forget to open or close the quote?\");\nconst hintDidYouForgetToEscapeSlash = localizeWithPath(_moduleId, 4, \"Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/\\'.\");\nclass Scanner {\n  constructor() {\n    this._input = '';\n    this._start = 0;\n    this._current = 0;\n    this._tokens = [];\n    this._errors = [];\n    this.stringRe = /[a-zA-Z0-9_<>\\-\\./\\\\:\\*\\?\\+\\[\\]\\^,#@;\"%\\$\\p{L}-]+/uy;\n  }\n  static getLexeme(token) {\n    switch (token.type) {\n      case 0:\n        return '(';\n      case 1:\n        return ')';\n      case 2:\n        return '!';\n      case 3:\n        return token.isTripleEq ? '===' : '==';\n      case 4:\n        return token.isTripleEq ? '!==' : '!=';\n      case 5:\n        return '<';\n      case 6:\n        return '<=';\n      case 7:\n        return '>=';\n      case 8:\n        return '>=';\n      case 9:\n        return '=~';\n      case 10:\n        return token.lexeme;\n      case 11:\n        return 'true';\n      case 12:\n        return 'false';\n      case 13:\n        return 'in';\n      case 14:\n        return 'not';\n      case 15:\n        return '&&';\n      case 16:\n        return '||';\n      case 17:\n        return token.lexeme;\n      case 18:\n        return token.lexeme;\n      case 19:\n        return token.lexeme;\n      case 20:\n        return 'EOF';\n      default:\n        throw illegalState(`unhandled token type: ${JSON.stringify(token)}; have you forgotten to add a case?`);\n    }\n  }\n  static {\n    this._regexFlags = new Set(['i', 'g', 's', 'm', 'y', 'u'].map(ch => ch.charCodeAt(0)));\n  }\n  static {\n    this._keywords = new Map([['not', 14], ['in', 13], ['false', 12], ['true', 11]]);\n  }\n  get errors() {\n    return this._errors;\n  }\n  reset(value) {\n    this._input = value;\n    this._start = 0;\n    this._current = 0;\n    this._tokens = [];\n    this._errors = [];\n    return this;\n  }\n  scan() {\n    while (!this._isAtEnd()) {\n      this._start = this._current;\n      const ch = this._advance();\n      switch (ch) {\n        case 40:\n          this._addToken(0);\n          break;\n        case 41:\n          this._addToken(1);\n          break;\n        case 33:\n          if (this._match(61)) {\n            const isTripleEq = this._match(61);\n            this._tokens.push({\n              type: 4,\n              offset: this._start,\n              isTripleEq\n            });\n          } else {\n            this._addToken(2);\n          }\n          break;\n        case 39:\n          this._quotedString();\n          break;\n        case 47:\n          this._regex();\n          break;\n        case 61:\n          if (this._match(61)) {\n            const isTripleEq = this._match(61);\n            this._tokens.push({\n              type: 3,\n              offset: this._start,\n              isTripleEq\n            });\n          } else if (this._match(126)) {\n            this._addToken(9);\n          } else {\n            this._error(hintDidYouMean('==', '=~'));\n          }\n          break;\n        case 60:\n          this._addToken(this._match(61) ? 6 : 5);\n          break;\n        case 62:\n          this._addToken(this._match(61) ? 8 : 7);\n          break;\n        case 38:\n          if (this._match(38)) {\n            this._addToken(15);\n          } else {\n            this._error(hintDidYouMean('&&'));\n          }\n          break;\n        case 124:\n          if (this._match(124)) {\n            this._addToken(16);\n          } else {\n            this._error(hintDidYouMean('||'));\n          }\n          break;\n        case 32:\n        case 13:\n        case 9:\n        case 10:\n        case 160:\n          break;\n        default:\n          this._string();\n      }\n    }\n    this._start = this._current;\n    this._addToken(20);\n    return Array.from(this._tokens);\n  }\n  _match(expected) {\n    if (this._isAtEnd()) {\n      return false;\n    }\n    if (this._input.charCodeAt(this._current) !== expected) {\n      return false;\n    }\n    this._current++;\n    return true;\n  }\n  _advance() {\n    return this._input.charCodeAt(this._current++);\n  }\n  _peek() {\n    return this._isAtEnd() ? 0 : this._input.charCodeAt(this._current);\n  }\n  _addToken(type) {\n    this._tokens.push({\n      type,\n      offset: this._start\n    });\n  }\n  _error(additional) {\n    const offset = this._start;\n    const lexeme = this._input.substring(this._start, this._current);\n    const errToken = {\n      type: 19,\n      offset: this._start,\n      lexeme\n    };\n    this._errors.push({\n      offset,\n      lexeme,\n      additionalInfo: additional\n    });\n    this._tokens.push(errToken);\n  }\n  _string() {\n    this.stringRe.lastIndex = this._start;\n    const match = this.stringRe.exec(this._input);\n    if (match) {\n      this._current = this._start + match[0].length;\n      const lexeme = this._input.substring(this._start, this._current);\n      const keyword = Scanner._keywords.get(lexeme);\n      if (keyword) {\n        this._addToken(keyword);\n      } else {\n        this._tokens.push({\n          type: 17,\n          lexeme,\n          offset: this._start\n        });\n      }\n    }\n  }\n  _quotedString() {\n    while (this._peek() !== 39 && !this._isAtEnd()) {\n      this._advance();\n    }\n    if (this._isAtEnd()) {\n      this._error(hintDidYouForgetToOpenOrCloseQuote);\n      return;\n    }\n    this._advance();\n    this._tokens.push({\n      type: 18,\n      lexeme: this._input.substring(this._start + 1, this._current - 1),\n      offset: this._start + 1\n    });\n  }\n  _regex() {\n    let p = this._current;\n    let inEscape = false;\n    let inCharacterClass = false;\n    while (true) {\n      if (p >= this._input.length) {\n        this._current = p;\n        this._error(hintDidYouForgetToEscapeSlash);\n        return;\n      }\n      const ch = this._input.charCodeAt(p);\n      if (inEscape) {\n        inEscape = false;\n      } else if (ch === 47 && !inCharacterClass) {\n        p++;\n        break;\n      } else if (ch === 91) {\n        inCharacterClass = true;\n      } else if (ch === 92) {\n        inEscape = true;\n      } else if (ch === 93) {\n        inCharacterClass = false;\n      }\n      p++;\n    }\n    while (p < this._input.length && Scanner._regexFlags.has(this._input.charCodeAt(p))) {\n      p++;\n    }\n    this._current = p;\n    const lexeme = this._input.substring(this._start, this._current);\n    this._tokens.push({\n      type: 10,\n      lexeme,\n      offset: this._start\n    });\n  }\n  _isAtEnd() {\n    return this._current >= this._input.length;\n  }\n}\nexport { Scanner };","map":{"version":3,"names":["illegalState","localizeWithPath","_moduleId","hintDidYouMean","meant","length","undefined","hintDidYouForgetToOpenOrCloseQuote","hintDidYouForgetToEscapeSlash","Scanner","constructor","_input","_start","_current","_tokens","_errors","stringRe","getLexeme","token","type","isTripleEq","lexeme","JSON","stringify","_regexFlags","Set","map","ch","charCodeAt","_keywords","Map","errors","reset","value","scan","_isAtEnd","_advance","_addToken","_match","push","offset","_quotedString","_regex","_error","_string","Array","from","expected","_peek","additional","substring","errToken","additionalInfo","lastIndex","match","exec","keyword","get","p","inEscape","inCharacterClass","has"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/platform/contextkey/common/scanner.js"],"sourcesContent":["import { illegalState } from '../../../base/common/errors.js';\nimport { localizeWithPath } from '../../../nls.js';\nconst _moduleId = \"vs/platform/contextkey/common/scanner\";\nfunction hintDidYouMean(...meant) {\n    switch (meant.length) {\n        case 1:\n            return ( localizeWithPath(_moduleId, 0, \"Did you mean {0}?\", meant[0]));\n        case 2:\n            return ( localizeWithPath(_moduleId, 1, \"Did you mean {0} or {1}?\", meant[0], meant[1]));\n        case 3:\n            return ( localizeWithPath(\n                _moduleId,\n                2,\n                \"Did you mean {0}, {1} or {2}?\",\n                meant[0],\n                meant[1],\n                meant[2]\n            ));\n        default:\n            return undefined;\n    }\n}\nconst hintDidYouForgetToOpenOrCloseQuote = ( localizeWithPath(_moduleId, 3, \"Did you forget to open or close the quote?\"));\nconst hintDidYouForgetToEscapeSlash = ( localizeWithPath(\n    _moduleId,\n    4,\n    \"Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/\\'.\"\n));\nclass Scanner {\n    constructor() {\n        this._input = '';\n        this._start = 0;\n        this._current = 0;\n        this._tokens = [];\n        this._errors = [];\n        this.stringRe = /[a-zA-Z0-9_<>\\-\\./\\\\:\\*\\?\\+\\[\\]\\^,#@;\"%\\$\\p{L}-]+/uy;\n    }\n    static getLexeme(token) {\n        switch (token.type) {\n            case 0 :\n                return '(';\n            case 1 :\n                return ')';\n            case 2 :\n                return '!';\n            case 3 :\n                return token.isTripleEq ? '===' : '==';\n            case 4 :\n                return token.isTripleEq ? '!==' : '!=';\n            case 5 :\n                return '<';\n            case 6 :\n                return '<=';\n            case 7 :\n                return '>=';\n            case 8 :\n                return '>=';\n            case 9 :\n                return '=~';\n            case 10 :\n                return token.lexeme;\n            case 11 :\n                return 'true';\n            case 12 :\n                return 'false';\n            case 13 :\n                return 'in';\n            case 14 :\n                return 'not';\n            case 15 :\n                return '&&';\n            case 16 :\n                return '||';\n            case 17 :\n                return token.lexeme;\n            case 18 :\n                return token.lexeme;\n            case 19 :\n                return token.lexeme;\n            case 20 :\n                return 'EOF';\n            default:\n                throw illegalState(`unhandled token type: ${JSON.stringify(token)}; have you forgotten to add a case?`);\n        }\n    }\n    static { this._regexFlags = ( (new Set( (['i', 'g', 's', 'm', 'y', 'u'].map(ch => ch.charCodeAt(0)))))); }\n    static { this._keywords = ( (new Map([\n        ['not', 14 ],\n        ['in', 13 ],\n        ['false', 12 ],\n        ['true', 11 ],\n    ]))); }\n    get errors() {\n        return this._errors;\n    }\n    reset(value) {\n        this._input = value;\n        this._start = 0;\n        this._current = 0;\n        this._tokens = [];\n        this._errors = [];\n        return this;\n    }\n    scan() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            const ch = this._advance();\n            switch (ch) {\n                case 40 :\n                    this._addToken(0 );\n                    break;\n                case 41 :\n                    this._addToken(1 );\n                    break;\n                case 33 :\n                    if (this._match(61 )) {\n                        const isTripleEq = this._match(61 );\n                        this._tokens.push({ type: 4 , offset: this._start, isTripleEq });\n                    }\n                    else {\n                        this._addToken(2 );\n                    }\n                    break;\n                case 39 :\n                    this._quotedString();\n                    break;\n                case 47 :\n                    this._regex();\n                    break;\n                case 61 :\n                    if (this._match(61 )) {\n                        const isTripleEq = this._match(61 );\n                        this._tokens.push({ type: 3 , offset: this._start, isTripleEq });\n                    }\n                    else if (this._match(126 )) {\n                        this._addToken(9 );\n                    }\n                    else {\n                        this._error(hintDidYouMean('==', '=~'));\n                    }\n                    break;\n                case 60 :\n                    this._addToken(this._match(61 ) ? 6  : 5 );\n                    break;\n                case 62 :\n                    this._addToken(this._match(61 ) ? 8  : 7 );\n                    break;\n                case 38 :\n                    if (this._match(38 )) {\n                        this._addToken(15 );\n                    }\n                    else {\n                        this._error(hintDidYouMean('&&'));\n                    }\n                    break;\n                case 124 :\n                    if (this._match(124 )) {\n                        this._addToken(16 );\n                    }\n                    else {\n                        this._error(hintDidYouMean('||'));\n                    }\n                    break;\n                case 32 :\n                case 13 :\n                case 9 :\n                case 10 :\n                case 160 :\n                    break;\n                default:\n                    this._string();\n            }\n        }\n        this._start = this._current;\n        this._addToken(20 );\n        return Array.from(this._tokens);\n    }\n    _match(expected) {\n        if (this._isAtEnd()) {\n            return false;\n        }\n        if (this._input.charCodeAt(this._current) !== expected) {\n            return false;\n        }\n        this._current++;\n        return true;\n    }\n    _advance() {\n        return this._input.charCodeAt(this._current++);\n    }\n    _peek() {\n        return this._isAtEnd() ? 0  : this._input.charCodeAt(this._current);\n    }\n    _addToken(type) {\n        this._tokens.push({ type, offset: this._start });\n    }\n    _error(additional) {\n        const offset = this._start;\n        const lexeme = this._input.substring(this._start, this._current);\n        const errToken = { type: 19 , offset: this._start, lexeme };\n        this._errors.push({ offset, lexeme, additionalInfo: additional });\n        this._tokens.push(errToken);\n    }\n    _string() {\n        this.stringRe.lastIndex = this._start;\n        const match = this.stringRe.exec(this._input);\n        if (match) {\n            this._current = this._start + match[0].length;\n            const lexeme = this._input.substring(this._start, this._current);\n            const keyword = Scanner._keywords.get(lexeme);\n            if (keyword) {\n                this._addToken(keyword);\n            }\n            else {\n                this._tokens.push({ type: 17 , lexeme, offset: this._start });\n            }\n        }\n    }\n    _quotedString() {\n        while (this._peek() !== 39  && !this._isAtEnd()) {\n            this._advance();\n        }\n        if (this._isAtEnd()) {\n            this._error(hintDidYouForgetToOpenOrCloseQuote);\n            return;\n        }\n        this._advance();\n        this._tokens.push({ type: 18 , lexeme: this._input.substring(this._start + 1, this._current - 1), offset: this._start + 1 });\n    }\n    _regex() {\n        let p = this._current;\n        let inEscape = false;\n        let inCharacterClass = false;\n        while (true) {\n            if (p >= this._input.length) {\n                this._current = p;\n                this._error(hintDidYouForgetToEscapeSlash);\n                return;\n            }\n            const ch = this._input.charCodeAt(p);\n            if (inEscape) {\n                inEscape = false;\n            }\n            else if (ch === 47  && !inCharacterClass) {\n                p++;\n                break;\n            }\n            else if (ch === 91 ) {\n                inCharacterClass = true;\n            }\n            else if (ch === 92 ) {\n                inEscape = true;\n            }\n            else if (ch === 93 ) {\n                inCharacterClass = false;\n            }\n            p++;\n        }\n        while (p < this._input.length && ( (Scanner._regexFlags.has(this._input.charCodeAt(p))))) {\n            p++;\n        }\n        this._current = p;\n        const lexeme = this._input.substring(this._start, this._current);\n        this._tokens.push({ type: 10 , lexeme, offset: this._start });\n    }\n    _isAtEnd() {\n        return this._current >= this._input.length;\n    }\n}\nexport { Scanner };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}