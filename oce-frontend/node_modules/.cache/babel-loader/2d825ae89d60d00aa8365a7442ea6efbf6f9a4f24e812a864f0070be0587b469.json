{"ast":null,"code":"import { isWindows, isMacintosh } from './platform.js';\nlet safeProcess;\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\n  const sandboxProcess = vscodeGlobal.process;\n  safeProcess = {\n    get platform() {\n      return sandboxProcess.platform;\n    },\n    get arch() {\n      return sandboxProcess.arch;\n    },\n    get env() {\n      return sandboxProcess.env;\n    },\n    cwd() {\n      return sandboxProcess.cwd();\n    }\n  };\n} else if (typeof process !== 'undefined') {\n  safeProcess = {\n    get platform() {\n      return process.platform;\n    },\n    get arch() {\n      return process.arch;\n    },\n    get env() {\n      return process.env;\n    },\n    cwd() {\n      return process.env['VSCODE_CWD'] || process.cwd();\n    }\n  };\n} else {\n  safeProcess = {\n    get platform() {\n      return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux';\n    },\n    get arch() {\n      return undefined;\n    },\n    get env() {\n      return {};\n    },\n    cwd() {\n      return '/';\n    }\n  };\n}\nconst cwd = safeProcess.cwd;\nconst env = safeProcess.env;\nconst platform = safeProcess.platform;\nconst arch = safeProcess.arch;\nexport { arch, cwd, env, platform };","map":{"version":3,"names":["isWindows","isMacintosh","safeProcess","vscodeGlobal","globalThis","vscode","process","sandboxProcess","platform","arch","env","cwd","undefined"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode/vscode/src/vs/base/common/process.js"],"sourcesContent":["import { isWindows, isMacintosh } from './platform.js';\nlet safeProcess;\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\n    const sandboxProcess = vscodeGlobal.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get arch() { return sandboxProcess.arch; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); }\n    };\n}\nelse if (typeof process !== 'undefined') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get arch() { return process.arch; },\n        get env() { return process.env; },\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\n    };\n}\nelse {\n    safeProcess = {\n        get platform() { return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux'; },\n        get arch() { return undefined;  },\n        get env() { return {}; },\n        cwd() { return '/'; }\n    };\n}\nconst cwd = safeProcess.cwd;\nconst env = safeProcess.env;\nconst platform = safeProcess.platform;\nconst arch = safeProcess.arch;\nexport { arch, cwd, env, platform };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,eAAe;AACtD,IAAIC,WAAW;AACf,MAAMC,YAAY,GAAGC,UAAU,CAACC,MAAM;AACtC,IAAI,OAAOF,YAAY,KAAK,WAAW,IAAI,OAAOA,YAAY,CAACG,OAAO,KAAK,WAAW,EAAE;EACpF,MAAMC,cAAc,GAAGJ,YAAY,CAACG,OAAO;EAC3CJ,WAAW,GAAG;IACV,IAAIM,QAAQA,CAAA,EAAG;MAAE,OAAOD,cAAc,CAACC,QAAQ;IAAE,CAAC;IAClD,IAAIC,IAAIA,CAAA,EAAG;MAAE,OAAOF,cAAc,CAACE,IAAI;IAAE,CAAC;IAC1C,IAAIC,GAAGA,CAAA,EAAG;MAAE,OAAOH,cAAc,CAACG,GAAG;IAAE,CAAC;IACxCC,GAAGA,CAAA,EAAG;MAAE,OAAOJ,cAAc,CAACI,GAAG,CAAC,CAAC;IAAE;EACzC,CAAC;AACL,CAAC,MACI,IAAI,OAAOL,OAAO,KAAK,WAAW,EAAE;EACrCJ,WAAW,GAAG;IACV,IAAIM,QAAQA,CAAA,EAAG;MAAE,OAAOF,OAAO,CAACE,QAAQ;IAAE,CAAC;IAC3C,IAAIC,IAAIA,CAAA,EAAG;MAAE,OAAOH,OAAO,CAACG,IAAI;IAAE,CAAC;IACnC,IAAIC,GAAGA,CAAA,EAAG;MAAE,OAAOJ,OAAO,CAACI,GAAG;IAAE,CAAC;IACjCC,GAAGA,CAAA,EAAG;MAAE,OAAOL,OAAO,CAACI,GAAG,CAAC,YAAY,CAAC,IAAIJ,OAAO,CAACK,GAAG,CAAC,CAAC;IAAE;EAC/D,CAAC;AACL,CAAC,MACI;EACDT,WAAW,GAAG;IACV,IAAIM,QAAQA,CAAA,EAAG;MAAE,OAAOR,SAAS,GAAG,OAAO,GAAGC,WAAW,GAAG,QAAQ,GAAG,OAAO;IAAE,CAAC;IACjF,IAAIQ,IAAIA,CAAA,EAAG;MAAE,OAAOG,SAAS;IAAG,CAAC;IACjC,IAAIF,GAAGA,CAAA,EAAG;MAAE,OAAO,CAAC,CAAC;IAAE,CAAC;IACxBC,GAAGA,CAAA,EAAG;MAAE,OAAO,GAAG;IAAE;EACxB,CAAC;AACL;AACA,MAAMA,GAAG,GAAGT,WAAW,CAACS,GAAG;AAC3B,MAAMD,GAAG,GAAGR,WAAW,CAACQ,GAAG;AAC3B,MAAMF,QAAQ,GAAGN,WAAW,CAACM,QAAQ;AACrC,MAAMC,IAAI,GAAGP,WAAW,CAACO,IAAI;AAC7B,SAASA,IAAI,EAAEE,GAAG,EAAED,GAAG,EAAEF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}