{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeActionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\nclass CodeActionFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.CodeActionRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    const cap = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'codeAction');\n    cap.dynamicRegistration = true;\n    cap.isPreferredSupport = true;\n    cap.disabledSupport = true;\n    cap.dataSupport = true;\n    // We can only resolve the edit property.\n    cap.resolveSupport = {\n      properties: ['edit']\n    };\n    cap.codeActionLiteralSupport = {\n      codeActionKind: {\n        valueSet: [vscode_languageserver_protocol_1.CodeActionKind.Empty, vscode_languageserver_protocol_1.CodeActionKind.QuickFix, vscode_languageserver_protocol_1.CodeActionKind.Refactor, vscode_languageserver_protocol_1.CodeActionKind.RefactorExtract, vscode_languageserver_protocol_1.CodeActionKind.RefactorInline, vscode_languageserver_protocol_1.CodeActionKind.RefactorRewrite, vscode_languageserver_protocol_1.CodeActionKind.Source, vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports]\n      }\n    };\n    cap.honorsChangeAnnotations = true;\n  }\n  initialize(capabilities, documentSelector) {\n    const options = this.getRegistrationOptions(documentSelector, capabilities.codeActionProvider);\n    if (!options) {\n      return;\n    }\n    this.register({\n      id: UUID.generateUuid(),\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideCodeActions: (document, range, context, token) => {\n        const client = this._client;\n        const _provideCodeActions = async (document, range, context, token) => {\n          const params = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            range: client.code2ProtocolConverter.asRange(range),\n            context: client.code2ProtocolConverter.asCodeActionContextSync(context)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, params, token).then(values => {\n            if (token.isCancellationRequested || values === null || values === undefined) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asCodeActionResult(values, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideCodeActions ? middleware.provideCodeActions(document, range, context, token, _provideCodeActions) : _provideCodeActions(document, range, context, token);\n      },\n      resolveCodeAction: options.resolveProvider ? (item, token) => {\n        const client = this._client;\n        const middleware = this._client.middleware;\n        const resolveCodeAction = async (item, token) => {\n          return client.sendRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, client.code2ProtocolConverter.asCodeActionSync(item), token).then(result => {\n            if (token.isCancellationRequested) {\n              return item;\n            }\n            return client.protocol2CodeConverter.asCodeAction(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, token, error, item);\n          });\n        };\n        return middleware.resolveCodeAction ? middleware.resolveCodeAction(item, token, resolveCodeAction) : resolveCodeAction(item, token);\n      } : undefined\n    };\n    return [vscode_1.languages.registerCodeActionsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, options.codeActionKinds ? {\n      providedCodeActionKinds: this._client.protocol2CodeConverter.asCodeActionKinds(options.codeActionKinds)\n    } : undefined), provider];\n  }\n}\nexports.CodeActionFeature = CodeActionFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","CodeActionFeature","vscode_1","require","vscode_languageserver_protocol_1","UUID","features_1","TextDocumentLanguageFeature","constructor","client","CodeActionRequest","type","fillClientCapabilities","capabilities","cap","ensure","dynamicRegistration","isPreferredSupport","disabledSupport","dataSupport","resolveSupport","properties","codeActionLiteralSupport","codeActionKind","valueSet","CodeActionKind","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","honorsChangeAnnotations","initialize","documentSelector","options","getRegistrationOptions","codeActionProvider","register","id","generateUuid","registerOptions","registerLanguageProvider","selector","provider","provideCodeActions","document","range","context","token","_client","_provideCodeActions","params","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","asRange","asCodeActionContextSync","sendRequest","then","values","isCancellationRequested","undefined","protocol2CodeConverter","asCodeActionResult","error","handleFailedRequest","middleware","resolveCodeAction","resolveProvider","item","CodeActionResolveRequest","asCodeActionSync","result","asCodeAction","languages","registerCodeActionsProvider","asDocumentSelector","codeActionKinds","providedCodeActionKinds","asCodeActionKinds"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/codeAction.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeActionFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst UUID = require(\"./utils/uuid\");\nconst features_1 = require(\"./features\");\nclass CodeActionFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.CodeActionRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        const cap = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'codeAction');\n        cap.dynamicRegistration = true;\n        cap.isPreferredSupport = true;\n        cap.disabledSupport = true;\n        cap.dataSupport = true;\n        // We can only resolve the edit property.\n        cap.resolveSupport = {\n            properties: ['edit']\n        };\n        cap.codeActionLiteralSupport = {\n            codeActionKind: {\n                valueSet: [\n                    vscode_languageserver_protocol_1.CodeActionKind.Empty,\n                    vscode_languageserver_protocol_1.CodeActionKind.QuickFix,\n                    vscode_languageserver_protocol_1.CodeActionKind.Refactor,\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorExtract,\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorInline,\n                    vscode_languageserver_protocol_1.CodeActionKind.RefactorRewrite,\n                    vscode_languageserver_protocol_1.CodeActionKind.Source,\n                    vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports\n                ]\n            }\n        };\n        cap.honorsChangeAnnotations = true;\n    }\n    initialize(capabilities, documentSelector) {\n        const options = this.getRegistrationOptions(documentSelector, capabilities.codeActionProvider);\n        if (!options) {\n            return;\n        }\n        this.register({ id: UUID.generateUuid(), registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideCodeActions: (document, range, context, token) => {\n                const client = this._client;\n                const _provideCodeActions = async (document, range, context, token) => {\n                    const params = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        range: client.code2ProtocolConverter.asRange(range),\n                        context: client.code2ProtocolConverter.asCodeActionContextSync(context)\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, params, token).then((values) => {\n                        if (token.isCancellationRequested || values === null || values === undefined) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asCodeActionResult(values, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideCodeActions\n                    ? middleware.provideCodeActions(document, range, context, token, _provideCodeActions)\n                    : _provideCodeActions(document, range, context, token);\n            },\n            resolveCodeAction: options.resolveProvider\n                ? (item, token) => {\n                    const client = this._client;\n                    const middleware = this._client.middleware;\n                    const resolveCodeAction = async (item, token) => {\n                        return client.sendRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, client.code2ProtocolConverter.asCodeActionSync(item), token).then((result) => {\n                            if (token.isCancellationRequested) {\n                                return item;\n                            }\n                            return client.protocol2CodeConverter.asCodeAction(result, token);\n                        }, (error) => {\n                            return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, token, error, item);\n                        });\n                    };\n                    return middleware.resolveCodeAction\n                        ? middleware.resolveCodeAction(item, token, resolveCodeAction)\n                        : resolveCodeAction(item, token);\n                }\n                : undefined\n        };\n        return [vscode_1.languages.registerCodeActionsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, (options.codeActionKinds\n                ? { providedCodeActionKinds: this._client.protocol2CodeConverter.asCodeActionKinds(options.codeActionKinds) }\n                : undefined)), provider];\n    }\n}\nexports.CodeActionFeature = CodeActionFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}