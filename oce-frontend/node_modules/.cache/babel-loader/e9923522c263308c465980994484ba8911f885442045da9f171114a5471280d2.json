{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProposedFeatures = exports.BaseLanguageClient = exports.MessageTransports = exports.SuspendMode = exports.State = exports.CloseAction = exports.ErrorAction = exports.RevealOutputChannelOn = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst c2p = require(\"./codeConverter\");\nconst p2c = require(\"./protocolConverter\");\nconst Is = require(\"./utils/is\");\nconst async_1 = require(\"./utils/async\");\nconst UUID = require(\"./utils/uuid\");\nconst progressPart_1 = require(\"./progressPart\");\nconst features_1 = require(\"./features\");\nconst diagnostic_1 = require(\"./diagnostic\");\nconst notebook_1 = require(\"./notebook\");\nconst configuration_1 = require(\"./configuration\");\nconst textSynchronization_1 = require(\"./textSynchronization\");\nconst completion_1 = require(\"./completion\");\nconst hover_1 = require(\"./hover\");\nconst definition_1 = require(\"./definition\");\nconst signatureHelp_1 = require(\"./signatureHelp\");\nconst documentHighlight_1 = require(\"./documentHighlight\");\nconst documentSymbol_1 = require(\"./documentSymbol\");\nconst workspaceSymbol_1 = require(\"./workspaceSymbol\");\nconst reference_1 = require(\"./reference\");\nconst codeAction_1 = require(\"./codeAction\");\nconst codeLens_1 = require(\"./codeLens\");\nconst formatting_1 = require(\"./formatting\");\nconst rename_1 = require(\"./rename\");\nconst documentLink_1 = require(\"./documentLink\");\nconst executeCommand_1 = require(\"./executeCommand\");\nconst fileSystemWatcher_1 = require(\"./fileSystemWatcher\");\nconst colorProvider_1 = require(\"./colorProvider\");\nconst implementation_1 = require(\"./implementation\");\nconst typeDefinition_1 = require(\"./typeDefinition\");\nconst workspaceFolder_1 = require(\"./workspaceFolder\");\nconst foldingRange_1 = require(\"./foldingRange\");\nconst declaration_1 = require(\"./declaration\");\nconst selectionRange_1 = require(\"./selectionRange\");\nconst progress_1 = require(\"./progress\");\nconst callHierarchy_1 = require(\"./callHierarchy\");\nconst semanticTokens_1 = require(\"./semanticTokens\");\nconst fileOperations_1 = require(\"./fileOperations\");\nconst linkedEditingRange_1 = require(\"./linkedEditingRange\");\nconst typeHierarchy_1 = require(\"./typeHierarchy\");\nconst inlineValue_1 = require(\"./inlineValue\");\nconst inlayHint_1 = require(\"./inlayHint\");\nconst inlineCompletion_1 = require(\"./inlineCompletion\");\n/**\n * Controls when the output channel is revealed.\n */\nvar RevealOutputChannelOn;\n(function (RevealOutputChannelOn) {\n  RevealOutputChannelOn[RevealOutputChannelOn[\"Debug\"] = 0] = \"Debug\";\n  RevealOutputChannelOn[RevealOutputChannelOn[\"Info\"] = 1] = \"Info\";\n  RevealOutputChannelOn[RevealOutputChannelOn[\"Warn\"] = 2] = \"Warn\";\n  RevealOutputChannelOn[RevealOutputChannelOn[\"Error\"] = 3] = \"Error\";\n  RevealOutputChannelOn[RevealOutputChannelOn[\"Never\"] = 4] = \"Never\";\n})(RevealOutputChannelOn || (exports.RevealOutputChannelOn = RevealOutputChannelOn = {}));\n/**\n * An action to be performed when the connection is producing errors.\n */\nvar ErrorAction;\n(function (ErrorAction) {\n  /**\n   * Continue running the server.\n   */\n  ErrorAction[ErrorAction[\"Continue\"] = 1] = \"Continue\";\n  /**\n   * Shutdown the server.\n   */\n  ErrorAction[ErrorAction[\"Shutdown\"] = 2] = \"Shutdown\";\n})(ErrorAction || (exports.ErrorAction = ErrorAction = {}));\n/**\n * An action to be performed when the connection to a server got closed.\n */\nvar CloseAction;\n(function (CloseAction) {\n  /**\n   * Don't restart the server. The connection stays closed.\n   */\n  CloseAction[CloseAction[\"DoNotRestart\"] = 1] = \"DoNotRestart\";\n  /**\n   * Restart the server.\n   */\n  CloseAction[CloseAction[\"Restart\"] = 2] = \"Restart\";\n})(CloseAction || (exports.CloseAction = CloseAction = {}));\n/**\n * Signals in which state the language client is in.\n */\nvar State;\n(function (State) {\n  /**\n   * The client is stopped or got never started.\n   */\n  State[State[\"Stopped\"] = 1] = \"Stopped\";\n  /**\n   * The client is starting but not ready yet.\n   */\n  State[State[\"Starting\"] = 3] = \"Starting\";\n  /**\n   * The client is running and ready.\n   */\n  State[State[\"Running\"] = 2] = \"Running\";\n})(State || (exports.State = State = {}));\nvar SuspendMode;\n(function (SuspendMode) {\n  /**\n   * Don't allow suspend mode.\n   */\n  SuspendMode[\"off\"] = \"off\";\n  /**\n   * Support suspend mode even if not all\n   * registered providers have a corresponding\n   * activation listener.\n   */\n  SuspendMode[\"on\"] = \"on\";\n})(SuspendMode || (exports.SuspendMode = SuspendMode = {}));\nvar ResolvedClientOptions;\n(function (ResolvedClientOptions) {\n  function sanitizeIsTrusted(isTrusted) {\n    if (isTrusted === undefined || isTrusted === null) {\n      return false;\n    }\n    if (typeof isTrusted === 'boolean' || typeof isTrusted === 'object' && isTrusted !== null && Is.stringArray(isTrusted.enabledCommands)) {\n      return isTrusted;\n    }\n    return false;\n  }\n  ResolvedClientOptions.sanitizeIsTrusted = sanitizeIsTrusted;\n})(ResolvedClientOptions || (ResolvedClientOptions = {}));\nclass DefaultErrorHandler {\n  constructor(client, maxRestartCount) {\n    this.client = client;\n    this.maxRestartCount = maxRestartCount;\n    this.restarts = [];\n  }\n  error(_error, _message, count) {\n    if (count && count <= 3) {\n      return {\n        action: ErrorAction.Continue\n      };\n    }\n    return {\n      action: ErrorAction.Shutdown\n    };\n  }\n  closed() {\n    this.restarts.push(Date.now());\n    if (this.restarts.length <= this.maxRestartCount) {\n      return {\n        action: CloseAction.Restart\n      };\n    } else {\n      let diff = this.restarts[this.restarts.length - 1] - this.restarts[0];\n      if (diff <= 3 * 60 * 1000) {\n        return {\n          action: CloseAction.DoNotRestart,\n          message: `The ${this.client.name} server crashed ${this.maxRestartCount + 1} times in the last 3 minutes. The server will not be restarted. See the output for more information.`\n        };\n      } else {\n        this.restarts.shift();\n        return {\n          action: CloseAction.Restart\n        };\n      }\n    }\n  }\n}\nvar ClientState;\n(function (ClientState) {\n  ClientState[\"Initial\"] = \"initial\";\n  ClientState[\"Starting\"] = \"starting\";\n  ClientState[\"StartFailed\"] = \"startFailed\";\n  ClientState[\"Running\"] = \"running\";\n  ClientState[\"Stopping\"] = \"stopping\";\n  ClientState[\"Stopped\"] = \"stopped\";\n})(ClientState || (ClientState = {}));\nvar MessageTransports;\n(function (MessageTransports) {\n  function is(value) {\n    let candidate = value;\n    return candidate && vscode_languageserver_protocol_1.MessageReader.is(value.reader) && vscode_languageserver_protocol_1.MessageWriter.is(value.writer);\n  }\n  MessageTransports.is = is;\n})(MessageTransports || (exports.MessageTransports = MessageTransports = {}));\nclass BaseLanguageClient {\n  constructor(id, name, clientOptions) {\n    this._traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\n    this._diagnosticQueue = new Map();\n    this._diagnosticQueueState = {\n      state: 'idle'\n    };\n    this._features = [];\n    this._dynamicFeatures = new Map();\n    this.workspaceEditLock = new async_1.Semaphore(1);\n    this._id = id;\n    this._name = name;\n    clientOptions = clientOptions || {};\n    const markdown = {\n      isTrusted: false,\n      supportHtml: false\n    };\n    if (clientOptions.markdown !== undefined) {\n      markdown.isTrusted = ResolvedClientOptions.sanitizeIsTrusted(clientOptions.markdown.isTrusted);\n      markdown.supportHtml = clientOptions.markdown.supportHtml === true;\n    }\n    // const defaultInterval = (clientOptions as TestOptions).$testMode ? 50 : 60000;\n    this._clientOptions = {\n      documentSelector: clientOptions.documentSelector ?? [],\n      synchronize: clientOptions.synchronize ?? {},\n      diagnosticCollectionName: clientOptions.diagnosticCollectionName,\n      outputChannelName: clientOptions.outputChannelName ?? this._name,\n      revealOutputChannelOn: clientOptions.revealOutputChannelOn ?? RevealOutputChannelOn.Error,\n      stdioEncoding: clientOptions.stdioEncoding ?? 'utf8',\n      initializationOptions: clientOptions.initializationOptions,\n      initializationFailedHandler: clientOptions.initializationFailedHandler,\n      progressOnInitialization: !!clientOptions.progressOnInitialization,\n      errorHandler: clientOptions.errorHandler ?? this.createDefaultErrorHandler(clientOptions.connectionOptions?.maxRestartCount),\n      middleware: clientOptions.middleware ?? {},\n      uriConverters: clientOptions.uriConverters,\n      workspaceFolder: clientOptions.workspaceFolder,\n      connectionOptions: clientOptions.connectionOptions,\n      markdown,\n      // suspend: {\n      // \tmode: clientOptions.suspend?.mode ?? SuspendMode.off,\n      // \tcallback: clientOptions.suspend?.callback ?? (() => Promise.resolve(true)),\n      // \tinterval: clientOptions.suspend?.interval ? Math.max(clientOptions.suspend.interval, defaultInterval) : defaultInterval\n      // },\n      diagnosticPullOptions: clientOptions.diagnosticPullOptions ?? {\n        onChange: true,\n        onSave: false\n      },\n      notebookDocumentOptions: clientOptions.notebookDocumentOptions ?? {}\n    };\n    this._clientOptions.synchronize = this._clientOptions.synchronize || {};\n    this._state = ClientState.Initial;\n    this._ignoredRegistrations = new Set();\n    this._listeners = [];\n    this._notificationHandlers = new Map();\n    this._pendingNotificationHandlers = new Map();\n    this._notificationDisposables = new Map();\n    this._requestHandlers = new Map();\n    this._pendingRequestHandlers = new Map();\n    this._requestDisposables = new Map();\n    this._progressHandlers = new Map();\n    this._pendingProgressHandlers = new Map();\n    this._progressDisposables = new Map();\n    this._connection = undefined;\n    // this._idleStart = undefined;\n    this._initializeResult = undefined;\n    if (clientOptions.outputChannel) {\n      this._outputChannel = clientOptions.outputChannel;\n      this._disposeOutputChannel = false;\n    } else {\n      this._outputChannel = undefined;\n      this._disposeOutputChannel = true;\n    }\n    this._traceOutputChannel = clientOptions.traceOutputChannel;\n    this._diagnostics = undefined;\n    this._pendingOpenNotifications = new Set();\n    this._pendingChangeSemaphore = new async_1.Semaphore(1);\n    this._pendingChangeDelayer = new async_1.Delayer(250);\n    this._fileEvents = [];\n    this._fileEventDelayer = new async_1.Delayer(250);\n    this._onStop = undefined;\n    this._telemetryEmitter = new vscode_languageserver_protocol_1.Emitter();\n    this._stateChangeEmitter = new vscode_languageserver_protocol_1.Emitter();\n    this._trace = vscode_languageserver_protocol_1.Trace.Off;\n    this._tracer = {\n      log: (messageOrDataObject, data) => {\n        if (Is.string(messageOrDataObject)) {\n          this.logTrace(messageOrDataObject, data);\n        } else {\n          this.logObjectTrace(messageOrDataObject);\n        }\n      }\n    };\n    this._c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);\n    this._p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined, this._clientOptions.markdown.isTrusted, this._clientOptions.markdown.supportHtml);\n    this._syncedDocuments = new Map();\n    this.registerBuiltinFeatures();\n  }\n  get name() {\n    return this._name;\n  }\n  get middleware() {\n    return this._clientOptions.middleware ?? Object.create(null);\n  }\n  get clientOptions() {\n    return this._clientOptions;\n  }\n  get protocol2CodeConverter() {\n    return this._p2c;\n  }\n  get code2ProtocolConverter() {\n    return this._c2p;\n  }\n  get onTelemetry() {\n    return this._telemetryEmitter.event;\n  }\n  get onDidChangeState() {\n    return this._stateChangeEmitter.event;\n  }\n  get outputChannel() {\n    if (!this._outputChannel) {\n      this._outputChannel = vscode_1.window.createOutputChannel(this._clientOptions.outputChannelName ? this._clientOptions.outputChannelName : this._name);\n    }\n    return this._outputChannel;\n  }\n  get traceOutputChannel() {\n    if (this._traceOutputChannel) {\n      return this._traceOutputChannel;\n    }\n    return this.outputChannel;\n  }\n  get diagnostics() {\n    return this._diagnostics;\n  }\n  get state() {\n    return this.getPublicState();\n  }\n  get $state() {\n    return this._state;\n  }\n  set $state(value) {\n    let oldState = this.getPublicState();\n    this._state = value;\n    let newState = this.getPublicState();\n    if (newState !== oldState) {\n      this._stateChangeEmitter.fire({\n        oldState,\n        newState\n      });\n    }\n  }\n  getPublicState() {\n    switch (this.$state) {\n      case ClientState.Starting:\n        return State.Starting;\n      case ClientState.Running:\n        return State.Running;\n      default:\n        return State.Stopped;\n    }\n  }\n  get initializeResult() {\n    return this._initializeResult;\n  }\n  async sendRequest(type, ...params) {\n    if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n      return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n    }\n    // Ensure we have a connection before we force the document sync.\n    const connection = await this.$start();\n    // If any document is synced in full mode make sure we flush any pending\n    // full document syncs.\n    if (this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n      await this.sendPendingFullTextDocumentChanges(connection);\n    }\n    const _sendRequest = this._clientOptions.middleware?.sendRequest;\n    if (_sendRequest !== undefined) {\n      let param = undefined;\n      let token = undefined;\n      // Separate cancellation tokens from other parameters for a better client interface\n      if (params.length === 1) {\n        // CancellationToken is an interface, so we need to check if the first param complies to it\n        if (vscode_languageserver_protocol_1.CancellationToken.is(params[0])) {\n          token = params[0];\n        } else {\n          param = params[0];\n        }\n      } else if (params.length === 2) {\n        param = params[0];\n        token = params[1];\n      }\n      // Return the general middleware invocation defining `next` as a utility function that reorganizes parameters to\n      // pass them to the original sendRequest function.\n      return _sendRequest(type, param, token, (type, param, token) => {\n        const params = [];\n        // Add the parameters if there are any\n        if (param !== undefined) {\n          params.push(param);\n        }\n        // Add the cancellation token if there is one\n        if (token !== undefined) {\n          params.push(token);\n        }\n        return connection.sendRequest(type, ...params);\n      });\n    } else {\n      return connection.sendRequest(type, ...params);\n    }\n  }\n  onRequest(type, handler) {\n    const method = typeof type === 'string' ? type : type.method;\n    this._requestHandlers.set(method, handler);\n    const connection = this.activeConnection();\n    let disposable;\n    if (connection !== undefined) {\n      this._requestDisposables.set(method, connection.onRequest(type, handler));\n      disposable = {\n        dispose: () => {\n          const disposable = this._requestDisposables.get(method);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._requestDisposables.delete(method);\n          }\n        }\n      };\n    } else {\n      this._pendingRequestHandlers.set(method, handler);\n      disposable = {\n        dispose: () => {\n          this._pendingRequestHandlers.delete(method);\n          const disposable = this._requestDisposables.get(method);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._requestDisposables.delete(method);\n          }\n        }\n      };\n    }\n    return {\n      dispose: () => {\n        this._requestHandlers.delete(method);\n        disposable.dispose();\n      }\n    };\n  }\n  async sendNotification(type, params) {\n    if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n      return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n    }\n    const needsPendingFullTextDocumentSync = this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n    let openNotification;\n    if (needsPendingFullTextDocumentSync && typeof type !== 'string' && type.method === vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.method) {\n      openNotification = params?.textDocument.uri;\n      this._pendingOpenNotifications.add(openNotification);\n    }\n    // Ensure we have a connection before we force the document sync.\n    const connection = await this.$start();\n    // If any document is synced in full mode make sure we flush any pending\n    // full document syncs.\n    if (needsPendingFullTextDocumentSync) {\n      await this.sendPendingFullTextDocumentChanges(connection);\n    }\n    // We need to remove the pending open notification before we actually\n    // send the notification over the connection. Otherwise there could be\n    // a request coming in that although the open notification got already put\n    // onto the wire will ignore pending document changes.\n    //\n    // Since the code path of connection.sendNotification is actually sync\n    // until the message is handed of to the writer and the writer as a semaphore\n    // lock with a capacity of 1 no additional async scheduling can happen until\n    // the message is actually handed of.\n    if (openNotification !== undefined) {\n      this._pendingOpenNotifications.delete(openNotification);\n    }\n    const _sendNotification = this._clientOptions.middleware?.sendNotification;\n    return _sendNotification ? _sendNotification(type, connection.sendNotification.bind(connection), params) : connection.sendNotification(type, params);\n  }\n  onNotification(type, handler) {\n    const method = typeof type === 'string' ? type : type.method;\n    this._notificationHandlers.set(method, handler);\n    const connection = this.activeConnection();\n    let disposable;\n    if (connection !== undefined) {\n      this._notificationDisposables.set(method, connection.onNotification(type, handler));\n      disposable = {\n        dispose: () => {\n          const disposable = this._notificationDisposables.get(method);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._notificationDisposables.delete(method);\n          }\n        }\n      };\n    } else {\n      this._pendingNotificationHandlers.set(method, handler);\n      disposable = {\n        dispose: () => {\n          this._pendingNotificationHandlers.delete(method);\n          const disposable = this._notificationDisposables.get(method);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._notificationDisposables.delete(method);\n          }\n        }\n      };\n    }\n    return {\n      dispose: () => {\n        this._notificationHandlers.delete(method);\n        disposable.dispose();\n      }\n    };\n  }\n  async sendProgress(type, token, value) {\n    if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n      return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n    }\n    try {\n      // Ensure we have a connection before we force the document sync.\n      const connection = await this.$start();\n      return connection.sendProgress(type, token, value);\n    } catch (error) {\n      this.error(`Sending progress for token ${token} failed.`, error);\n      throw error;\n    }\n  }\n  onProgress(type, token, handler) {\n    this._progressHandlers.set(token, {\n      type,\n      handler\n    });\n    const connection = this.activeConnection();\n    let disposable;\n    const handleWorkDoneProgress = this._clientOptions.middleware?.handleWorkDoneProgress;\n    const realHandler = vscode_languageserver_protocol_1.WorkDoneProgress.is(type) && handleWorkDoneProgress !== undefined ? params => {\n      handleWorkDoneProgress(token, params, () => handler(params));\n    } : handler;\n    if (connection !== undefined) {\n      this._progressDisposables.set(token, connection.onProgress(type, token, realHandler));\n      disposable = {\n        dispose: () => {\n          const disposable = this._progressDisposables.get(token);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._progressDisposables.delete(token);\n          }\n        }\n      };\n    } else {\n      this._pendingProgressHandlers.set(token, {\n        type,\n        handler\n      });\n      disposable = {\n        dispose: () => {\n          this._pendingProgressHandlers.delete(token);\n          const disposable = this._progressDisposables.get(token);\n          if (disposable !== undefined) {\n            disposable.dispose();\n            this._progressDisposables.delete(token);\n          }\n        }\n      };\n    }\n    return {\n      dispose: () => {\n        this._progressHandlers.delete(token);\n        disposable.dispose();\n      }\n    };\n  }\n  createDefaultErrorHandler(maxRestartCount) {\n    if (maxRestartCount !== undefined && maxRestartCount < 0) {\n      throw new Error(`Invalid maxRestartCount: ${maxRestartCount}`);\n    }\n    return new DefaultErrorHandler(this, maxRestartCount ?? 4);\n  }\n  async setTrace(value) {\n    this._trace = value;\n    const connection = this.activeConnection();\n    if (connection !== undefined) {\n      await connection.trace(this._trace, this._tracer, {\n        sendNotification: false,\n        traceFormat: this._traceFormat\n      });\n    }\n  }\n  data2String(data) {\n    if (data instanceof vscode_languageserver_protocol_1.ResponseError) {\n      const responseError = data;\n      return `  Message: ${responseError.message}\\n  Code: ${responseError.code} ${responseError.data ? '\\n' + responseError.data.toString() : ''}`;\n    }\n    if (data instanceof Error) {\n      if (Is.string(data.stack)) {\n        return data.stack;\n      }\n      return data.message;\n    }\n    if (Is.string(data)) {\n      return data;\n    }\n    return data.toString();\n  }\n  debug(message, data, showNotification = true) {\n    this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Debug, RevealOutputChannelOn.Debug, 'Debug', message, data, showNotification);\n  }\n  info(message, data, showNotification = true) {\n    this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Info, RevealOutputChannelOn.Info, 'Info', message, data, showNotification);\n  }\n  warn(message, data, showNotification = true) {\n    this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Warning, RevealOutputChannelOn.Warn, 'Warn', message, data, showNotification);\n  }\n  error(message, data, showNotification = true) {\n    this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Error, RevealOutputChannelOn.Error, 'Error', message, data, showNotification);\n  }\n  logOutputMessage(type, reveal, name, message, data, showNotification) {\n    this.outputChannel.appendLine(`[${name.padEnd(5)} - ${new Date().toLocaleTimeString()}] ${message}`);\n    if (data !== null && data !== undefined) {\n      this.outputChannel.appendLine(this.data2String(data));\n    }\n    if (showNotification === 'force' || showNotification && this._clientOptions.revealOutputChannelOn <= reveal) {\n      this.showNotificationMessage(type, message);\n    }\n  }\n  showNotificationMessage(type, message) {\n    message = message ?? 'A request has failed. See the output for more information.';\n    const messageFunc = type === vscode_languageserver_protocol_1.MessageType.Error ? vscode_1.window.showErrorMessage : type === vscode_languageserver_protocol_1.MessageType.Warning ? vscode_1.window.showWarningMessage : vscode_1.window.showInformationMessage;\n    void messageFunc(message, 'Go to output').then(selection => {\n      if (selection !== undefined) {\n        this.outputChannel.show(true);\n      }\n    });\n  }\n  logTrace(message, data) {\n    this.traceOutputChannel.appendLine(`[Trace - ${new Date().toLocaleTimeString()}] ${message}`);\n    if (data) {\n      this.traceOutputChannel.appendLine(this.data2String(data));\n    }\n  }\n  logObjectTrace(data) {\n    if (data.isLSPMessage && data.type) {\n      this.traceOutputChannel.append(`[LSP   - ${new Date().toLocaleTimeString()}] `);\n    } else {\n      this.traceOutputChannel.append(`[Trace - ${new Date().toLocaleTimeString()}] `);\n    }\n    if (data) {\n      this.traceOutputChannel.appendLine(`${JSON.stringify(data)}`);\n    }\n  }\n  needsStart() {\n    return this.$state === ClientState.Initial || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped;\n  }\n  needsStop() {\n    return this.$state === ClientState.Starting || this.$state === ClientState.Running;\n  }\n  activeConnection() {\n    return this.$state === ClientState.Running && this._connection !== undefined ? this._connection : undefined;\n  }\n  isRunning() {\n    return this.$state === ClientState.Running;\n  }\n  async start() {\n    if (this._disposed === 'disposing' || this._disposed === 'disposed') {\n      throw new Error(`Client got disposed and can't be restarted.`);\n    }\n    if (this.$state === ClientState.Stopping) {\n      throw new Error(`Client is currently stopping. Can only restart a full stopped client`);\n    }\n    // We are already running or are in the process of getting up\n    // to speed.\n    if (this._onStart !== undefined) {\n      return this._onStart;\n    }\n    const [promise, resolve, reject] = this.createOnStartPromise();\n    this._onStart = promise;\n    // If we restart then the diagnostics collection is reused.\n    if (this._diagnostics === undefined) {\n      this._diagnostics = this._clientOptions.diagnosticCollectionName ? vscode_1.languages.createDiagnosticCollection(this._clientOptions.diagnosticCollectionName) : vscode_1.languages.createDiagnosticCollection();\n    }\n    // When we start make all buffer handlers pending so that they\n    // get added.\n    for (const [method, handler] of this._notificationHandlers) {\n      if (!this._pendingNotificationHandlers.has(method)) {\n        this._pendingNotificationHandlers.set(method, handler);\n      }\n    }\n    for (const [method, handler] of this._requestHandlers) {\n      if (!this._pendingRequestHandlers.has(method)) {\n        this._pendingRequestHandlers.set(method, handler);\n      }\n    }\n    for (const [token, data] of this._progressHandlers) {\n      if (!this._pendingProgressHandlers.has(token)) {\n        this._pendingProgressHandlers.set(token, data);\n      }\n    }\n    this.$state = ClientState.Starting;\n    try {\n      const connection = await this.createConnection();\n      connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, message => {\n        switch (message.type) {\n          case vscode_languageserver_protocol_1.MessageType.Error:\n            this.error(message.message, undefined, false);\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Warning:\n            this.warn(message.message, undefined, false);\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Info:\n            this.info(message.message, undefined, false);\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Debug:\n            this.debug(message.message, undefined, false);\n            break;\n          default:\n            this.outputChannel.appendLine(message.message);\n        }\n      });\n      connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, message => {\n        switch (message.type) {\n          case vscode_languageserver_protocol_1.MessageType.Error:\n            void vscode_1.window.showErrorMessage(message.message);\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Warning:\n            void vscode_1.window.showWarningMessage(message.message);\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Info:\n            void vscode_1.window.showInformationMessage(message.message);\n            break;\n          default:\n            void vscode_1.window.showInformationMessage(message.message);\n        }\n      });\n      connection.onRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params => {\n        let messageFunc;\n        switch (params.type) {\n          case vscode_languageserver_protocol_1.MessageType.Error:\n            messageFunc = vscode_1.window.showErrorMessage;\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Warning:\n            messageFunc = vscode_1.window.showWarningMessage;\n            break;\n          case vscode_languageserver_protocol_1.MessageType.Info:\n            messageFunc = vscode_1.window.showInformationMessage;\n            break;\n          default:\n            messageFunc = vscode_1.window.showInformationMessage;\n        }\n        let actions = params.actions || [];\n        return messageFunc(params.message, ...actions);\n      });\n      connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data => {\n        this._telemetryEmitter.fire(data);\n      });\n      connection.onRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, async params => {\n        const showDocument = async params => {\n          const uri = this.protocol2CodeConverter.asUri(params.uri);\n          try {\n            if (params.external === true) {\n              const success = await vscode_1.env.openExternal(uri);\n              return {\n                success\n              };\n            } else {\n              const options = {};\n              if (params.selection !== undefined) {\n                options.selection = this.protocol2CodeConverter.asRange(params.selection);\n              }\n              if (params.takeFocus === undefined || params.takeFocus === false) {\n                options.preserveFocus = true;\n              } else if (params.takeFocus === true) {\n                options.preserveFocus = false;\n              }\n              await vscode_1.window.showTextDocument(uri, options);\n              return {\n                success: true\n              };\n            }\n          } catch (error) {\n            return {\n              success: false\n            };\n          }\n        };\n        const middleware = this._clientOptions.middleware.window?.showDocument;\n        if (middleware !== undefined) {\n          return middleware(params, showDocument);\n        } else {\n          return showDocument(params);\n        }\n      });\n      connection.listen();\n      await this.initialize(connection);\n      resolve();\n    } catch (error) {\n      this.$state = ClientState.StartFailed;\n      this.error(`${this._name} client: couldn't create connection to server.`, error, 'force');\n      reject(error);\n    }\n    return this._onStart;\n  }\n  createOnStartPromise() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n      resolve = _resolve;\n      reject = _reject;\n    });\n    return [promise, resolve, reject];\n  }\n  async initialize(connection) {\n    this.refreshTrace(connection, false);\n    const initOption = this._clientOptions.initializationOptions;\n    // If the client is locked to a workspace folder use it. In this case the workspace folder\n    // feature is not registered and we need to initialize the value here.\n    const [rootPath, workspaceFolders] = this._clientOptions.workspaceFolder !== undefined ? [this._clientOptions.workspaceFolder.uri.fsPath, [{\n      uri: this._c2p.asUri(this._clientOptions.workspaceFolder.uri),\n      name: this._clientOptions.workspaceFolder.name\n    }]] : [this._clientGetRootPath(), null];\n    const initParams = {\n      processId: null,\n      clientInfo: {\n        name: vscode_1.env.appName,\n        version: vscode_1.version\n      },\n      locale: this.getLocale(),\n      rootPath: rootPath ? rootPath : null,\n      rootUri: rootPath ? this._c2p.asUri(vscode_1.Uri.file(rootPath)) : null,\n      capabilities: this.computeClientCapabilities(),\n      initializationOptions: Is.func(initOption) ? initOption() : initOption,\n      trace: vscode_languageserver_protocol_1.Trace.toString(this._trace),\n      workspaceFolders: workspaceFolders\n    };\n    this.fillInitializeParams(initParams);\n    if (this._clientOptions.progressOnInitialization) {\n      const token = UUID.generateUuid();\n      const part = new progressPart_1.ProgressPart(connection, token);\n      initParams.workDoneToken = token;\n      try {\n        const result = await this.doInitialize(connection, initParams);\n        part.done();\n        return result;\n      } catch (error) {\n        part.cancel();\n        throw error;\n      }\n    } else {\n      return this.doInitialize(connection, initParams);\n    }\n  }\n  async doInitialize(connection, initParams) {\n    try {\n      const result = await connection.initialize(initParams);\n      if (result.capabilities.positionEncoding !== undefined && result.capabilities.positionEncoding !== vscode_languageserver_protocol_1.PositionEncodingKind.UTF16) {\n        throw new Error(`Unsupported position encoding (${result.capabilities.positionEncoding}) received from server ${this.name}`);\n      }\n      this._initializeResult = result;\n      this.$state = ClientState.Running;\n      let textDocumentSyncOptions = undefined;\n      if (Is.number(result.capabilities.textDocumentSync)) {\n        if (result.capabilities.textDocumentSync === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n          textDocumentSyncOptions = {\n            openClose: false,\n            change: vscode_languageserver_protocol_1.TextDocumentSyncKind.None,\n            save: undefined\n          };\n        } else {\n          textDocumentSyncOptions = {\n            openClose: true,\n            change: result.capabilities.textDocumentSync,\n            save: {\n              includeText: false\n            }\n          };\n        }\n      } else if (result.capabilities.textDocumentSync !== undefined && result.capabilities.textDocumentSync !== null) {\n        textDocumentSyncOptions = result.capabilities.textDocumentSync;\n      }\n      this._capabilities = Object.assign({}, result.capabilities, {\n        resolvedTextDocumentSync: textDocumentSyncOptions\n      });\n      connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params => this.handleDiagnostics(params));\n      connection.onRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params => this.handleRegistrationRequest(params));\n      // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\n      connection.onRequest('client/registerFeature', params => this.handleRegistrationRequest(params));\n      connection.onRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params => this.handleUnregistrationRequest(params));\n      // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\n      connection.onRequest('client/unregisterFeature', params => this.handleUnregistrationRequest(params));\n      connection.onRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params => this.handleApplyWorkspaceEdit(params));\n      // Add pending notification, request and progress handlers.\n      for (const [method, handler] of this._pendingNotificationHandlers) {\n        this._notificationDisposables.set(method, connection.onNotification(method, handler));\n      }\n      this._pendingNotificationHandlers.clear();\n      for (const [method, handler] of this._pendingRequestHandlers) {\n        this._requestDisposables.set(method, connection.onRequest(method, handler));\n      }\n      this._pendingRequestHandlers.clear();\n      for (const [token, data] of this._pendingProgressHandlers) {\n        this._progressDisposables.set(token, connection.onProgress(data.type, token, data.handler));\n      }\n      this._pendingProgressHandlers.clear();\n      // if (this._clientOptions.suspend.mode !== SuspendMode.off) {\n      // \tthis._idleInterval =  RAL().timer.setInterval(() => this.checkSuspend(), this._clientOptions.suspend.interval);\n      // }\n      await connection.sendNotification(vscode_languageserver_protocol_1.InitializedNotification.type, {});\n      this.hookFileEvents(connection);\n      this.hookConfigurationChanged(connection);\n      this.initializeFeatures(connection);\n      return result;\n    } catch (error) {\n      if (this._clientOptions.initializationFailedHandler) {\n        if (this._clientOptions.initializationFailedHandler(error)) {\n          void this.initialize(connection);\n        } else {\n          void this.stop();\n        }\n      } else if (error instanceof vscode_languageserver_protocol_1.ResponseError && error.data && error.data.retry) {\n        void vscode_1.window.showErrorMessage(error.message, {\n          title: 'Retry',\n          id: 'retry'\n        }).then(item => {\n          if (item && item.id === 'retry') {\n            void this.initialize(connection);\n          } else {\n            void this.stop();\n          }\n        });\n      } else {\n        if (error && error.message) {\n          void vscode_1.window.showErrorMessage(error.message);\n        }\n        this.error('Server initialization failed.', error);\n        void this.stop();\n      }\n      throw error;\n    }\n  }\n  _clientGetRootPath() {\n    let folders = vscode_1.workspace.workspaceFolders;\n    if (!folders || folders.length === 0) {\n      return undefined;\n    }\n    let folder = folders[0];\n    if (folder.uri.scheme === 'file') {\n      return folder.uri.fsPath;\n    }\n    return undefined;\n  }\n  stop(timeout = 2000) {\n    // Wait 2 seconds on stop\n    return this.shutdown('stop', timeout);\n  }\n  dispose(timeout = 2000) {\n    try {\n      this._disposed = 'disposing';\n      return this.stop(timeout);\n    } finally {\n      this._disposed = 'disposed';\n    }\n  }\n  async shutdown(mode, timeout) {\n    // If the client is stopped or in its initial state return.\n    if (this.$state === ClientState.Stopped || this.$state === ClientState.Initial) {\n      return;\n    }\n    // If we are stopping the client and have a stop promise return it.\n    if (this.$state === ClientState.Stopping) {\n      if (this._onStop !== undefined) {\n        return this._onStop;\n      } else {\n        throw new Error(`Client is stopping but no stop promise available.`);\n      }\n    }\n    const connection = this.activeConnection();\n    // We can't stop a client that is not running (e.g. has no connection). Especially not\n    // on that us starting since it can't be correctly synchronized.\n    if (connection === undefined || this.$state !== ClientState.Running) {\n      throw new Error(`Client is not running and can't be stopped. It's current state is: ${this.$state}`);\n    }\n    this._initializeResult = undefined;\n    this.$state = ClientState.Stopping;\n    this.cleanUp(mode);\n    const tp = new Promise(c => {\n      (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(c, timeout);\n    });\n    const shutdown = (async connection => {\n      await connection.shutdown();\n      await connection.exit();\n      return connection;\n    })(connection);\n    return this._onStop = Promise.race([tp, shutdown]).then(connection => {\n      // The connection won the race with the timeout.\n      if (connection !== undefined) {\n        connection.end();\n        connection.dispose();\n      } else {\n        this.error(`Stopping server timed out`, undefined, false);\n        throw new Error(`Stopping the server timed out`);\n      }\n    }, error => {\n      this.error(`Stopping server failed`, error, false);\n      throw error;\n    }).finally(() => {\n      this.$state = ClientState.Stopped;\n      mode === 'stop' && this.cleanUpChannel();\n      this._onStart = undefined;\n      this._onStop = undefined;\n      this._connection = undefined;\n      this._ignoredRegistrations.clear();\n    });\n  }\n  cleanUp(mode) {\n    // purge outstanding file events.\n    this._fileEvents = [];\n    this._fileEventDelayer.cancel();\n    const disposables = this._listeners.splice(0, this._listeners.length);\n    for (const disposable of disposables) {\n      disposable.dispose();\n    }\n    if (this._syncedDocuments) {\n      this._syncedDocuments.clear();\n    }\n    // Clear features in reverse order;\n    for (const feature of Array.from(this._features.entries()).map(entry => entry[1]).reverse()) {\n      feature.clear();\n    }\n    if (mode === 'stop' && this._diagnostics !== undefined) {\n      this._diagnostics.dispose();\n      this._diagnostics = undefined;\n    }\n    if (this._idleInterval !== undefined) {\n      this._idleInterval.dispose();\n      this._idleInterval = undefined;\n    }\n    // this._idleStart = undefined;\n  }\n  cleanUpChannel() {\n    if (this._outputChannel !== undefined && this._disposeOutputChannel) {\n      this._outputChannel.dispose();\n      this._outputChannel = undefined;\n    }\n  }\n  notifyFileEvent(event) {\n    const client = this;\n    async function didChangeWatchedFile(event) {\n      client._fileEvents.push(event);\n      return client._fileEventDelayer.trigger(async () => {\n        await client.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, {\n          changes: client._fileEvents\n        });\n        client._fileEvents = [];\n      });\n    }\n    const workSpaceMiddleware = this.clientOptions.middleware?.workspace;\n    (workSpaceMiddleware?.didChangeWatchedFile ? workSpaceMiddleware.didChangeWatchedFile(event, didChangeWatchedFile) : didChangeWatchedFile(event)).catch(error => {\n      client.error(`Notify file events failed.`, error);\n    });\n  }\n  async sendPendingFullTextDocumentChanges(connection) {\n    return this._pendingChangeSemaphore.lock(async () => {\n      try {\n        const changes = this._didChangeTextDocumentFeature.getPendingDocumentChanges(this._pendingOpenNotifications);\n        if (changes.length === 0) {\n          return;\n        }\n        for (const document of changes) {\n          const params = this.code2ProtocolConverter.asChangeTextDocumentParams(document);\n          // We await the send and not the delivery since it is more or less the same for\n          // notifications.\n          await connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n          this._didChangeTextDocumentFeature.notificationSent(document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n        }\n      } catch (error) {\n        this.error(`Sending pending changes failed`, error, false);\n        throw error;\n      }\n    });\n  }\n  triggerPendingChangeDelivery() {\n    this._pendingChangeDelayer.trigger(async () => {\n      const connection = this.activeConnection();\n      if (connection === undefined) {\n        this.triggerPendingChangeDelivery();\n        return;\n      }\n      await this.sendPendingFullTextDocumentChanges(connection);\n    }).catch(error => this.error(`Delivering pending changes failed`, error, false));\n  }\n  handleDiagnostics(params) {\n    if (!this._diagnostics) {\n      return;\n    }\n    const key = params.uri;\n    if (this._diagnosticQueueState.state === 'busy' && this._diagnosticQueueState.document === key) {\n      // Cancel the active run;\n      this._diagnosticQueueState.tokenSource.cancel();\n    }\n    this._diagnosticQueue.set(params.uri, params.diagnostics);\n    this.triggerDiagnosticQueue();\n  }\n  triggerDiagnosticQueue() {\n    (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => {\n      this.workDiagnosticQueue();\n    });\n  }\n  workDiagnosticQueue() {\n    if (this._diagnosticQueueState.state === 'busy') {\n      return;\n    }\n    const next = this._diagnosticQueue.entries().next();\n    if (next.done === true) {\n      // Nothing in the queue\n      return;\n    }\n    const [document, diagnostics] = next.value;\n    this._diagnosticQueue.delete(document);\n    const tokenSource = new vscode_1.CancellationTokenSource();\n    this._diagnosticQueueState = {\n      state: 'busy',\n      document: document,\n      tokenSource\n    };\n    this._p2c.asDiagnostics(diagnostics, tokenSource.token).then(converted => {\n      if (!tokenSource.token.isCancellationRequested) {\n        const uri = this._p2c.asUri(document);\n        const middleware = this.clientOptions.middleware;\n        if (middleware.handleDiagnostics) {\n          middleware.handleDiagnostics(uri, converted, (uri, diagnostics) => this.setDiagnostics(uri, diagnostics));\n        } else {\n          this.setDiagnostics(uri, converted);\n        }\n      }\n    }).finally(() => {\n      this._diagnosticQueueState = {\n        state: 'idle'\n      };\n      this.triggerDiagnosticQueue();\n    });\n  }\n  setDiagnostics(uri, diagnostics) {\n    if (!this._diagnostics) {\n      return;\n    }\n    this._diagnostics.set(uri, diagnostics);\n  }\n  getLocale() {\n    return vscode_1.env.language;\n  }\n  async $start() {\n    if (this.$state === ClientState.StartFailed) {\n      throw new Error(`Previous start failed. Can't restart server.`);\n    }\n    await this.start();\n    const connection = this.activeConnection();\n    if (connection === undefined) {\n      throw new Error(`Starting server failed`);\n    }\n    return connection;\n  }\n  async createConnection() {\n    let errorHandler = (error, message, count) => {\n      this.handleConnectionError(error, message, count).catch(error => this.error(`Handling connection error failed`, error));\n    };\n    let closeHandler = () => {\n      this.handleConnectionClosed().catch(error => this.error(`Handling connection close failed`, error));\n    };\n    const transports = await this.createMessageTransports(this._clientOptions.stdioEncoding || 'utf8');\n    this._connection = createConnection(transports.reader, transports.writer, errorHandler, closeHandler, this._clientOptions.connectionOptions);\n    return this._connection;\n  }\n  async handleConnectionClosed() {\n    // Check whether this is a normal shutdown in progress or the client stopped normally.\n    if (this.$state === ClientState.Stopped) {\n      return;\n    }\n    try {\n      if (this._connection !== undefined) {\n        this._connection.dispose();\n      }\n    } catch (error) {\n      // Disposing a connection could fail if error cases.\n    }\n    let handlerResult = {\n      action: CloseAction.DoNotRestart\n    };\n    if (this.$state !== ClientState.Stopping) {\n      try {\n        handlerResult = await this._clientOptions.errorHandler.closed();\n      } catch (error) {\n        // Ignore errors coming from the error handler.\n      }\n    }\n    this._connection = undefined;\n    if (handlerResult.action === CloseAction.DoNotRestart) {\n      this.error(handlerResult.message ?? 'Connection to server got closed. Server will not be restarted.', undefined, handlerResult.handled === true ? false : 'force');\n      this.cleanUp('stop');\n      if (this.$state === ClientState.Starting) {\n        this.$state = ClientState.StartFailed;\n      } else {\n        this.$state = ClientState.Stopped;\n      }\n      this._onStop = Promise.resolve();\n      this._onStart = undefined;\n    } else if (handlerResult.action === CloseAction.Restart) {\n      this.info(handlerResult.message ?? 'Connection to server got closed. Server will restart.', !handlerResult.handled);\n      this.cleanUp('restart');\n      this.$state = ClientState.Initial;\n      this._onStop = Promise.resolve();\n      this._onStart = undefined;\n      this.start().catch(error => this.error(`Restarting server failed`, error, 'force'));\n    }\n  }\n  async handleConnectionError(error, message, count) {\n    const handlerResult = await this._clientOptions.errorHandler.error(error, message, count);\n    if (handlerResult.action === ErrorAction.Shutdown) {\n      this.error(handlerResult.message ?? `Client ${this._name}: connection to server is erroring.\\n${error.message}\\nShutting down server.`, undefined, handlerResult.handled === true ? false : 'force');\n      this.stop().catch(error => {\n        this.error(`Stopping server failed`, error, false);\n      });\n    } else {\n      this.error(handlerResult.message ?? `Client ${this._name}: connection to server is erroring.\\n${error.message}`, undefined, handlerResult.handled === true ? false : 'force');\n    }\n  }\n  hookConfigurationChanged(connection) {\n    this._listeners.push(vscode_1.workspace.onDidChangeConfiguration(() => {\n      this.refreshTrace(connection, true);\n    }));\n  }\n  refreshTrace(connection, sendNotification = false) {\n    const config = vscode_1.workspace.getConfiguration(this._id);\n    let trace = vscode_languageserver_protocol_1.Trace.Off;\n    let traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\n    if (config) {\n      const traceConfig = config.get('trace.server', 'off');\n      if (typeof traceConfig === 'string') {\n        trace = vscode_languageserver_protocol_1.Trace.fromString(traceConfig);\n      } else {\n        trace = vscode_languageserver_protocol_1.Trace.fromString(config.get('trace.server.verbosity', 'off'));\n        traceFormat = vscode_languageserver_protocol_1.TraceFormat.fromString(config.get('trace.server.format', 'text'));\n      }\n    }\n    this._trace = trace;\n    this._traceFormat = traceFormat;\n    connection.trace(this._trace, this._tracer, {\n      sendNotification,\n      traceFormat: this._traceFormat\n    }).catch(error => {\n      this.error(`Updating trace failed with error`, error, false);\n    });\n  }\n  hookFileEvents(_connection) {\n    let fileEvents = this._clientOptions.synchronize.fileEvents;\n    if (!fileEvents) {\n      return;\n    }\n    let watchers;\n    if (Is.array(fileEvents)) {\n      watchers = fileEvents;\n    } else {\n      watchers = [fileEvents];\n    }\n    if (!watchers) {\n      return;\n    }\n    this._dynamicFeatures.get(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type.method).registerRaw(UUID.generateUuid(), watchers);\n  }\n  registerFeatures(features) {\n    for (let feature of features) {\n      this.registerFeature(feature);\n    }\n  }\n  registerFeature(feature) {\n    this._features.push(feature);\n    if (features_1.DynamicFeature.is(feature)) {\n      const registrationType = feature.registrationType;\n      this._dynamicFeatures.set(registrationType.method, feature);\n    }\n  }\n  getFeature(request) {\n    return this._dynamicFeatures.get(request);\n  }\n  hasDedicatedTextSynchronizationFeature(textDocument) {\n    const feature = this.getFeature(vscode_languageserver_protocol_1.NotebookDocumentSyncRegistrationType.method);\n    if (feature === undefined || !(feature instanceof notebook_1.NotebookDocumentSyncFeature)) {\n      return false;\n    }\n    return feature.handles(textDocument);\n  }\n  registerBuiltinFeatures() {\n    const pendingFullTextDocumentChanges = new Map();\n    this.registerFeature(new configuration_1.ConfigurationFeature(this));\n    this.registerFeature(new textSynchronization_1.DidOpenTextDocumentFeature(this, this._syncedDocuments));\n    this._didChangeTextDocumentFeature = new textSynchronization_1.DidChangeTextDocumentFeature(this, pendingFullTextDocumentChanges);\n    this._didChangeTextDocumentFeature.onPendingChangeAdded(() => {\n      this.triggerPendingChangeDelivery();\n    });\n    this.registerFeature(this._didChangeTextDocumentFeature);\n    this.registerFeature(new textSynchronization_1.WillSaveFeature(this));\n    this.registerFeature(new textSynchronization_1.WillSaveWaitUntilFeature(this));\n    this.registerFeature(new textSynchronization_1.DidSaveTextDocumentFeature(this));\n    this.registerFeature(new textSynchronization_1.DidCloseTextDocumentFeature(this, this._syncedDocuments, pendingFullTextDocumentChanges));\n    this.registerFeature(new fileSystemWatcher_1.FileSystemWatcherFeature(this, event => this.notifyFileEvent(event)));\n    this.registerFeature(new completion_1.CompletionItemFeature(this));\n    this.registerFeature(new hover_1.HoverFeature(this));\n    this.registerFeature(new signatureHelp_1.SignatureHelpFeature(this));\n    this.registerFeature(new definition_1.DefinitionFeature(this));\n    this.registerFeature(new reference_1.ReferencesFeature(this));\n    this.registerFeature(new documentHighlight_1.DocumentHighlightFeature(this));\n    this.registerFeature(new documentSymbol_1.DocumentSymbolFeature(this));\n    this.registerFeature(new workspaceSymbol_1.WorkspaceSymbolFeature(this));\n    this.registerFeature(new codeAction_1.CodeActionFeature(this));\n    this.registerFeature(new codeLens_1.CodeLensFeature(this));\n    this.registerFeature(new formatting_1.DocumentFormattingFeature(this));\n    this.registerFeature(new formatting_1.DocumentRangeFormattingFeature(this));\n    this.registerFeature(new formatting_1.DocumentOnTypeFormattingFeature(this));\n    this.registerFeature(new rename_1.RenameFeature(this));\n    this.registerFeature(new documentLink_1.DocumentLinkFeature(this));\n    this.registerFeature(new executeCommand_1.ExecuteCommandFeature(this));\n    this.registerFeature(new configuration_1.SyncConfigurationFeature(this));\n    this.registerFeature(new typeDefinition_1.TypeDefinitionFeature(this));\n    this.registerFeature(new implementation_1.ImplementationFeature(this));\n    this.registerFeature(new colorProvider_1.ColorProviderFeature(this));\n    // We only register the workspace folder feature if the client is not locked\n    // to a specific workspace folder.\n    if (this.clientOptions.workspaceFolder === undefined) {\n      this.registerFeature(new workspaceFolder_1.WorkspaceFoldersFeature(this));\n    }\n    this.registerFeature(new foldingRange_1.FoldingRangeFeature(this));\n    this.registerFeature(new declaration_1.DeclarationFeature(this));\n    this.registerFeature(new selectionRange_1.SelectionRangeFeature(this));\n    this.registerFeature(new progress_1.ProgressFeature(this));\n    this.registerFeature(new callHierarchy_1.CallHierarchyFeature(this));\n    this.registerFeature(new semanticTokens_1.SemanticTokensFeature(this));\n    this.registerFeature(new linkedEditingRange_1.LinkedEditingFeature(this));\n    this.registerFeature(new fileOperations_1.DidCreateFilesFeature(this));\n    this.registerFeature(new fileOperations_1.DidRenameFilesFeature(this));\n    this.registerFeature(new fileOperations_1.DidDeleteFilesFeature(this));\n    this.registerFeature(new fileOperations_1.WillCreateFilesFeature(this));\n    this.registerFeature(new fileOperations_1.WillRenameFilesFeature(this));\n    this.registerFeature(new fileOperations_1.WillDeleteFilesFeature(this));\n    this.registerFeature(new typeHierarchy_1.TypeHierarchyFeature(this));\n    this.registerFeature(new inlineValue_1.InlineValueFeature(this));\n    this.registerFeature(new inlayHint_1.InlayHintsFeature(this));\n    this.registerFeature(new diagnostic_1.DiagnosticFeature(this));\n    this.registerFeature(new notebook_1.NotebookDocumentSyncFeature(this));\n  }\n  registerProposedFeatures() {\n    this.registerFeatures(ProposedFeatures.createAll(this));\n  }\n  fillInitializeParams(params) {\n    for (let feature of this._features) {\n      if (Is.func(feature.fillInitializeParams)) {\n        feature.fillInitializeParams(params);\n      }\n    }\n  }\n  computeClientCapabilities() {\n    const result = {};\n    (0, features_1.ensure)(result, 'workspace').applyEdit = true;\n    const workspaceEdit = (0, features_1.ensure)((0, features_1.ensure)(result, 'workspace'), 'workspaceEdit');\n    workspaceEdit.documentChanges = true;\n    workspaceEdit.resourceOperations = [vscode_languageserver_protocol_1.ResourceOperationKind.Create, vscode_languageserver_protocol_1.ResourceOperationKind.Rename, vscode_languageserver_protocol_1.ResourceOperationKind.Delete];\n    workspaceEdit.failureHandling = vscode_languageserver_protocol_1.FailureHandlingKind.TextOnlyTransactional;\n    workspaceEdit.normalizesLineEndings = true;\n    workspaceEdit.changeAnnotationSupport = {\n      groupsOnLabel: true\n    };\n    const diagnostics = (0, features_1.ensure)((0, features_1.ensure)(result, 'textDocument'), 'publishDiagnostics');\n    diagnostics.relatedInformation = true;\n    diagnostics.versionSupport = false;\n    diagnostics.tagSupport = {\n      valueSet: [vscode_languageserver_protocol_1.DiagnosticTag.Unnecessary, vscode_languageserver_protocol_1.DiagnosticTag.Deprecated]\n    };\n    diagnostics.codeDescriptionSupport = true;\n    diagnostics.dataSupport = true;\n    const windowCapabilities = (0, features_1.ensure)(result, 'window');\n    const showMessage = (0, features_1.ensure)(windowCapabilities, 'showMessage');\n    showMessage.messageActionItem = {\n      additionalPropertiesSupport: true\n    };\n    const showDocument = (0, features_1.ensure)(windowCapabilities, 'showDocument');\n    showDocument.support = true;\n    const generalCapabilities = (0, features_1.ensure)(result, 'general');\n    generalCapabilities.staleRequestSupport = {\n      cancel: true,\n      retryOnContentModified: Array.from(BaseLanguageClient.RequestsToCancelOnContentModified)\n    };\n    generalCapabilities.regularExpressions = {\n      engine: 'ECMAScript',\n      version: 'ES2020'\n    };\n    generalCapabilities.markdown = {\n      parser: 'marked',\n      version: '1.1.0'\n    };\n    generalCapabilities.positionEncodings = ['utf-16'];\n    if (this._clientOptions.markdown.supportHtml) {\n      generalCapabilities.markdown.allowedTags = ['ul', 'li', 'p', 'code', 'blockquote', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'em', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'del', 'a', 'strong', 'br', 'img', 'span'];\n    }\n    for (let feature of this._features) {\n      feature.fillClientCapabilities(result);\n    }\n    return result;\n  }\n  initializeFeatures(_connection) {\n    const documentSelector = this._clientOptions.documentSelector;\n    for (const feature of this._features) {\n      if (Is.func(feature.preInitialize)) {\n        feature.preInitialize(this._capabilities, documentSelector);\n      }\n    }\n    for (const feature of this._features) {\n      feature.initialize(this._capabilities, documentSelector);\n    }\n  }\n  async handleRegistrationRequest(params) {\n    const middleware = this.clientOptions.middleware?.handleRegisterCapability;\n    if (middleware) {\n      return middleware(params, nextParams => this.doRegisterCapability(nextParams));\n    } else {\n      return this.doRegisterCapability(params);\n    }\n  }\n  async doRegisterCapability(params) {\n    // We will not receive a registration call before a client is running\n    // from a server. However if we stop or shutdown we might which might\n    // try to restart the server. So ignore registrations if we are not running\n    if (!this.isRunning()) {\n      for (const registration of params.registrations) {\n        this._ignoredRegistrations.add(registration.id);\n      }\n      return;\n    }\n    for (const registration of params.registrations) {\n      const feature = this._dynamicFeatures.get(registration.method);\n      if (feature === undefined) {\n        return Promise.reject(new Error(`No feature implementation for ${registration.method} found. Registration failed.`));\n      }\n      const options = registration.registerOptions ?? {};\n      options.documentSelector = options.documentSelector ?? this._clientOptions.documentSelector;\n      const data = {\n        id: registration.id,\n        registerOptions: options\n      };\n      try {\n        feature.register(data);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n  }\n  async handleUnregistrationRequest(params) {\n    const middleware = this.clientOptions.middleware?.handleUnregisterCapability;\n    if (middleware) {\n      return middleware(params, nextParams => this.doUnregisterCapability(nextParams));\n    } else {\n      return this.doUnregisterCapability(params);\n    }\n  }\n  async doUnregisterCapability(params) {\n    for (const unregistration of params.unregisterations) {\n      if (this._ignoredRegistrations.has(unregistration.id)) {\n        continue;\n      }\n      const feature = this._dynamicFeatures.get(unregistration.method);\n      if (!feature) {\n        return Promise.reject(new Error(`No feature implementation for ${unregistration.method} found. Unregistration failed.`));\n      }\n      feature.unregister(unregistration.id);\n    }\n  }\n  async handleApplyWorkspaceEdit(params) {\n    const workspaceEdit = params.edit;\n    // Make sure we convert workspace edits one after the other. Otherwise\n    // we might execute a workspace edit received first after we received another\n    // one since the conversion might race.\n    const converted = await this.workspaceEditLock.lock(() => {\n      return this._p2c.asWorkspaceEdit(workspaceEdit);\n    });\n    // This is some sort of workaround since the version check should be done by VS Code in the Workspace.applyEdit.\n    // However doing it here adds some safety since the server can lag more behind then an extension.\n    const openTextDocuments = new Map();\n    vscode_1.workspace.textDocuments.forEach(document => openTextDocuments.set(document.uri.toString(), document));\n    let versionMismatch = false;\n    if (workspaceEdit.documentChanges) {\n      for (const change of workspaceEdit.documentChanges) {\n        if (vscode_languageserver_protocol_1.TextDocumentEdit.is(change) && change.textDocument.version && change.textDocument.version >= 0) {\n          const changeUri = this._p2c.asUri(change.textDocument.uri).toString();\n          const textDocument = openTextDocuments.get(changeUri);\n          if (textDocument && textDocument.version !== change.textDocument.version) {\n            versionMismatch = true;\n            break;\n          }\n        }\n      }\n    }\n    if (versionMismatch) {\n      return Promise.resolve({\n        applied: false\n      });\n    }\n    return Is.asPromise(vscode_1.workspace.applyEdit(converted).then(value => {\n      return {\n        applied: value\n      };\n    }));\n  }\n  handleFailedRequest(type, token, error, defaultValue, showNotification = true) {\n    // If we get a request cancel or a content modified don't log anything.\n    if (error instanceof vscode_languageserver_protocol_1.ResponseError) {\n      // The connection got disposed while we were waiting for a response.\n      // Simply return the default value. Is the best we can do.\n      if (error.code === vscode_languageserver_protocol_1.ErrorCodes.PendingResponseRejected || error.code === vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive) {\n        return defaultValue;\n      }\n      if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.RequestCancelled || error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ServerCancelled) {\n        if (token !== undefined && token.isCancellationRequested) {\n          return defaultValue;\n        } else {\n          if (error.data !== undefined) {\n            throw new features_1.LSPCancellationError(error.data);\n          } else {\n            throw new vscode_1.CancellationError();\n          }\n        }\n      } else if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ContentModified) {\n        if (BaseLanguageClient.RequestsToCancelOnContentModified.has(type.method) || BaseLanguageClient.CancellableResolveCalls.has(type.method)) {\n          throw new vscode_1.CancellationError();\n        } else {\n          return defaultValue;\n        }\n      }\n    }\n    this.error(`Request ${type.method} failed.`, error, showNotification);\n    throw error;\n  }\n}\nexports.BaseLanguageClient = BaseLanguageClient;\nBaseLanguageClient.RequestsToCancelOnContentModified = new Set([vscode_languageserver_protocol_1.SemanticTokensRequest.method, vscode_languageserver_protocol_1.SemanticTokensRangeRequest.method, vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.method]);\nBaseLanguageClient.CancellableResolveCalls = new Set([vscode_languageserver_protocol_1.CompletionResolveRequest.method, vscode_languageserver_protocol_1.CodeLensResolveRequest.method, vscode_languageserver_protocol_1.CodeActionResolveRequest.method, vscode_languageserver_protocol_1.InlayHintResolveRequest.method, vscode_languageserver_protocol_1.DocumentLinkResolveRequest.method, vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.method]);\nclass ConsoleLogger {\n  error(message) {\n    (0, vscode_languageserver_protocol_1.RAL)().console.error(message);\n  }\n  warn(message) {\n    (0, vscode_languageserver_protocol_1.RAL)().console.warn(message);\n  }\n  info(message) {\n    (0, vscode_languageserver_protocol_1.RAL)().console.info(message);\n  }\n  log(message) {\n    (0, vscode_languageserver_protocol_1.RAL)().console.log(message);\n  }\n}\nfunction createConnection(input, output, errorHandler, closeHandler, options) {\n  const logger = new ConsoleLogger();\n  const connection = (0, vscode_languageserver_protocol_1.createProtocolConnection)(input, output, logger, options);\n  connection.onError(data => {\n    errorHandler(data[0], data[1], data[2]);\n  });\n  connection.onClose(closeHandler);\n  const result = {\n    listen: () => connection.listen(),\n    sendRequest: connection.sendRequest,\n    onRequest: connection.onRequest,\n    hasPendingResponse: connection.hasPendingResponse,\n    sendNotification: connection.sendNotification,\n    onNotification: connection.onNotification,\n    onProgress: connection.onProgress,\n    sendProgress: connection.sendProgress,\n    trace: (value, tracer, sendNotificationOrTraceOptions) => {\n      const defaultTraceOptions = {\n        sendNotification: false,\n        traceFormat: vscode_languageserver_protocol_1.TraceFormat.Text\n      };\n      if (sendNotificationOrTraceOptions === undefined) {\n        return connection.trace(value, tracer, defaultTraceOptions);\n      } else if (Is.boolean(sendNotificationOrTraceOptions)) {\n        return connection.trace(value, tracer, sendNotificationOrTraceOptions);\n      } else {\n        return connection.trace(value, tracer, sendNotificationOrTraceOptions);\n      }\n    },\n    initialize: params => {\n      // This needs to return and MUST not be await to avoid any async\n      // scheduling. Otherwise messages might overtake each other.\n      return connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params);\n    },\n    shutdown: () => {\n      // This needs to return and MUST not be await to avoid any async\n      // scheduling. Otherwise messages might overtake each other.\n      return connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined);\n    },\n    exit: () => {\n      // This needs to return and MUST not be await to avoid any async\n      // scheduling. Otherwise messages might overtake each other.\n      return connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type);\n    },\n    end: () => connection.end(),\n    dispose: () => connection.dispose()\n  };\n  return result;\n}\n// Exporting proposed protocol.\nvar ProposedFeatures;\n(function (ProposedFeatures) {\n  function createAll(_client) {\n    let result = [new inlineCompletion_1.InlineCompletionItemFeature(_client)];\n    return result;\n  }\n  ProposedFeatures.createAll = createAll;\n})(ProposedFeatures || (exports.ProposedFeatures = ProposedFeatures = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","ProposedFeatures","BaseLanguageClient","MessageTransports","SuspendMode","State","CloseAction","ErrorAction","RevealOutputChannelOn","vscode_1","require","vscode_languageserver_protocol_1","c2p","p2c","Is","async_1","UUID","progressPart_1","features_1","diagnostic_1","notebook_1","configuration_1","textSynchronization_1","completion_1","hover_1","definition_1","signatureHelp_1","documentHighlight_1","documentSymbol_1","workspaceSymbol_1","reference_1","codeAction_1","codeLens_1","formatting_1","rename_1","documentLink_1","executeCommand_1","fileSystemWatcher_1","colorProvider_1","implementation_1","typeDefinition_1","workspaceFolder_1","foldingRange_1","declaration_1","selectionRange_1","progress_1","callHierarchy_1","semanticTokens_1","fileOperations_1","linkedEditingRange_1","typeHierarchy_1","inlineValue_1","inlayHint_1","inlineCompletion_1","ResolvedClientOptions","sanitizeIsTrusted","isTrusted","undefined","stringArray","enabledCommands","DefaultErrorHandler","constructor","client","maxRestartCount","restarts","error","_error","_message","count","action","Continue","Shutdown","closed","push","Date","now","length","Restart","diff","DoNotRestart","message","name","shift","ClientState","is","candidate","MessageReader","reader","MessageWriter","writer","id","clientOptions","_traceFormat","TraceFormat","Text","_diagnosticQueue","Map","_diagnosticQueueState","state","_features","_dynamicFeatures","workspaceEditLock","Semaphore","_id","_name","markdown","supportHtml","_clientOptions","documentSelector","synchronize","diagnosticCollectionName","outputChannelName","revealOutputChannelOn","Error","stdioEncoding","initializationOptions","initializationFailedHandler","progressOnInitialization","errorHandler","createDefaultErrorHandler","connectionOptions","middleware","uriConverters","workspaceFolder","diagnosticPullOptions","onChange","onSave","notebookDocumentOptions","_state","Initial","_ignoredRegistrations","Set","_listeners","_notificationHandlers","_pendingNotificationHandlers","_notificationDisposables","_requestHandlers","_pendingRequestHandlers","_requestDisposables","_progressHandlers","_pendingProgressHandlers","_progressDisposables","_connection","_initializeResult","outputChannel","_outputChannel","_disposeOutputChannel","_traceOutputChannel","traceOutputChannel","_diagnostics","_pendingOpenNotifications","_pendingChangeSemaphore","_pendingChangeDelayer","Delayer","_fileEvents","_fileEventDelayer","_onStop","_telemetryEmitter","Emitter","_stateChangeEmitter","_trace","Trace","Off","_tracer","log","messageOrDataObject","data","string","logTrace","logObjectTrace","_c2p","createConverter","code2Protocol","_p2c","protocol2Code","_syncedDocuments","registerBuiltinFeatures","create","protocol2CodeConverter","code2ProtocolConverter","onTelemetry","event","onDidChangeState","window","createOutputChannel","diagnostics","getPublicState","$state","oldState","newState","fire","Starting","Running","Stopped","initializeResult","sendRequest","type","params","StartFailed","Stopping","Promise","reject","ResponseError","ErrorCodes","ConnectionInactive","connection","$start","_didChangeTextDocumentFeature","syncKind","TextDocumentSyncKind","Full","sendPendingFullTextDocumentChanges","_sendRequest","param","token","CancellationToken","onRequest","handler","method","set","activeConnection","disposable","dispose","get","delete","sendNotification","needsPendingFullTextDocumentSync","openNotification","DidOpenTextDocumentNotification","textDocument","uri","add","_sendNotification","bind","onNotification","sendProgress","onProgress","handleWorkDoneProgress","realHandler","WorkDoneProgress","setTrace","trace","traceFormat","data2String","responseError","code","toString","stack","debug","showNotification","logOutputMessage","MessageType","Debug","info","Info","warn","Warning","Warn","reveal","appendLine","padEnd","toLocaleTimeString","showNotificationMessage","messageFunc","showErrorMessage","showWarningMessage","showInformationMessage","then","selection","show","isLSPMessage","append","JSON","stringify","needsStart","needsStop","isRunning","start","_disposed","_onStart","promise","resolve","createOnStartPromise","languages","createDiagnosticCollection","has","createConnection","LogMessageNotification","ShowMessageNotification","ShowMessageRequest","actions","TelemetryEventNotification","ShowDocumentRequest","showDocument","asUri","external","success","env","openExternal","options","asRange","takeFocus","preserveFocus","showTextDocument","listen","initialize","_resolve","_reject","refreshTrace","initOption","rootPath","workspaceFolders","fsPath","_clientGetRootPath","initParams","processId","clientInfo","appName","version","locale","getLocale","rootUri","Uri","file","capabilities","computeClientCapabilities","func","fillInitializeParams","generateUuid","part","ProgressPart","workDoneToken","result","doInitialize","done","cancel","positionEncoding","PositionEncodingKind","UTF16","textDocumentSyncOptions","number","textDocumentSync","None","openClose","change","save","includeText","_capabilities","assign","resolvedTextDocumentSync","PublishDiagnosticsNotification","handleDiagnostics","RegistrationRequest","handleRegistrationRequest","UnregistrationRequest","handleUnregistrationRequest","ApplyWorkspaceEditRequest","handleApplyWorkspaceEdit","clear","InitializedNotification","hookFileEvents","hookConfigurationChanged","initializeFeatures","stop","retry","title","item","folders","workspace","folder","scheme","timeout","shutdown","mode","cleanUp","tp","c","RAL","timer","setTimeout","exit","race","end","finally","cleanUpChannel","disposables","splice","feature","Array","from","entries","map","entry","reverse","_idleInterval","notifyFileEvent","didChangeWatchedFile","trigger","DidChangeWatchedFilesNotification","changes","workSpaceMiddleware","catch","lock","getPendingDocumentChanges","document","asChangeTextDocumentParams","DidChangeTextDocumentNotification","notificationSent","triggerPendingChangeDelivery","key","tokenSource","triggerDiagnosticQueue","setImmediate","workDiagnosticQueue","next","CancellationTokenSource","asDiagnostics","converted","isCancellationRequested","setDiagnostics","language","handleConnectionError","closeHandler","handleConnectionClosed","transports","createMessageTransports","handlerResult","handled","onDidChangeConfiguration","config","getConfiguration","traceConfig","fromString","fileEvents","watchers","array","registerRaw","registerFeatures","features","registerFeature","DynamicFeature","registrationType","getFeature","request","hasDedicatedTextSynchronizationFeature","NotebookDocumentSyncRegistrationType","NotebookDocumentSyncFeature","handles","pendingFullTextDocumentChanges","ConfigurationFeature","DidOpenTextDocumentFeature","DidChangeTextDocumentFeature","onPendingChangeAdded","WillSaveFeature","WillSaveWaitUntilFeature","DidSaveTextDocumentFeature","DidCloseTextDocumentFeature","FileSystemWatcherFeature","CompletionItemFeature","HoverFeature","SignatureHelpFeature","DefinitionFeature","ReferencesFeature","DocumentHighlightFeature","DocumentSymbolFeature","WorkspaceSymbolFeature","CodeActionFeature","CodeLensFeature","DocumentFormattingFeature","DocumentRangeFormattingFeature","DocumentOnTypeFormattingFeature","RenameFeature","DocumentLinkFeature","ExecuteCommandFeature","SyncConfigurationFeature","TypeDefinitionFeature","ImplementationFeature","ColorProviderFeature","WorkspaceFoldersFeature","FoldingRangeFeature","DeclarationFeature","SelectionRangeFeature","ProgressFeature","CallHierarchyFeature","SemanticTokensFeature","LinkedEditingFeature","DidCreateFilesFeature","DidRenameFilesFeature","DidDeleteFilesFeature","WillCreateFilesFeature","WillRenameFilesFeature","WillDeleteFilesFeature","TypeHierarchyFeature","InlineValueFeature","InlayHintsFeature","DiagnosticFeature","registerProposedFeatures","createAll","ensure","applyEdit","workspaceEdit","documentChanges","resourceOperations","ResourceOperationKind","Create","Rename","Delete","failureHandling","FailureHandlingKind","TextOnlyTransactional","normalizesLineEndings","changeAnnotationSupport","groupsOnLabel","relatedInformation","versionSupport","tagSupport","valueSet","DiagnosticTag","Unnecessary","Deprecated","codeDescriptionSupport","dataSupport","windowCapabilities","showMessage","messageActionItem","additionalPropertiesSupport","support","generalCapabilities","staleRequestSupport","retryOnContentModified","RequestsToCancelOnContentModified","regularExpressions","engine","parser","positionEncodings","allowedTags","fillClientCapabilities","preInitialize","handleRegisterCapability","nextParams","doRegisterCapability","registration","registrations","registerOptions","register","err","handleUnregisterCapability","doUnregisterCapability","unregistration","unregisterations","unregister","edit","asWorkspaceEdit","openTextDocuments","textDocuments","forEach","versionMismatch","TextDocumentEdit","changeUri","applied","asPromise","handleFailedRequest","defaultValue","PendingResponseRejected","LSPErrorCodes","RequestCancelled","ServerCancelled","LSPCancellationError","CancellationError","ContentModified","CancellableResolveCalls","SemanticTokensRequest","SemanticTokensRangeRequest","SemanticTokensDeltaRequest","CompletionResolveRequest","CodeLensResolveRequest","CodeActionResolveRequest","InlayHintResolveRequest","DocumentLinkResolveRequest","WorkspaceSymbolResolveRequest","ConsoleLogger","console","input","output","logger","createProtocolConnection","onError","onClose","hasPendingResponse","tracer","sendNotificationOrTraceOptions","defaultTraceOptions","boolean","InitializeRequest","ShutdownRequest","ExitNotification","_client","InlineCompletionItemFeature"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/client.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProposedFeatures = exports.BaseLanguageClient = exports.MessageTransports = exports.SuspendMode = exports.State = exports.CloseAction = exports.ErrorAction = exports.RevealOutputChannelOn = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst c2p = require(\"./codeConverter\");\nconst p2c = require(\"./protocolConverter\");\nconst Is = require(\"./utils/is\");\nconst async_1 = require(\"./utils/async\");\nconst UUID = require(\"./utils/uuid\");\nconst progressPart_1 = require(\"./progressPart\");\nconst features_1 = require(\"./features\");\nconst diagnostic_1 = require(\"./diagnostic\");\nconst notebook_1 = require(\"./notebook\");\nconst configuration_1 = require(\"./configuration\");\nconst textSynchronization_1 = require(\"./textSynchronization\");\nconst completion_1 = require(\"./completion\");\nconst hover_1 = require(\"./hover\");\nconst definition_1 = require(\"./definition\");\nconst signatureHelp_1 = require(\"./signatureHelp\");\nconst documentHighlight_1 = require(\"./documentHighlight\");\nconst documentSymbol_1 = require(\"./documentSymbol\");\nconst workspaceSymbol_1 = require(\"./workspaceSymbol\");\nconst reference_1 = require(\"./reference\");\nconst codeAction_1 = require(\"./codeAction\");\nconst codeLens_1 = require(\"./codeLens\");\nconst formatting_1 = require(\"./formatting\");\nconst rename_1 = require(\"./rename\");\nconst documentLink_1 = require(\"./documentLink\");\nconst executeCommand_1 = require(\"./executeCommand\");\nconst fileSystemWatcher_1 = require(\"./fileSystemWatcher\");\nconst colorProvider_1 = require(\"./colorProvider\");\nconst implementation_1 = require(\"./implementation\");\nconst typeDefinition_1 = require(\"./typeDefinition\");\nconst workspaceFolder_1 = require(\"./workspaceFolder\");\nconst foldingRange_1 = require(\"./foldingRange\");\nconst declaration_1 = require(\"./declaration\");\nconst selectionRange_1 = require(\"./selectionRange\");\nconst progress_1 = require(\"./progress\");\nconst callHierarchy_1 = require(\"./callHierarchy\");\nconst semanticTokens_1 = require(\"./semanticTokens\");\nconst fileOperations_1 = require(\"./fileOperations\");\nconst linkedEditingRange_1 = require(\"./linkedEditingRange\");\nconst typeHierarchy_1 = require(\"./typeHierarchy\");\nconst inlineValue_1 = require(\"./inlineValue\");\nconst inlayHint_1 = require(\"./inlayHint\");\nconst inlineCompletion_1 = require(\"./inlineCompletion\");\n/**\n * Controls when the output channel is revealed.\n */\nvar RevealOutputChannelOn;\n(function (RevealOutputChannelOn) {\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Debug\"] = 0] = \"Debug\";\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Info\"] = 1] = \"Info\";\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Warn\"] = 2] = \"Warn\";\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Error\"] = 3] = \"Error\";\n    RevealOutputChannelOn[RevealOutputChannelOn[\"Never\"] = 4] = \"Never\";\n})(RevealOutputChannelOn || (exports.RevealOutputChannelOn = RevealOutputChannelOn = {}));\n/**\n * An action to be performed when the connection is producing errors.\n */\nvar ErrorAction;\n(function (ErrorAction) {\n    /**\n     * Continue running the server.\n     */\n    ErrorAction[ErrorAction[\"Continue\"] = 1] = \"Continue\";\n    /**\n     * Shutdown the server.\n     */\n    ErrorAction[ErrorAction[\"Shutdown\"] = 2] = \"Shutdown\";\n})(ErrorAction || (exports.ErrorAction = ErrorAction = {}));\n/**\n * An action to be performed when the connection to a server got closed.\n */\nvar CloseAction;\n(function (CloseAction) {\n    /**\n     * Don't restart the server. The connection stays closed.\n     */\n    CloseAction[CloseAction[\"DoNotRestart\"] = 1] = \"DoNotRestart\";\n    /**\n     * Restart the server.\n     */\n    CloseAction[CloseAction[\"Restart\"] = 2] = \"Restart\";\n})(CloseAction || (exports.CloseAction = CloseAction = {}));\n/**\n * Signals in which state the language client is in.\n */\nvar State;\n(function (State) {\n    /**\n     * The client is stopped or got never started.\n     */\n    State[State[\"Stopped\"] = 1] = \"Stopped\";\n    /**\n     * The client is starting but not ready yet.\n     */\n    State[State[\"Starting\"] = 3] = \"Starting\";\n    /**\n     * The client is running and ready.\n     */\n    State[State[\"Running\"] = 2] = \"Running\";\n})(State || (exports.State = State = {}));\nvar SuspendMode;\n(function (SuspendMode) {\n    /**\n     * Don't allow suspend mode.\n     */\n    SuspendMode[\"off\"] = \"off\";\n    /**\n     * Support suspend mode even if not all\n     * registered providers have a corresponding\n     * activation listener.\n     */\n    SuspendMode[\"on\"] = \"on\";\n})(SuspendMode || (exports.SuspendMode = SuspendMode = {}));\nvar ResolvedClientOptions;\n(function (ResolvedClientOptions) {\n    function sanitizeIsTrusted(isTrusted) {\n        if (isTrusted === undefined || isTrusted === null) {\n            return false;\n        }\n        if ((typeof isTrusted === 'boolean') || (typeof isTrusted === 'object' && isTrusted !== null && Is.stringArray(isTrusted.enabledCommands))) {\n            return isTrusted;\n        }\n        return false;\n    }\n    ResolvedClientOptions.sanitizeIsTrusted = sanitizeIsTrusted;\n})(ResolvedClientOptions || (ResolvedClientOptions = {}));\nclass DefaultErrorHandler {\n    constructor(client, maxRestartCount) {\n        this.client = client;\n        this.maxRestartCount = maxRestartCount;\n        this.restarts = [];\n    }\n    error(_error, _message, count) {\n        if (count && count <= 3) {\n            return { action: ErrorAction.Continue };\n        }\n        return { action: ErrorAction.Shutdown };\n    }\n    closed() {\n        this.restarts.push(Date.now());\n        if (this.restarts.length <= this.maxRestartCount) {\n            return { action: CloseAction.Restart };\n        }\n        else {\n            let diff = this.restarts[this.restarts.length - 1] - this.restarts[0];\n            if (diff <= 3 * 60 * 1000) {\n                return { action: CloseAction.DoNotRestart, message: `The ${this.client.name} server crashed ${this.maxRestartCount + 1} times in the last 3 minutes. The server will not be restarted. See the output for more information.` };\n            }\n            else {\n                this.restarts.shift();\n                return { action: CloseAction.Restart };\n            }\n        }\n    }\n}\nvar ClientState;\n(function (ClientState) {\n    ClientState[\"Initial\"] = \"initial\";\n    ClientState[\"Starting\"] = \"starting\";\n    ClientState[\"StartFailed\"] = \"startFailed\";\n    ClientState[\"Running\"] = \"running\";\n    ClientState[\"Stopping\"] = \"stopping\";\n    ClientState[\"Stopped\"] = \"stopped\";\n})(ClientState || (ClientState = {}));\nvar MessageTransports;\n(function (MessageTransports) {\n    function is(value) {\n        let candidate = value;\n        return candidate && vscode_languageserver_protocol_1.MessageReader.is(value.reader) && vscode_languageserver_protocol_1.MessageWriter.is(value.writer);\n    }\n    MessageTransports.is = is;\n})(MessageTransports || (exports.MessageTransports = MessageTransports = {}));\nclass BaseLanguageClient {\n    constructor(id, name, clientOptions) {\n        this._traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\n        this._diagnosticQueue = new Map();\n        this._diagnosticQueueState = { state: 'idle' };\n        this._features = [];\n        this._dynamicFeatures = new Map();\n        this.workspaceEditLock = new async_1.Semaphore(1);\n        this._id = id;\n        this._name = name;\n        clientOptions = clientOptions || {};\n        const markdown = { isTrusted: false, supportHtml: false };\n        if (clientOptions.markdown !== undefined) {\n            markdown.isTrusted = ResolvedClientOptions.sanitizeIsTrusted(clientOptions.markdown.isTrusted);\n            markdown.supportHtml = clientOptions.markdown.supportHtml === true;\n        }\n        // const defaultInterval = (clientOptions as TestOptions).$testMode ? 50 : 60000;\n        this._clientOptions = {\n            documentSelector: clientOptions.documentSelector ?? [],\n            synchronize: clientOptions.synchronize ?? {},\n            diagnosticCollectionName: clientOptions.diagnosticCollectionName,\n            outputChannelName: clientOptions.outputChannelName ?? this._name,\n            revealOutputChannelOn: clientOptions.revealOutputChannelOn ?? RevealOutputChannelOn.Error,\n            stdioEncoding: clientOptions.stdioEncoding ?? 'utf8',\n            initializationOptions: clientOptions.initializationOptions,\n            initializationFailedHandler: clientOptions.initializationFailedHandler,\n            progressOnInitialization: !!clientOptions.progressOnInitialization,\n            errorHandler: clientOptions.errorHandler ?? this.createDefaultErrorHandler(clientOptions.connectionOptions?.maxRestartCount),\n            middleware: clientOptions.middleware ?? {},\n            uriConverters: clientOptions.uriConverters,\n            workspaceFolder: clientOptions.workspaceFolder,\n            connectionOptions: clientOptions.connectionOptions,\n            markdown,\n            // suspend: {\n            // \tmode: clientOptions.suspend?.mode ?? SuspendMode.off,\n            // \tcallback: clientOptions.suspend?.callback ?? (() => Promise.resolve(true)),\n            // \tinterval: clientOptions.suspend?.interval ? Math.max(clientOptions.suspend.interval, defaultInterval) : defaultInterval\n            // },\n            diagnosticPullOptions: clientOptions.diagnosticPullOptions ?? { onChange: true, onSave: false },\n            notebookDocumentOptions: clientOptions.notebookDocumentOptions ?? {}\n        };\n        this._clientOptions.synchronize = this._clientOptions.synchronize || {};\n        this._state = ClientState.Initial;\n        this._ignoredRegistrations = new Set();\n        this._listeners = [];\n        this._notificationHandlers = new Map();\n        this._pendingNotificationHandlers = new Map();\n        this._notificationDisposables = new Map();\n        this._requestHandlers = new Map();\n        this._pendingRequestHandlers = new Map();\n        this._requestDisposables = new Map();\n        this._progressHandlers = new Map();\n        this._pendingProgressHandlers = new Map();\n        this._progressDisposables = new Map();\n        this._connection = undefined;\n        // this._idleStart = undefined;\n        this._initializeResult = undefined;\n        if (clientOptions.outputChannel) {\n            this._outputChannel = clientOptions.outputChannel;\n            this._disposeOutputChannel = false;\n        }\n        else {\n            this._outputChannel = undefined;\n            this._disposeOutputChannel = true;\n        }\n        this._traceOutputChannel = clientOptions.traceOutputChannel;\n        this._diagnostics = undefined;\n        this._pendingOpenNotifications = new Set();\n        this._pendingChangeSemaphore = new async_1.Semaphore(1);\n        this._pendingChangeDelayer = new async_1.Delayer(250);\n        this._fileEvents = [];\n        this._fileEventDelayer = new async_1.Delayer(250);\n        this._onStop = undefined;\n        this._telemetryEmitter = new vscode_languageserver_protocol_1.Emitter();\n        this._stateChangeEmitter = new vscode_languageserver_protocol_1.Emitter();\n        this._trace = vscode_languageserver_protocol_1.Trace.Off;\n        this._tracer = {\n            log: (messageOrDataObject, data) => {\n                if (Is.string(messageOrDataObject)) {\n                    this.logTrace(messageOrDataObject, data);\n                }\n                else {\n                    this.logObjectTrace(messageOrDataObject);\n                }\n            },\n        };\n        this._c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);\n        this._p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined, this._clientOptions.markdown.isTrusted, this._clientOptions.markdown.supportHtml);\n        this._syncedDocuments = new Map();\n        this.registerBuiltinFeatures();\n    }\n    get name() {\n        return this._name;\n    }\n    get middleware() {\n        return this._clientOptions.middleware ?? Object.create(null);\n    }\n    get clientOptions() {\n        return this._clientOptions;\n    }\n    get protocol2CodeConverter() {\n        return this._p2c;\n    }\n    get code2ProtocolConverter() {\n        return this._c2p;\n    }\n    get onTelemetry() {\n        return this._telemetryEmitter.event;\n    }\n    get onDidChangeState() {\n        return this._stateChangeEmitter.event;\n    }\n    get outputChannel() {\n        if (!this._outputChannel) {\n            this._outputChannel = vscode_1.window.createOutputChannel(this._clientOptions.outputChannelName ? this._clientOptions.outputChannelName : this._name);\n        }\n        return this._outputChannel;\n    }\n    get traceOutputChannel() {\n        if (this._traceOutputChannel) {\n            return this._traceOutputChannel;\n        }\n        return this.outputChannel;\n    }\n    get diagnostics() {\n        return this._diagnostics;\n    }\n    get state() {\n        return this.getPublicState();\n    }\n    get $state() {\n        return this._state;\n    }\n    set $state(value) {\n        let oldState = this.getPublicState();\n        this._state = value;\n        let newState = this.getPublicState();\n        if (newState !== oldState) {\n            this._stateChangeEmitter.fire({ oldState, newState });\n        }\n    }\n    getPublicState() {\n        switch (this.$state) {\n            case ClientState.Starting:\n                return State.Starting;\n            case ClientState.Running:\n                return State.Running;\n            default:\n                return State.Stopped;\n        }\n    }\n    get initializeResult() {\n        return this._initializeResult;\n    }\n    async sendRequest(type, ...params) {\n        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n        }\n        // Ensure we have a connection before we force the document sync.\n        const connection = await this.$start();\n        // If any document is synced in full mode make sure we flush any pending\n        // full document syncs.\n        if (this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {\n            await this.sendPendingFullTextDocumentChanges(connection);\n        }\n        const _sendRequest = this._clientOptions.middleware?.sendRequest;\n        if (_sendRequest !== undefined) {\n            let param = undefined;\n            let token = undefined;\n            // Separate cancellation tokens from other parameters for a better client interface\n            if (params.length === 1) {\n                // CancellationToken is an interface, so we need to check if the first param complies to it\n                if (vscode_languageserver_protocol_1.CancellationToken.is(params[0])) {\n                    token = params[0];\n                }\n                else {\n                    param = params[0];\n                }\n            }\n            else if (params.length === 2) {\n                param = params[0];\n                token = params[1];\n            }\n            // Return the general middleware invocation defining `next` as a utility function that reorganizes parameters to\n            // pass them to the original sendRequest function.\n            return _sendRequest(type, param, token, (type, param, token) => {\n                const params = [];\n                // Add the parameters if there are any\n                if (param !== undefined) {\n                    params.push(param);\n                }\n                // Add the cancellation token if there is one\n                if (token !== undefined) {\n                    params.push(token);\n                }\n                return connection.sendRequest(type, ...params);\n            });\n        }\n        else {\n            return connection.sendRequest(type, ...params);\n        }\n    }\n    onRequest(type, handler) {\n        const method = typeof type === 'string' ? type : type.method;\n        this._requestHandlers.set(method, handler);\n        const connection = this.activeConnection();\n        let disposable;\n        if (connection !== undefined) {\n            this._requestDisposables.set(method, connection.onRequest(type, handler));\n            disposable = {\n                dispose: () => {\n                    const disposable = this._requestDisposables.get(method);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._requestDisposables.delete(method);\n                    }\n                }\n            };\n        }\n        else {\n            this._pendingRequestHandlers.set(method, handler);\n            disposable = {\n                dispose: () => {\n                    this._pendingRequestHandlers.delete(method);\n                    const disposable = this._requestDisposables.get(method);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._requestDisposables.delete(method);\n                    }\n                }\n            };\n        }\n        return {\n            dispose: () => {\n                this._requestHandlers.delete(method);\n                disposable.dispose();\n            }\n        };\n    }\n    async sendNotification(type, params) {\n        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n        }\n        const needsPendingFullTextDocumentSync = this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;\n        let openNotification;\n        if (needsPendingFullTextDocumentSync && typeof type !== 'string' && type.method === vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.method) {\n            openNotification = params?.textDocument.uri;\n            this._pendingOpenNotifications.add(openNotification);\n        }\n        // Ensure we have a connection before we force the document sync.\n        const connection = await this.$start();\n        // If any document is synced in full mode make sure we flush any pending\n        // full document syncs.\n        if (needsPendingFullTextDocumentSync) {\n            await this.sendPendingFullTextDocumentChanges(connection);\n        }\n        // We need to remove the pending open notification before we actually\n        // send the notification over the connection. Otherwise there could be\n        // a request coming in that although the open notification got already put\n        // onto the wire will ignore pending document changes.\n        //\n        // Since the code path of connection.sendNotification is actually sync\n        // until the message is handed of to the writer and the writer as a semaphore\n        // lock with a capacity of 1 no additional async scheduling can happen until\n        // the message is actually handed of.\n        if (openNotification !== undefined) {\n            this._pendingOpenNotifications.delete(openNotification);\n        }\n        const _sendNotification = this._clientOptions.middleware?.sendNotification;\n        return _sendNotification\n            ? _sendNotification(type, connection.sendNotification.bind(connection), params)\n            : connection.sendNotification(type, params);\n    }\n    onNotification(type, handler) {\n        const method = typeof type === 'string' ? type : type.method;\n        this._notificationHandlers.set(method, handler);\n        const connection = this.activeConnection();\n        let disposable;\n        if (connection !== undefined) {\n            this._notificationDisposables.set(method, connection.onNotification(type, handler));\n            disposable = {\n                dispose: () => {\n                    const disposable = this._notificationDisposables.get(method);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._notificationDisposables.delete(method);\n                    }\n                }\n            };\n        }\n        else {\n            this._pendingNotificationHandlers.set(method, handler);\n            disposable = {\n                dispose: () => {\n                    this._pendingNotificationHandlers.delete(method);\n                    const disposable = this._notificationDisposables.get(method);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._notificationDisposables.delete(method);\n                    }\n                }\n            };\n        }\n        return {\n            dispose: () => {\n                this._notificationHandlers.delete(method);\n                disposable.dispose();\n            }\n        };\n    }\n    async sendProgress(type, token, value) {\n        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {\n            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));\n        }\n        try {\n            // Ensure we have a connection before we force the document sync.\n            const connection = await this.$start();\n            return connection.sendProgress(type, token, value);\n        }\n        catch (error) {\n            this.error(`Sending progress for token ${token} failed.`, error);\n            throw error;\n        }\n    }\n    onProgress(type, token, handler) {\n        this._progressHandlers.set(token, { type, handler });\n        const connection = this.activeConnection();\n        let disposable;\n        const handleWorkDoneProgress = this._clientOptions.middleware?.handleWorkDoneProgress;\n        const realHandler = vscode_languageserver_protocol_1.WorkDoneProgress.is(type) && handleWorkDoneProgress !== undefined\n            ? (params) => {\n                handleWorkDoneProgress(token, params, () => handler(params));\n            }\n            : handler;\n        if (connection !== undefined) {\n            this._progressDisposables.set(token, connection.onProgress(type, token, realHandler));\n            disposable = {\n                dispose: () => {\n                    const disposable = this._progressDisposables.get(token);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._progressDisposables.delete(token);\n                    }\n                }\n            };\n        }\n        else {\n            this._pendingProgressHandlers.set(token, { type, handler });\n            disposable = {\n                dispose: () => {\n                    this._pendingProgressHandlers.delete(token);\n                    const disposable = this._progressDisposables.get(token);\n                    if (disposable !== undefined) {\n                        disposable.dispose();\n                        this._progressDisposables.delete(token);\n                    }\n                }\n            };\n        }\n        return {\n            dispose: () => {\n                this._progressHandlers.delete(token);\n                disposable.dispose();\n            }\n        };\n    }\n    createDefaultErrorHandler(maxRestartCount) {\n        if (maxRestartCount !== undefined && maxRestartCount < 0) {\n            throw new Error(`Invalid maxRestartCount: ${maxRestartCount}`);\n        }\n        return new DefaultErrorHandler(this, maxRestartCount ?? 4);\n    }\n    async setTrace(value) {\n        this._trace = value;\n        const connection = this.activeConnection();\n        if (connection !== undefined) {\n            await connection.trace(this._trace, this._tracer, {\n                sendNotification: false,\n                traceFormat: this._traceFormat\n            });\n        }\n    }\n    data2String(data) {\n        if (data instanceof vscode_languageserver_protocol_1.ResponseError) {\n            const responseError = data;\n            return `  Message: ${responseError.message}\\n  Code: ${responseError.code} ${responseError.data ? '\\n' + responseError.data.toString() : ''}`;\n        }\n        if (data instanceof Error) {\n            if (Is.string(data.stack)) {\n                return data.stack;\n            }\n            return data.message;\n        }\n        if (Is.string(data)) {\n            return data;\n        }\n        return data.toString();\n    }\n    debug(message, data, showNotification = true) {\n        this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Debug, RevealOutputChannelOn.Debug, 'Debug', message, data, showNotification);\n    }\n    info(message, data, showNotification = true) {\n        this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Info, RevealOutputChannelOn.Info, 'Info', message, data, showNotification);\n    }\n    warn(message, data, showNotification = true) {\n        this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Warning, RevealOutputChannelOn.Warn, 'Warn', message, data, showNotification);\n    }\n    error(message, data, showNotification = true) {\n        this.logOutputMessage(vscode_languageserver_protocol_1.MessageType.Error, RevealOutputChannelOn.Error, 'Error', message, data, showNotification);\n    }\n    logOutputMessage(type, reveal, name, message, data, showNotification) {\n        this.outputChannel.appendLine(`[${name.padEnd(5)} - ${(new Date().toLocaleTimeString())}] ${message}`);\n        if (data !== null && data !== undefined) {\n            this.outputChannel.appendLine(this.data2String(data));\n        }\n        if (showNotification === 'force' || (showNotification && this._clientOptions.revealOutputChannelOn <= reveal)) {\n            this.showNotificationMessage(type, message);\n        }\n    }\n    showNotificationMessage(type, message) {\n        message = message ?? 'A request has failed. See the output for more information.';\n        const messageFunc = type === vscode_languageserver_protocol_1.MessageType.Error\n            ? vscode_1.window.showErrorMessage\n            : type === vscode_languageserver_protocol_1.MessageType.Warning\n                ? vscode_1.window.showWarningMessage\n                : vscode_1.window.showInformationMessage;\n        void messageFunc(message, 'Go to output').then((selection) => {\n            if (selection !== undefined) {\n                this.outputChannel.show(true);\n            }\n        });\n    }\n    logTrace(message, data) {\n        this.traceOutputChannel.appendLine(`[Trace - ${(new Date().toLocaleTimeString())}] ${message}`);\n        if (data) {\n            this.traceOutputChannel.appendLine(this.data2String(data));\n        }\n    }\n    logObjectTrace(data) {\n        if (data.isLSPMessage && data.type) {\n            this.traceOutputChannel.append(`[LSP   - ${(new Date().toLocaleTimeString())}] `);\n        }\n        else {\n            this.traceOutputChannel.append(`[Trace - ${(new Date().toLocaleTimeString())}] `);\n        }\n        if (data) {\n            this.traceOutputChannel.appendLine(`${JSON.stringify(data)}`);\n        }\n    }\n    needsStart() {\n        return this.$state === ClientState.Initial || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped;\n    }\n    needsStop() {\n        return this.$state === ClientState.Starting || this.$state === ClientState.Running;\n    }\n    activeConnection() {\n        return this.$state === ClientState.Running && this._connection !== undefined ? this._connection : undefined;\n    }\n    isRunning() {\n        return this.$state === ClientState.Running;\n    }\n    async start() {\n        if (this._disposed === 'disposing' || this._disposed === 'disposed') {\n            throw new Error(`Client got disposed and can't be restarted.`);\n        }\n        if (this.$state === ClientState.Stopping) {\n            throw new Error(`Client is currently stopping. Can only restart a full stopped client`);\n        }\n        // We are already running or are in the process of getting up\n        // to speed.\n        if (this._onStart !== undefined) {\n            return this._onStart;\n        }\n        const [promise, resolve, reject] = this.createOnStartPromise();\n        this._onStart = promise;\n        // If we restart then the diagnostics collection is reused.\n        if (this._diagnostics === undefined) {\n            this._diagnostics = this._clientOptions.diagnosticCollectionName\n                ? vscode_1.languages.createDiagnosticCollection(this._clientOptions.diagnosticCollectionName)\n                : vscode_1.languages.createDiagnosticCollection();\n        }\n        // When we start make all buffer handlers pending so that they\n        // get added.\n        for (const [method, handler] of this._notificationHandlers) {\n            if (!this._pendingNotificationHandlers.has(method)) {\n                this._pendingNotificationHandlers.set(method, handler);\n            }\n        }\n        for (const [method, handler] of this._requestHandlers) {\n            if (!this._pendingRequestHandlers.has(method)) {\n                this._pendingRequestHandlers.set(method, handler);\n            }\n        }\n        for (const [token, data] of this._progressHandlers) {\n            if (!this._pendingProgressHandlers.has(token)) {\n                this._pendingProgressHandlers.set(token, data);\n            }\n        }\n        this.$state = ClientState.Starting;\n        try {\n            const connection = await this.createConnection();\n            connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, (message) => {\n                switch (message.type) {\n                    case vscode_languageserver_protocol_1.MessageType.Error:\n                        this.error(message.message, undefined, false);\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\n                        this.warn(message.message, undefined, false);\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Info:\n                        this.info(message.message, undefined, false);\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Debug:\n                        this.debug(message.message, undefined, false);\n                        break;\n                    default:\n                        this.outputChannel.appendLine(message.message);\n                }\n            });\n            connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, (message) => {\n                switch (message.type) {\n                    case vscode_languageserver_protocol_1.MessageType.Error:\n                        void vscode_1.window.showErrorMessage(message.message);\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\n                        void vscode_1.window.showWarningMessage(message.message);\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Info:\n                        void vscode_1.window.showInformationMessage(message.message);\n                        break;\n                    default:\n                        void vscode_1.window.showInformationMessage(message.message);\n                }\n            });\n            connection.onRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, (params) => {\n                let messageFunc;\n                switch (params.type) {\n                    case vscode_languageserver_protocol_1.MessageType.Error:\n                        messageFunc = vscode_1.window.showErrorMessage;\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Warning:\n                        messageFunc = vscode_1.window.showWarningMessage;\n                        break;\n                    case vscode_languageserver_protocol_1.MessageType.Info:\n                        messageFunc = vscode_1.window.showInformationMessage;\n                        break;\n                    default:\n                        messageFunc = vscode_1.window.showInformationMessage;\n                }\n                let actions = params.actions || [];\n                return messageFunc(params.message, ...actions);\n            });\n            connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, (data) => {\n                this._telemetryEmitter.fire(data);\n            });\n            connection.onRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, async (params) => {\n                const showDocument = async (params) => {\n                    const uri = this.protocol2CodeConverter.asUri(params.uri);\n                    try {\n                        if (params.external === true) {\n                            const success = await vscode_1.env.openExternal(uri);\n                            return { success };\n                        }\n                        else {\n                            const options = {};\n                            if (params.selection !== undefined) {\n                                options.selection = this.protocol2CodeConverter.asRange(params.selection);\n                            }\n                            if (params.takeFocus === undefined || params.takeFocus === false) {\n                                options.preserveFocus = true;\n                            }\n                            else if (params.takeFocus === true) {\n                                options.preserveFocus = false;\n                            }\n                            await vscode_1.window.showTextDocument(uri, options);\n                            return { success: true };\n                        }\n                    }\n                    catch (error) {\n                        return { success: false };\n                    }\n                };\n                const middleware = this._clientOptions.middleware.window?.showDocument;\n                if (middleware !== undefined) {\n                    return middleware(params, showDocument);\n                }\n                else {\n                    return showDocument(params);\n                }\n            });\n            connection.listen();\n            await this.initialize(connection);\n            resolve();\n        }\n        catch (error) {\n            this.$state = ClientState.StartFailed;\n            this.error(`${this._name} client: couldn't create connection to server.`, error, 'force');\n            reject(error);\n        }\n        return this._onStart;\n    }\n    createOnStartPromise() {\n        let resolve;\n        let reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        return [promise, resolve, reject];\n    }\n    async initialize(connection) {\n        this.refreshTrace(connection, false);\n        const initOption = this._clientOptions.initializationOptions;\n        // If the client is locked to a workspace folder use it. In this case the workspace folder\n        // feature is not registered and we need to initialize the value here.\n        const [rootPath, workspaceFolders] = this._clientOptions.workspaceFolder !== undefined\n            ? [this._clientOptions.workspaceFolder.uri.fsPath, [{ uri: this._c2p.asUri(this._clientOptions.workspaceFolder.uri), name: this._clientOptions.workspaceFolder.name }]]\n            : [this._clientGetRootPath(), null];\n        const initParams = {\n            processId: null,\n            clientInfo: {\n                name: vscode_1.env.appName,\n                version: vscode_1.version\n            },\n            locale: this.getLocale(),\n            rootPath: rootPath ? rootPath : null,\n            rootUri: rootPath ? this._c2p.asUri(vscode_1.Uri.file(rootPath)) : null,\n            capabilities: this.computeClientCapabilities(),\n            initializationOptions: Is.func(initOption) ? initOption() : initOption,\n            trace: vscode_languageserver_protocol_1.Trace.toString(this._trace),\n            workspaceFolders: workspaceFolders\n        };\n        this.fillInitializeParams(initParams);\n        if (this._clientOptions.progressOnInitialization) {\n            const token = UUID.generateUuid();\n            const part = new progressPart_1.ProgressPart(connection, token);\n            initParams.workDoneToken = token;\n            try {\n                const result = await this.doInitialize(connection, initParams);\n                part.done();\n                return result;\n            }\n            catch (error) {\n                part.cancel();\n                throw error;\n            }\n        }\n        else {\n            return this.doInitialize(connection, initParams);\n        }\n    }\n    async doInitialize(connection, initParams) {\n        try {\n            const result = await connection.initialize(initParams);\n            if (result.capabilities.positionEncoding !== undefined && result.capabilities.positionEncoding !== vscode_languageserver_protocol_1.PositionEncodingKind.UTF16) {\n                throw new Error(`Unsupported position encoding (${result.capabilities.positionEncoding}) received from server ${this.name}`);\n            }\n            this._initializeResult = result;\n            this.$state = ClientState.Running;\n            let textDocumentSyncOptions = undefined;\n            if (Is.number(result.capabilities.textDocumentSync)) {\n                if (result.capabilities.textDocumentSync === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {\n                    textDocumentSyncOptions = {\n                        openClose: false,\n                        change: vscode_languageserver_protocol_1.TextDocumentSyncKind.None,\n                        save: undefined\n                    };\n                }\n                else {\n                    textDocumentSyncOptions = {\n                        openClose: true,\n                        change: result.capabilities.textDocumentSync,\n                        save: {\n                            includeText: false\n                        }\n                    };\n                }\n            }\n            else if (result.capabilities.textDocumentSync !== undefined && result.capabilities.textDocumentSync !== null) {\n                textDocumentSyncOptions = result.capabilities.textDocumentSync;\n            }\n            this._capabilities = Object.assign({}, result.capabilities, { resolvedTextDocumentSync: textDocumentSyncOptions });\n            connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params => this.handleDiagnostics(params));\n            connection.onRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params => this.handleRegistrationRequest(params));\n            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\n            connection.onRequest('client/registerFeature', params => this.handleRegistrationRequest(params));\n            connection.onRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params => this.handleUnregistrationRequest(params));\n            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199\n            connection.onRequest('client/unregisterFeature', params => this.handleUnregistrationRequest(params));\n            connection.onRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params => this.handleApplyWorkspaceEdit(params));\n            // Add pending notification, request and progress handlers.\n            for (const [method, handler] of this._pendingNotificationHandlers) {\n                this._notificationDisposables.set(method, connection.onNotification(method, handler));\n            }\n            this._pendingNotificationHandlers.clear();\n            for (const [method, handler] of this._pendingRequestHandlers) {\n                this._requestDisposables.set(method, connection.onRequest(method, handler));\n            }\n            this._pendingRequestHandlers.clear();\n            for (const [token, data] of this._pendingProgressHandlers) {\n                this._progressDisposables.set(token, connection.onProgress(data.type, token, data.handler));\n            }\n            this._pendingProgressHandlers.clear();\n            // if (this._clientOptions.suspend.mode !== SuspendMode.off) {\n            // \tthis._idleInterval =  RAL().timer.setInterval(() => this.checkSuspend(), this._clientOptions.suspend.interval);\n            // }\n            await connection.sendNotification(vscode_languageserver_protocol_1.InitializedNotification.type, {});\n            this.hookFileEvents(connection);\n            this.hookConfigurationChanged(connection);\n            this.initializeFeatures(connection);\n            return result;\n        }\n        catch (error) {\n            if (this._clientOptions.initializationFailedHandler) {\n                if (this._clientOptions.initializationFailedHandler(error)) {\n                    void this.initialize(connection);\n                }\n                else {\n                    void this.stop();\n                }\n            }\n            else if (error instanceof vscode_languageserver_protocol_1.ResponseError && error.data && error.data.retry) {\n                void vscode_1.window.showErrorMessage(error.message, { title: 'Retry', id: 'retry' }).then(item => {\n                    if (item && item.id === 'retry') {\n                        void this.initialize(connection);\n                    }\n                    else {\n                        void this.stop();\n                    }\n                });\n            }\n            else {\n                if (error && error.message) {\n                    void vscode_1.window.showErrorMessage(error.message);\n                }\n                this.error('Server initialization failed.', error);\n                void this.stop();\n            }\n            throw error;\n        }\n    }\n    _clientGetRootPath() {\n        let folders = vscode_1.workspace.workspaceFolders;\n        if (!folders || folders.length === 0) {\n            return undefined;\n        }\n        let folder = folders[0];\n        if (folder.uri.scheme === 'file') {\n            return folder.uri.fsPath;\n        }\n        return undefined;\n    }\n    stop(timeout = 2000) {\n        // Wait 2 seconds on stop\n        return this.shutdown('stop', timeout);\n    }\n    dispose(timeout = 2000) {\n        try {\n            this._disposed = 'disposing';\n            return this.stop(timeout);\n        }\n        finally {\n            this._disposed = 'disposed';\n        }\n    }\n    async shutdown(mode, timeout) {\n        // If the client is stopped or in its initial state return.\n        if (this.$state === ClientState.Stopped || this.$state === ClientState.Initial) {\n            return;\n        }\n        // If we are stopping the client and have a stop promise return it.\n        if (this.$state === ClientState.Stopping) {\n            if (this._onStop !== undefined) {\n                return this._onStop;\n            }\n            else {\n                throw new Error(`Client is stopping but no stop promise available.`);\n            }\n        }\n        const connection = this.activeConnection();\n        // We can't stop a client that is not running (e.g. has no connection). Especially not\n        // on that us starting since it can't be correctly synchronized.\n        if (connection === undefined || this.$state !== ClientState.Running) {\n            throw new Error(`Client is not running and can't be stopped. It's current state is: ${this.$state}`);\n        }\n        this._initializeResult = undefined;\n        this.$state = ClientState.Stopping;\n        this.cleanUp(mode);\n        const tp = new Promise(c => { (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(c, timeout); });\n        const shutdown = (async (connection) => {\n            await connection.shutdown();\n            await connection.exit();\n            return connection;\n        })(connection);\n        return this._onStop = Promise.race([tp, shutdown]).then((connection) => {\n            // The connection won the race with the timeout.\n            if (connection !== undefined) {\n                connection.end();\n                connection.dispose();\n            }\n            else {\n                this.error(`Stopping server timed out`, undefined, false);\n                throw new Error(`Stopping the server timed out`);\n            }\n        }, (error) => {\n            this.error(`Stopping server failed`, error, false);\n            throw error;\n        }).finally(() => {\n            this.$state = ClientState.Stopped;\n            mode === 'stop' && this.cleanUpChannel();\n            this._onStart = undefined;\n            this._onStop = undefined;\n            this._connection = undefined;\n            this._ignoredRegistrations.clear();\n        });\n    }\n    cleanUp(mode) {\n        // purge outstanding file events.\n        this._fileEvents = [];\n        this._fileEventDelayer.cancel();\n        const disposables = this._listeners.splice(0, this._listeners.length);\n        for (const disposable of disposables) {\n            disposable.dispose();\n        }\n        if (this._syncedDocuments) {\n            this._syncedDocuments.clear();\n        }\n        // Clear features in reverse order;\n        for (const feature of Array.from(this._features.entries()).map(entry => entry[1]).reverse()) {\n            feature.clear();\n        }\n        if (mode === 'stop' && this._diagnostics !== undefined) {\n            this._diagnostics.dispose();\n            this._diagnostics = undefined;\n        }\n        if (this._idleInterval !== undefined) {\n            this._idleInterval.dispose();\n            this._idleInterval = undefined;\n        }\n        // this._idleStart = undefined;\n    }\n    cleanUpChannel() {\n        if (this._outputChannel !== undefined && this._disposeOutputChannel) {\n            this._outputChannel.dispose();\n            this._outputChannel = undefined;\n        }\n    }\n    notifyFileEvent(event) {\n        const client = this;\n        async function didChangeWatchedFile(event) {\n            client._fileEvents.push(event);\n            return client._fileEventDelayer.trigger(async () => {\n                await client.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, { changes: client._fileEvents });\n                client._fileEvents = [];\n            });\n        }\n        const workSpaceMiddleware = this.clientOptions.middleware?.workspace;\n        (workSpaceMiddleware?.didChangeWatchedFile ? workSpaceMiddleware.didChangeWatchedFile(event, didChangeWatchedFile) : didChangeWatchedFile(event)).catch((error) => {\n            client.error(`Notify file events failed.`, error);\n        });\n    }\n    async sendPendingFullTextDocumentChanges(connection) {\n        return this._pendingChangeSemaphore.lock(async () => {\n            try {\n                const changes = this._didChangeTextDocumentFeature.getPendingDocumentChanges(this._pendingOpenNotifications);\n                if (changes.length === 0) {\n                    return;\n                }\n                for (const document of changes) {\n                    const params = this.code2ProtocolConverter.asChangeTextDocumentParams(document);\n                    // We await the send and not the delivery since it is more or less the same for\n                    // notifications.\n                    await connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n                    this._didChangeTextDocumentFeature.notificationSent(document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);\n                }\n            }\n            catch (error) {\n                this.error(`Sending pending changes failed`, error, false);\n                throw error;\n            }\n        });\n    }\n    triggerPendingChangeDelivery() {\n        this._pendingChangeDelayer.trigger(async () => {\n            const connection = this.activeConnection();\n            if (connection === undefined) {\n                this.triggerPendingChangeDelivery();\n                return;\n            }\n            await this.sendPendingFullTextDocumentChanges(connection);\n        }).catch((error) => this.error(`Delivering pending changes failed`, error, false));\n    }\n    handleDiagnostics(params) {\n        if (!this._diagnostics) {\n            return;\n        }\n        const key = params.uri;\n        if (this._diagnosticQueueState.state === 'busy' && this._diagnosticQueueState.document === key) {\n            // Cancel the active run;\n            this._diagnosticQueueState.tokenSource.cancel();\n        }\n        this._diagnosticQueue.set(params.uri, params.diagnostics);\n        this.triggerDiagnosticQueue();\n    }\n    triggerDiagnosticQueue() {\n        (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => { this.workDiagnosticQueue(); });\n    }\n    workDiagnosticQueue() {\n        if (this._diagnosticQueueState.state === 'busy') {\n            return;\n        }\n        const next = this._diagnosticQueue.entries().next();\n        if (next.done === true) {\n            // Nothing in the queue\n            return;\n        }\n        const [document, diagnostics] = next.value;\n        this._diagnosticQueue.delete(document);\n        const tokenSource = new vscode_1.CancellationTokenSource();\n        this._diagnosticQueueState = { state: 'busy', document: document, tokenSource };\n        this._p2c.asDiagnostics(diagnostics, tokenSource.token).then((converted) => {\n            if (!tokenSource.token.isCancellationRequested) {\n                const uri = this._p2c.asUri(document);\n                const middleware = this.clientOptions.middleware;\n                if (middleware.handleDiagnostics) {\n                    middleware.handleDiagnostics(uri, converted, (uri, diagnostics) => this.setDiagnostics(uri, diagnostics));\n                }\n                else {\n                    this.setDiagnostics(uri, converted);\n                }\n            }\n        }).finally(() => {\n            this._diagnosticQueueState = { state: 'idle' };\n            this.triggerDiagnosticQueue();\n        });\n    }\n    setDiagnostics(uri, diagnostics) {\n        if (!this._diagnostics) {\n            return;\n        }\n        this._diagnostics.set(uri, diagnostics);\n    }\n    getLocale() {\n        return vscode_1.env.language;\n    }\n    async $start() {\n        if (this.$state === ClientState.StartFailed) {\n            throw new Error(`Previous start failed. Can't restart server.`);\n        }\n        await this.start();\n        const connection = this.activeConnection();\n        if (connection === undefined) {\n            throw new Error(`Starting server failed`);\n        }\n        return connection;\n    }\n    async createConnection() {\n        let errorHandler = (error, message, count) => {\n            this.handleConnectionError(error, message, count).catch((error) => this.error(`Handling connection error failed`, error));\n        };\n        let closeHandler = () => {\n            this.handleConnectionClosed().catch((error) => this.error(`Handling connection close failed`, error));\n        };\n        const transports = await this.createMessageTransports(this._clientOptions.stdioEncoding || 'utf8');\n        this._connection = createConnection(transports.reader, transports.writer, errorHandler, closeHandler, this._clientOptions.connectionOptions);\n        return this._connection;\n    }\n    async handleConnectionClosed() {\n        // Check whether this is a normal shutdown in progress or the client stopped normally.\n        if (this.$state === ClientState.Stopped) {\n            return;\n        }\n        try {\n            if (this._connection !== undefined) {\n                this._connection.dispose();\n            }\n        }\n        catch (error) {\n            // Disposing a connection could fail if error cases.\n        }\n        let handlerResult = { action: CloseAction.DoNotRestart };\n        if (this.$state !== ClientState.Stopping) {\n            try {\n                handlerResult = await this._clientOptions.errorHandler.closed();\n            }\n            catch (error) {\n                // Ignore errors coming from the error handler.\n            }\n        }\n        this._connection = undefined;\n        if (handlerResult.action === CloseAction.DoNotRestart) {\n            this.error(handlerResult.message ?? 'Connection to server got closed. Server will not be restarted.', undefined, handlerResult.handled === true ? false : 'force');\n            this.cleanUp('stop');\n            if (this.$state === ClientState.Starting) {\n                this.$state = ClientState.StartFailed;\n            }\n            else {\n                this.$state = ClientState.Stopped;\n            }\n            this._onStop = Promise.resolve();\n            this._onStart = undefined;\n        }\n        else if (handlerResult.action === CloseAction.Restart) {\n            this.info(handlerResult.message ?? 'Connection to server got closed. Server will restart.', !handlerResult.handled);\n            this.cleanUp('restart');\n            this.$state = ClientState.Initial;\n            this._onStop = Promise.resolve();\n            this._onStart = undefined;\n            this.start().catch((error) => this.error(`Restarting server failed`, error, 'force'));\n        }\n    }\n    async handleConnectionError(error, message, count) {\n        const handlerResult = await this._clientOptions.errorHandler.error(error, message, count);\n        if (handlerResult.action === ErrorAction.Shutdown) {\n            this.error(handlerResult.message ?? `Client ${this._name}: connection to server is erroring.\\n${error.message}\\nShutting down server.`, undefined, handlerResult.handled === true ? false : 'force');\n            this.stop().catch((error) => {\n                this.error(`Stopping server failed`, error, false);\n            });\n        }\n        else {\n            this.error(handlerResult.message ??\n                `Client ${this._name}: connection to server is erroring.\\n${error.message}`, undefined, handlerResult.handled === true ? false : 'force');\n        }\n    }\n    hookConfigurationChanged(connection) {\n        this._listeners.push(vscode_1.workspace.onDidChangeConfiguration(() => {\n            this.refreshTrace(connection, true);\n        }));\n    }\n    refreshTrace(connection, sendNotification = false) {\n        const config = vscode_1.workspace.getConfiguration(this._id);\n        let trace = vscode_languageserver_protocol_1.Trace.Off;\n        let traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;\n        if (config) {\n            const traceConfig = config.get('trace.server', 'off');\n            if (typeof traceConfig === 'string') {\n                trace = vscode_languageserver_protocol_1.Trace.fromString(traceConfig);\n            }\n            else {\n                trace = vscode_languageserver_protocol_1.Trace.fromString(config.get('trace.server.verbosity', 'off'));\n                traceFormat = vscode_languageserver_protocol_1.TraceFormat.fromString(config.get('trace.server.format', 'text'));\n            }\n        }\n        this._trace = trace;\n        this._traceFormat = traceFormat;\n        connection.trace(this._trace, this._tracer, {\n            sendNotification,\n            traceFormat: this._traceFormat\n        }).catch((error) => { this.error(`Updating trace failed with error`, error, false); });\n    }\n    hookFileEvents(_connection) {\n        let fileEvents = this._clientOptions.synchronize.fileEvents;\n        if (!fileEvents) {\n            return;\n        }\n        let watchers;\n        if (Is.array(fileEvents)) {\n            watchers = fileEvents;\n        }\n        else {\n            watchers = [fileEvents];\n        }\n        if (!watchers) {\n            return;\n        }\n        this._dynamicFeatures.get(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type.method).registerRaw(UUID.generateUuid(), watchers);\n    }\n    registerFeatures(features) {\n        for (let feature of features) {\n            this.registerFeature(feature);\n        }\n    }\n    registerFeature(feature) {\n        this._features.push(feature);\n        if (features_1.DynamicFeature.is(feature)) {\n            const registrationType = feature.registrationType;\n            this._dynamicFeatures.set(registrationType.method, feature);\n        }\n    }\n    getFeature(request) {\n        return this._dynamicFeatures.get(request);\n    }\n    hasDedicatedTextSynchronizationFeature(textDocument) {\n        const feature = this.getFeature(vscode_languageserver_protocol_1.NotebookDocumentSyncRegistrationType.method);\n        if (feature === undefined || !(feature instanceof notebook_1.NotebookDocumentSyncFeature)) {\n            return false;\n        }\n        return feature.handles(textDocument);\n    }\n    registerBuiltinFeatures() {\n        const pendingFullTextDocumentChanges = new Map();\n        this.registerFeature(new configuration_1.ConfigurationFeature(this));\n        this.registerFeature(new textSynchronization_1.DidOpenTextDocumentFeature(this, this._syncedDocuments));\n        this._didChangeTextDocumentFeature = new textSynchronization_1.DidChangeTextDocumentFeature(this, pendingFullTextDocumentChanges);\n        this._didChangeTextDocumentFeature.onPendingChangeAdded(() => {\n            this.triggerPendingChangeDelivery();\n        });\n        this.registerFeature(this._didChangeTextDocumentFeature);\n        this.registerFeature(new textSynchronization_1.WillSaveFeature(this));\n        this.registerFeature(new textSynchronization_1.WillSaveWaitUntilFeature(this));\n        this.registerFeature(new textSynchronization_1.DidSaveTextDocumentFeature(this));\n        this.registerFeature(new textSynchronization_1.DidCloseTextDocumentFeature(this, this._syncedDocuments, pendingFullTextDocumentChanges));\n        this.registerFeature(new fileSystemWatcher_1.FileSystemWatcherFeature(this, (event) => this.notifyFileEvent(event)));\n        this.registerFeature(new completion_1.CompletionItemFeature(this));\n        this.registerFeature(new hover_1.HoverFeature(this));\n        this.registerFeature(new signatureHelp_1.SignatureHelpFeature(this));\n        this.registerFeature(new definition_1.DefinitionFeature(this));\n        this.registerFeature(new reference_1.ReferencesFeature(this));\n        this.registerFeature(new documentHighlight_1.DocumentHighlightFeature(this));\n        this.registerFeature(new documentSymbol_1.DocumentSymbolFeature(this));\n        this.registerFeature(new workspaceSymbol_1.WorkspaceSymbolFeature(this));\n        this.registerFeature(new codeAction_1.CodeActionFeature(this));\n        this.registerFeature(new codeLens_1.CodeLensFeature(this));\n        this.registerFeature(new formatting_1.DocumentFormattingFeature(this));\n        this.registerFeature(new formatting_1.DocumentRangeFormattingFeature(this));\n        this.registerFeature(new formatting_1.DocumentOnTypeFormattingFeature(this));\n        this.registerFeature(new rename_1.RenameFeature(this));\n        this.registerFeature(new documentLink_1.DocumentLinkFeature(this));\n        this.registerFeature(new executeCommand_1.ExecuteCommandFeature(this));\n        this.registerFeature(new configuration_1.SyncConfigurationFeature(this));\n        this.registerFeature(new typeDefinition_1.TypeDefinitionFeature(this));\n        this.registerFeature(new implementation_1.ImplementationFeature(this));\n        this.registerFeature(new colorProvider_1.ColorProviderFeature(this));\n        // We only register the workspace folder feature if the client is not locked\n        // to a specific workspace folder.\n        if (this.clientOptions.workspaceFolder === undefined) {\n            this.registerFeature(new workspaceFolder_1.WorkspaceFoldersFeature(this));\n        }\n        this.registerFeature(new foldingRange_1.FoldingRangeFeature(this));\n        this.registerFeature(new declaration_1.DeclarationFeature(this));\n        this.registerFeature(new selectionRange_1.SelectionRangeFeature(this));\n        this.registerFeature(new progress_1.ProgressFeature(this));\n        this.registerFeature(new callHierarchy_1.CallHierarchyFeature(this));\n        this.registerFeature(new semanticTokens_1.SemanticTokensFeature(this));\n        this.registerFeature(new linkedEditingRange_1.LinkedEditingFeature(this));\n        this.registerFeature(new fileOperations_1.DidCreateFilesFeature(this));\n        this.registerFeature(new fileOperations_1.DidRenameFilesFeature(this));\n        this.registerFeature(new fileOperations_1.DidDeleteFilesFeature(this));\n        this.registerFeature(new fileOperations_1.WillCreateFilesFeature(this));\n        this.registerFeature(new fileOperations_1.WillRenameFilesFeature(this));\n        this.registerFeature(new fileOperations_1.WillDeleteFilesFeature(this));\n        this.registerFeature(new typeHierarchy_1.TypeHierarchyFeature(this));\n        this.registerFeature(new inlineValue_1.InlineValueFeature(this));\n        this.registerFeature(new inlayHint_1.InlayHintsFeature(this));\n        this.registerFeature(new diagnostic_1.DiagnosticFeature(this));\n        this.registerFeature(new notebook_1.NotebookDocumentSyncFeature(this));\n    }\n    registerProposedFeatures() {\n        this.registerFeatures(ProposedFeatures.createAll(this));\n    }\n    fillInitializeParams(params) {\n        for (let feature of this._features) {\n            if (Is.func(feature.fillInitializeParams)) {\n                feature.fillInitializeParams(params);\n            }\n        }\n    }\n    computeClientCapabilities() {\n        const result = {};\n        (0, features_1.ensure)(result, 'workspace').applyEdit = true;\n        const workspaceEdit = (0, features_1.ensure)((0, features_1.ensure)(result, 'workspace'), 'workspaceEdit');\n        workspaceEdit.documentChanges = true;\n        workspaceEdit.resourceOperations = [vscode_languageserver_protocol_1.ResourceOperationKind.Create, vscode_languageserver_protocol_1.ResourceOperationKind.Rename, vscode_languageserver_protocol_1.ResourceOperationKind.Delete];\n        workspaceEdit.failureHandling = vscode_languageserver_protocol_1.FailureHandlingKind.TextOnlyTransactional;\n        workspaceEdit.normalizesLineEndings = true;\n        workspaceEdit.changeAnnotationSupport = {\n            groupsOnLabel: true\n        };\n        const diagnostics = (0, features_1.ensure)((0, features_1.ensure)(result, 'textDocument'), 'publishDiagnostics');\n        diagnostics.relatedInformation = true;\n        diagnostics.versionSupport = false;\n        diagnostics.tagSupport = { valueSet: [vscode_languageserver_protocol_1.DiagnosticTag.Unnecessary, vscode_languageserver_protocol_1.DiagnosticTag.Deprecated] };\n        diagnostics.codeDescriptionSupport = true;\n        diagnostics.dataSupport = true;\n        const windowCapabilities = (0, features_1.ensure)(result, 'window');\n        const showMessage = (0, features_1.ensure)(windowCapabilities, 'showMessage');\n        showMessage.messageActionItem = { additionalPropertiesSupport: true };\n        const showDocument = (0, features_1.ensure)(windowCapabilities, 'showDocument');\n        showDocument.support = true;\n        const generalCapabilities = (0, features_1.ensure)(result, 'general');\n        generalCapabilities.staleRequestSupport = {\n            cancel: true,\n            retryOnContentModified: Array.from(BaseLanguageClient.RequestsToCancelOnContentModified)\n        };\n        generalCapabilities.regularExpressions = { engine: 'ECMAScript', version: 'ES2020' };\n        generalCapabilities.markdown = {\n            parser: 'marked',\n            version: '1.1.0',\n        };\n        generalCapabilities.positionEncodings = ['utf-16'];\n        if (this._clientOptions.markdown.supportHtml) {\n            generalCapabilities.markdown.allowedTags = ['ul', 'li', 'p', 'code', 'blockquote', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'em', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'del', 'a', 'strong', 'br', 'img', 'span'];\n        }\n        for (let feature of this._features) {\n            feature.fillClientCapabilities(result);\n        }\n        return result;\n    }\n    initializeFeatures(_connection) {\n        const documentSelector = this._clientOptions.documentSelector;\n        for (const feature of this._features) {\n            if (Is.func(feature.preInitialize)) {\n                feature.preInitialize(this._capabilities, documentSelector);\n            }\n        }\n        for (const feature of this._features) {\n            feature.initialize(this._capabilities, documentSelector);\n        }\n    }\n    async handleRegistrationRequest(params) {\n        const middleware = this.clientOptions.middleware?.handleRegisterCapability;\n        if (middleware) {\n            return middleware(params, nextParams => this.doRegisterCapability(nextParams));\n        }\n        else {\n            return this.doRegisterCapability(params);\n        }\n    }\n    async doRegisterCapability(params) {\n        // We will not receive a registration call before a client is running\n        // from a server. However if we stop or shutdown we might which might\n        // try to restart the server. So ignore registrations if we are not running\n        if (!this.isRunning()) {\n            for (const registration of params.registrations) {\n                this._ignoredRegistrations.add(registration.id);\n            }\n            return;\n        }\n        for (const registration of params.registrations) {\n            const feature = this._dynamicFeatures.get(registration.method);\n            if (feature === undefined) {\n                return Promise.reject(new Error(`No feature implementation for ${registration.method} found. Registration failed.`));\n            }\n            const options = registration.registerOptions ?? {};\n            options.documentSelector = options.documentSelector ?? this._clientOptions.documentSelector;\n            const data = {\n                id: registration.id,\n                registerOptions: options\n            };\n            try {\n                feature.register(data);\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n    }\n    async handleUnregistrationRequest(params) {\n        const middleware = this.clientOptions.middleware?.handleUnregisterCapability;\n        if (middleware) {\n            return middleware(params, nextParams => this.doUnregisterCapability(nextParams));\n        }\n        else {\n            return this.doUnregisterCapability(params);\n        }\n    }\n    async doUnregisterCapability(params) {\n        for (const unregistration of params.unregisterations) {\n            if (this._ignoredRegistrations.has(unregistration.id)) {\n                continue;\n            }\n            const feature = this._dynamicFeatures.get(unregistration.method);\n            if (!feature) {\n                return Promise.reject(new Error(`No feature implementation for ${unregistration.method} found. Unregistration failed.`));\n            }\n            feature.unregister(unregistration.id);\n        }\n    }\n    async handleApplyWorkspaceEdit(params) {\n        const workspaceEdit = params.edit;\n        // Make sure we convert workspace edits one after the other. Otherwise\n        // we might execute a workspace edit received first after we received another\n        // one since the conversion might race.\n        const converted = await this.workspaceEditLock.lock(() => {\n            return this._p2c.asWorkspaceEdit(workspaceEdit);\n        });\n        // This is some sort of workaround since the version check should be done by VS Code in the Workspace.applyEdit.\n        // However doing it here adds some safety since the server can lag more behind then an extension.\n        const openTextDocuments = new Map();\n        vscode_1.workspace.textDocuments.forEach((document) => openTextDocuments.set(document.uri.toString(), document));\n        let versionMismatch = false;\n        if (workspaceEdit.documentChanges) {\n            for (const change of workspaceEdit.documentChanges) {\n                if (vscode_languageserver_protocol_1.TextDocumentEdit.is(change) && change.textDocument.version && change.textDocument.version >= 0) {\n                    const changeUri = this._p2c.asUri(change.textDocument.uri).toString();\n                    const textDocument = openTextDocuments.get(changeUri);\n                    if (textDocument && textDocument.version !== change.textDocument.version) {\n                        versionMismatch = true;\n                        break;\n                    }\n                }\n            }\n        }\n        if (versionMismatch) {\n            return Promise.resolve({ applied: false });\n        }\n        return Is.asPromise(vscode_1.workspace.applyEdit(converted).then((value) => { return { applied: value }; }));\n    }\n    handleFailedRequest(type, token, error, defaultValue, showNotification = true) {\n        // If we get a request cancel or a content modified don't log anything.\n        if (error instanceof vscode_languageserver_protocol_1.ResponseError) {\n            // The connection got disposed while we were waiting for a response.\n            // Simply return the default value. Is the best we can do.\n            if (error.code === vscode_languageserver_protocol_1.ErrorCodes.PendingResponseRejected || error.code === vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive) {\n                return defaultValue;\n            }\n            if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.RequestCancelled || error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ServerCancelled) {\n                if (token !== undefined && token.isCancellationRequested) {\n                    return defaultValue;\n                }\n                else {\n                    if (error.data !== undefined) {\n                        throw new features_1.LSPCancellationError(error.data);\n                    }\n                    else {\n                        throw new vscode_1.CancellationError();\n                    }\n                }\n            }\n            else if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ContentModified) {\n                if (BaseLanguageClient.RequestsToCancelOnContentModified.has(type.method) || BaseLanguageClient.CancellableResolveCalls.has(type.method)) {\n                    throw new vscode_1.CancellationError();\n                }\n                else {\n                    return defaultValue;\n                }\n            }\n        }\n        this.error(`Request ${type.method} failed.`, error, showNotification);\n        throw error;\n    }\n}\nexports.BaseLanguageClient = BaseLanguageClient;\nBaseLanguageClient.RequestsToCancelOnContentModified = new Set([\n    vscode_languageserver_protocol_1.SemanticTokensRequest.method,\n    vscode_languageserver_protocol_1.SemanticTokensRangeRequest.method,\n    vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.method\n]);\nBaseLanguageClient.CancellableResolveCalls = new Set([\n    vscode_languageserver_protocol_1.CompletionResolveRequest.method,\n    vscode_languageserver_protocol_1.CodeLensResolveRequest.method,\n    vscode_languageserver_protocol_1.CodeActionResolveRequest.method,\n    vscode_languageserver_protocol_1.InlayHintResolveRequest.method,\n    vscode_languageserver_protocol_1.DocumentLinkResolveRequest.method,\n    vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.method\n]);\nclass ConsoleLogger {\n    error(message) {\n        (0, vscode_languageserver_protocol_1.RAL)().console.error(message);\n    }\n    warn(message) {\n        (0, vscode_languageserver_protocol_1.RAL)().console.warn(message);\n    }\n    info(message) {\n        (0, vscode_languageserver_protocol_1.RAL)().console.info(message);\n    }\n    log(message) {\n        (0, vscode_languageserver_protocol_1.RAL)().console.log(message);\n    }\n}\nfunction createConnection(input, output, errorHandler, closeHandler, options) {\n    const logger = new ConsoleLogger();\n    const connection = (0, vscode_languageserver_protocol_1.createProtocolConnection)(input, output, logger, options);\n    connection.onError((data) => { errorHandler(data[0], data[1], data[2]); });\n    connection.onClose(closeHandler);\n    const result = {\n        listen: () => connection.listen(),\n        sendRequest: connection.sendRequest,\n        onRequest: connection.onRequest,\n        hasPendingResponse: connection.hasPendingResponse,\n        sendNotification: connection.sendNotification,\n        onNotification: connection.onNotification,\n        onProgress: connection.onProgress,\n        sendProgress: connection.sendProgress,\n        trace: (value, tracer, sendNotificationOrTraceOptions) => {\n            const defaultTraceOptions = {\n                sendNotification: false,\n                traceFormat: vscode_languageserver_protocol_1.TraceFormat.Text\n            };\n            if (sendNotificationOrTraceOptions === undefined) {\n                return connection.trace(value, tracer, defaultTraceOptions);\n            }\n            else if (Is.boolean(sendNotificationOrTraceOptions)) {\n                return connection.trace(value, tracer, sendNotificationOrTraceOptions);\n            }\n            else {\n                return connection.trace(value, tracer, sendNotificationOrTraceOptions);\n            }\n        },\n        initialize: (params) => {\n            // This needs to return and MUST not be await to avoid any async\n            // scheduling. Otherwise messages might overtake each other.\n            return connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params);\n        },\n        shutdown: () => {\n            // This needs to return and MUST not be await to avoid any async\n            // scheduling. Otherwise messages might overtake each other.\n            return connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined);\n        },\n        exit: () => {\n            // This needs to return and MUST not be await to avoid any async\n            // scheduling. Otherwise messages might overtake each other.\n            return connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type);\n        },\n        end: () => connection.end(),\n        dispose: () => connection.dispose()\n    };\n    return result;\n}\n// Exporting proposed protocol.\nvar ProposedFeatures;\n(function (ProposedFeatures) {\n    function createAll(_client) {\n        let result = [\n            new inlineCompletion_1.InlineCompletionItemFeature(_client)\n        ];\n        return result;\n    }\n    ProposedFeatures.createAll = createAll;\n})(ProposedFeatures || (exports.ProposedFeatures = ProposedFeatures = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}