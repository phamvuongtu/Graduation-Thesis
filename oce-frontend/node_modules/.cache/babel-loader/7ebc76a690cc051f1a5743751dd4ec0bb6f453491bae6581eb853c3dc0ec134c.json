{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A pattern kind describing if a glob pattern matches a file a folder or\n * both.\n *\n * @since 3.16.0\n */\nvar FileOperationPatternKind;\n(function (FileOperationPatternKind) {\n  /**\n   * The pattern matches a file only.\n   */\n  FileOperationPatternKind.file = 'file';\n  /**\n   * The pattern matches a folder only.\n   */\n  FileOperationPatternKind.folder = 'folder';\n})(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));\n/**\n * The will create files request is sent from the client to the server before files are actually\n * created as long as the creation is triggered from within the client.\n *\n * The request can return a `WorkspaceEdit` which will be applied to workspace before the\n * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file\n * to be created.\n *\n * @since 3.16.0\n */\nvar WillCreateFilesRequest;\n(function (WillCreateFilesRequest) {\n  WillCreateFilesRequest.method = 'workspace/willCreateFiles';\n  WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);\n})(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));\n/**\n * The did create files notification is sent from the client to the server when\n * files were created from within the client.\n *\n * @since 3.16.0\n */\nvar DidCreateFilesNotification;\n(function (DidCreateFilesNotification) {\n  DidCreateFilesNotification.method = 'workspace/didCreateFiles';\n  DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);\n})(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));\n/**\n * The will rename files request is sent from the client to the server before files are actually\n * renamed as long as the rename is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar WillRenameFilesRequest;\n(function (WillRenameFilesRequest) {\n  WillRenameFilesRequest.method = 'workspace/willRenameFiles';\n  WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);\n})(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));\n/**\n * The did rename files notification is sent from the client to the server when\n * files were renamed from within the client.\n *\n * @since 3.16.0\n */\nvar DidRenameFilesNotification;\n(function (DidRenameFilesNotification) {\n  DidRenameFilesNotification.method = 'workspace/didRenameFiles';\n  DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);\n})(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));\n/**\n * The will delete files request is sent from the client to the server before files are actually\n * deleted as long as the deletion is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar DidDeleteFilesNotification;\n(function (DidDeleteFilesNotification) {\n  DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';\n  DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);\n})(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));\n/**\n * The did delete files notification is sent from the client to the server when\n * files were deleted from within the client.\n *\n * @since 3.16.0\n */\nvar WillDeleteFilesRequest;\n(function (WillDeleteFilesRequest) {\n  WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';\n  WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);\n})(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","WillDeleteFilesRequest","DidDeleteFilesNotification","DidRenameFilesNotification","WillRenameFilesRequest","DidCreateFilesNotification","WillCreateFilesRequest","FileOperationPatternKind","messages_1","require","file","folder","method","messageDirection","MessageDirection","clientToServer","type","ProtocolRequestType","ProtocolNotificationType"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A pattern kind describing if a glob pattern matches a file a folder or\n * both.\n *\n * @since 3.16.0\n */\nvar FileOperationPatternKind;\n(function (FileOperationPatternKind) {\n    /**\n     * The pattern matches a file only.\n     */\n    FileOperationPatternKind.file = 'file';\n    /**\n     * The pattern matches a folder only.\n     */\n    FileOperationPatternKind.folder = 'folder';\n})(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));\n/**\n * The will create files request is sent from the client to the server before files are actually\n * created as long as the creation is triggered from within the client.\n *\n * The request can return a `WorkspaceEdit` which will be applied to workspace before the\n * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file\n * to be created.\n *\n * @since 3.16.0\n */\nvar WillCreateFilesRequest;\n(function (WillCreateFilesRequest) {\n    WillCreateFilesRequest.method = 'workspace/willCreateFiles';\n    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);\n})(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));\n/**\n * The did create files notification is sent from the client to the server when\n * files were created from within the client.\n *\n * @since 3.16.0\n */\nvar DidCreateFilesNotification;\n(function (DidCreateFilesNotification) {\n    DidCreateFilesNotification.method = 'workspace/didCreateFiles';\n    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);\n})(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));\n/**\n * The will rename files request is sent from the client to the server before files are actually\n * renamed as long as the rename is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar WillRenameFilesRequest;\n(function (WillRenameFilesRequest) {\n    WillRenameFilesRequest.method = 'workspace/willRenameFiles';\n    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);\n})(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));\n/**\n * The did rename files notification is sent from the client to the server when\n * files were renamed from within the client.\n *\n * @since 3.16.0\n */\nvar DidRenameFilesNotification;\n(function (DidRenameFilesNotification) {\n    DidRenameFilesNotification.method = 'workspace/didRenameFiles';\n    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);\n})(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));\n/**\n * The will delete files request is sent from the client to the server before files are actually\n * deleted as long as the deletion is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar DidDeleteFilesNotification;\n(function (DidDeleteFilesNotification) {\n    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';\n    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);\n})(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));\n/**\n * The did delete files notification is sent from the client to the server when\n * files were deleted from within the client.\n *\n * @since 3.16.0\n */\nvar WillDeleteFilesRequest;\n(function (WillDeleteFilesRequest) {\n    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';\n    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);\n})(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}