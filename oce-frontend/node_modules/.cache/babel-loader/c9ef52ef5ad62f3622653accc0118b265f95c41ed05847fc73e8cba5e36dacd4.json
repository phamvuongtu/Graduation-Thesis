{"ast":null,"code":"var _jsxFileName = \"/Users/phamtu/Downloads/Code/OCE/oce-frontend/src/components/CodeEditorSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Editor, { useMonaco } from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditorSection = ({\n  onChange,\n  language,\n  code,\n  theme\n}) => {\n  _s();\n  const [value, setValue] = useState(code || \"\");\n  const [editorTheme, setEditorTheme] = useState(theme ? theme.value : \"vs-dark\");\n  const editorRef = useRef(null);\n  // const socket = useRef(null);\n  const monaco = useRef(null);\n  const handleEditorChange = value => {\n    setValue(value);\n    onChange(\"code\", value);\n    // sendCodeToLsp(value);\n  };\n  useEffect(() => {\n    setValue(code); // Update the value when code prop changes\n  }, [code]);\n  useEffect(() => {\n    setEditorTheme(theme ? theme.value : \"vs-dark\");\n  }, [theme]);\n\n  // useEffect(() => {\n  //   if (socket.current) return // exit socket=\n  //   // Ensure WebSocket connection is handled properly\n  //   if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //     socket.current.close();\n  //   }\n  //   console.log('Connecting to WebSocket...');\n  //   socket.current = new WebSocket('ws://localhost:8080/lsp');\n\n  //   socket.current.onopen = () => {\n  //     console.log('WebSocket connection opened');\n  //   };\n\n  //   socket.current.onmessage = (message) => {\n  //     const data = JSON.parse(message.data);\n  //     if (data.method === 'textDocument/completion') {\n  //       const suggestions = data.result.items.map(item => ({\n  //         label: item.label,\n  //         kind: monaco.current.languages.CompletionItemKind.Function,\n  //         documentation: item.documentation,\n  //         insertText: item.insertText\n  //       }));\n  //       monaco.current.languages.registerCompletionItemProvider(language, {\n  //         provideCompletionItems: () => ({\n  //           suggestions: suggestions\n  //         })\n  //       });\n  //     } else if (data.method === 'textDocument/hover') {\n  //       const hoverData = data.result.contents.value;\n  //       monaco.current.languages.registerHoverProvider(language, {\n  //         provideHover: () => ({\n  //           contents: [{ value: hoverData }]\n  //         })\n  //       });\n  //     }\n  //   };\n\n  //   socket.current.onclose = (event) => {\n  //     console.log('WebSocket connection closed:', event.reason);\n  //     // Attempt to reconnect after a delay\n  //     setTimeout(() => {\n  //       if (socket.current.readyState !== WebSocket.OPEN) {\n  //         console.log('Reconnecting to WebSocket...');\n  //         socket.current = new WebSocket('ws://localhost:8080/lsp');\n  //       }\n  //     }, 1000);\n  //   };\n\n  //   socket.current.onerror = (error) => {\n  //     console.error('WebSocket error:', error);\n  //   };\n\n  //   return () => {\n  //     if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //       socket.current.close();\n  //     }\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    if (monaco && editorRef.current) {\n      monaco.editor.setModelLanguage(editorRef.current.getModel(), language === \"py\" ? \"python\" : language);\n    }\n  }, [language, monaco]);\n\n  // const sendCodeToLsp = (code) => {\n  //   if (editorRef.current && socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //     socket.current.send(JSON.stringify({\n  //       jsonrpc: '2.0',\n  //       id: 1,\n  //       method: 'textDocument/didChange',\n  //       params: {\n  //         textDocument: { uri: 'file:///' + editorRef.current.getModel().uri.path },\n  //         contentChanges: [{ text: code }]\n  //       }\n  //     }));\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlay rounded-md overflow-hidden w-full h-full shadow-4xl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditorSection, \"5H7YFSwKkuk6e13fuTarV3qg7WU=\");\n_c = CodeEditorSection;\nexport default CodeEditorSection;\nvar _c;\n$RefreshReg$(_c, \"CodeEditorSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Editor","useMonaco","jsxDEV","_jsxDEV","CodeEditorSection","onChange","language","code","theme","_s","value","setValue","editorTheme","setEditorTheme","editorRef","monaco","handleEditorChange","current","editor","setModelLanguage","getModel","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/src/components/CodeEditorSection.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Editor, { useMonaco } from \"@monaco-editor/react\";\n\nconst CodeEditorSection = ({ onChange, language, code, theme }) => {\n  const [value, setValue] = useState(code || \"\");\n  const [editorTheme, setEditorTheme] = useState(theme ? theme.value : \"vs-dark\");\n  const editorRef = useRef(null);\n  // const socket = useRef(null);\n  const monaco = useRef(null)\n  \n  const handleEditorChange = (value) => {\n    setValue(value);\n    onChange(\"code\", value);\n    // sendCodeToLsp(value);\n  };\n\n  useEffect(() => {\n    setValue(code); // Update the value when code prop changes\n  }, [code]);\n\n  useEffect(() => {\n    setEditorTheme(theme ? theme.value : \"vs-dark\");\n  }, [theme]);\n\n  // useEffect(() => {\n  //   if (socket.current) return // exit socket=\n  //   // Ensure WebSocket connection is handled properly\n  //   if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //     socket.current.close();\n  //   }\n  //   console.log('Connecting to WebSocket...');\n  //   socket.current = new WebSocket('ws://localhost:8080/lsp');\n\n  //   socket.current.onopen = () => {\n  //     console.log('WebSocket connection opened');\n  //   };\n\n  //   socket.current.onmessage = (message) => {\n  //     const data = JSON.parse(message.data);\n  //     if (data.method === 'textDocument/completion') {\n  //       const suggestions = data.result.items.map(item => ({\n  //         label: item.label,\n  //         kind: monaco.current.languages.CompletionItemKind.Function,\n  //         documentation: item.documentation,\n  //         insertText: item.insertText\n  //       }));\n  //       monaco.current.languages.registerCompletionItemProvider(language, {\n  //         provideCompletionItems: () => ({\n  //           suggestions: suggestions\n  //         })\n  //       });\n  //     } else if (data.method === 'textDocument/hover') {\n  //       const hoverData = data.result.contents.value;\n  //       monaco.current.languages.registerHoverProvider(language, {\n  //         provideHover: () => ({\n  //           contents: [{ value: hoverData }]\n  //         })\n  //       });\n  //     }\n  //   };\n\n  //   socket.current.onclose = (event) => {\n  //     console.log('WebSocket connection closed:', event.reason);\n  //     // Attempt to reconnect after a delay\n  //     setTimeout(() => {\n  //       if (socket.current.readyState !== WebSocket.OPEN) {\n  //         console.log('Reconnecting to WebSocket...');\n  //         socket.current = new WebSocket('ws://localhost:8080/lsp');\n  //       }\n  //     }, 1000);\n  //   };\n\n  //   socket.current.onerror = (error) => {\n  //     console.error('WebSocket error:', error);\n  //   };\n\n  //   return () => {\n  //     if (socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //       socket.current.close();\n  //     }\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    if (monaco && editorRef.current) {\n      monaco.editor.setModelLanguage(editorRef.current.getModel(), language === \"py\" ? \"python\" : language);\n    }\n  }, [language, monaco]);\n\n  // const sendCodeToLsp = (code) => {\n  //   if (editorRef.current && socket.current && socket.current.readyState === WebSocket.OPEN) {\n  //     socket.current.send(JSON.stringify({\n  //       jsonrpc: '2.0',\n  //       id: 1,\n  //       method: 'textDocument/didChange',\n  //       params: {\n  //         textDocument: { uri: 'file:///' + editorRef.current.getModel().uri.path },\n  //         contentChanges: [{ text: code }]\n  //       }\n  //     }));\n  //   }\n  // };\n\n  return (\n    <div className=\"overlay rounded-md overflow-hidden w-full h-full shadow-4xl\">\n      {/* <Editor\n        height=\"85vh\"\n        width={`100%`}\n        language={language || \"c\"}\n        value={value}\n        theme={editorTheme}\n        defaultValue={code}\n        onChange={handleEditorChange}\n        onMount={value => monaco.current = value}\n        editorDidMount={(editor) => {\n          editorRef.current = editor;\n        }}\n      /> */}\n      {/* <Editor\n        height=\"85vh\"\n        width=\"100%\"\n        language={language === \"py\" ? \"python\" : language}\n        value={value}\n        theme={editorTheme}\n        onChange={handleEditorChange}\n        onMount={(editor) => {\n          editorRef.current = editor;\n        }}\n      /> */}\n    </div>\n  );\n};\n\nexport default CodeEditorSection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,IAAIC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,IAAI;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACU,IAAI,IAAI,EAAE,CAAC;EAC9C,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAACW,KAAK,GAAGA,KAAK,CAACE,KAAK,GAAG,SAAS,CAAC;EAC/E,MAAMI,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC9B;EACA,MAAMgB,MAAM,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAMiB,kBAAkB,GAAIN,KAAK,IAAK;IACpCC,QAAQ,CAACD,KAAK,CAAC;IACfL,QAAQ,CAAC,MAAM,EAAEK,KAAK,CAAC;IACvB;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACda,QAAQ,CAACJ,IAAI,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVT,SAAS,CAAC,MAAM;IACde,cAAc,CAACL,KAAK,GAAGA,KAAK,CAACE,KAAK,GAAG,SAAS,CAAC;EACjD,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;;EAEX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEAV,SAAS,CAAC,MAAM;IACd,IAAIiB,MAAM,IAAID,SAAS,CAACG,OAAO,EAAE;MAC/BF,MAAM,CAACG,MAAM,CAACC,gBAAgB,CAACL,SAAS,CAACG,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAEd,QAAQ,KAAK,IAAI,GAAG,QAAQ,GAAGA,QAAQ,CAAC;IACvG;EACF,CAAC,EAAE,CAACA,QAAQ,EAAES,MAAM,CAAC,CAAC;;EAEtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEZ,OAAA;IAAKkB,SAAS,EAAC;EAA6D;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAyBvE,CAAC;AAEV,CAAC;AAAChB,EAAA,CAhIIL,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAkIvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}