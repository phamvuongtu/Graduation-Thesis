{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;\nexports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;\nexports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;\nconst messages_1 = require(\"./messages\");\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst protocol_implementation_1 = require(\"./protocol.implementation\");\nObject.defineProperty(exports, \"ImplementationRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_implementation_1.ImplementationRequest;\n  }\n});\nconst protocol_typeDefinition_1 = require(\"./protocol.typeDefinition\");\nObject.defineProperty(exports, \"TypeDefinitionRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_typeDefinition_1.TypeDefinitionRequest;\n  }\n});\nconst protocol_workspaceFolder_1 = require(\"./protocol.workspaceFolder\");\nObject.defineProperty(exports, \"WorkspaceFoldersRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_workspaceFolder_1.WorkspaceFoldersRequest;\n  }\n});\nObject.defineProperty(exports, \"DidChangeWorkspaceFoldersNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;\n  }\n});\nconst protocol_configuration_1 = require(\"./protocol.configuration\");\nObject.defineProperty(exports, \"ConfigurationRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_configuration_1.ConfigurationRequest;\n  }\n});\nconst protocol_colorProvider_1 = require(\"./protocol.colorProvider\");\nObject.defineProperty(exports, \"DocumentColorRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_colorProvider_1.DocumentColorRequest;\n  }\n});\nObject.defineProperty(exports, \"ColorPresentationRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_colorProvider_1.ColorPresentationRequest;\n  }\n});\nconst protocol_foldingRange_1 = require(\"./protocol.foldingRange\");\nObject.defineProperty(exports, \"FoldingRangeRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_foldingRange_1.FoldingRangeRequest;\n  }\n});\nObject.defineProperty(exports, \"FoldingRangeRefreshRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_foldingRange_1.FoldingRangeRefreshRequest;\n  }\n});\nconst protocol_declaration_1 = require(\"./protocol.declaration\");\nObject.defineProperty(exports, \"DeclarationRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_declaration_1.DeclarationRequest;\n  }\n});\nconst protocol_selectionRange_1 = require(\"./protocol.selectionRange\");\nObject.defineProperty(exports, \"SelectionRangeRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_selectionRange_1.SelectionRangeRequest;\n  }\n});\nconst protocol_progress_1 = require(\"./protocol.progress\");\nObject.defineProperty(exports, \"WorkDoneProgress\", {\n  enumerable: true,\n  get: function () {\n    return protocol_progress_1.WorkDoneProgress;\n  }\n});\nObject.defineProperty(exports, \"WorkDoneProgressCreateRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_progress_1.WorkDoneProgressCreateRequest;\n  }\n});\nObject.defineProperty(exports, \"WorkDoneProgressCancelNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_progress_1.WorkDoneProgressCancelNotification;\n  }\n});\nconst protocol_callHierarchy_1 = require(\"./protocol.callHierarchy\");\nObject.defineProperty(exports, \"CallHierarchyIncomingCallsRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;\n  }\n});\nObject.defineProperty(exports, \"CallHierarchyOutgoingCallsRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;\n  }\n});\nObject.defineProperty(exports, \"CallHierarchyPrepareRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_callHierarchy_1.CallHierarchyPrepareRequest;\n  }\n});\nconst protocol_semanticTokens_1 = require(\"./protocol.semanticTokens\");\nObject.defineProperty(exports, \"TokenFormat\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.TokenFormat;\n  }\n});\nObject.defineProperty(exports, \"SemanticTokensRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.SemanticTokensRequest;\n  }\n});\nObject.defineProperty(exports, \"SemanticTokensDeltaRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.SemanticTokensDeltaRequest;\n  }\n});\nObject.defineProperty(exports, \"SemanticTokensRangeRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.SemanticTokensRangeRequest;\n  }\n});\nObject.defineProperty(exports, \"SemanticTokensRefreshRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.SemanticTokensRefreshRequest;\n  }\n});\nObject.defineProperty(exports, \"SemanticTokensRegistrationType\", {\n  enumerable: true,\n  get: function () {\n    return protocol_semanticTokens_1.SemanticTokensRegistrationType;\n  }\n});\nconst protocol_showDocument_1 = require(\"./protocol.showDocument\");\nObject.defineProperty(exports, \"ShowDocumentRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_showDocument_1.ShowDocumentRequest;\n  }\n});\nconst protocol_linkedEditingRange_1 = require(\"./protocol.linkedEditingRange\");\nObject.defineProperty(exports, \"LinkedEditingRangeRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;\n  }\n});\nconst protocol_fileOperations_1 = require(\"./protocol.fileOperations\");\nObject.defineProperty(exports, \"FileOperationPatternKind\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.FileOperationPatternKind;\n  }\n});\nObject.defineProperty(exports, \"DidCreateFilesNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.DidCreateFilesNotification;\n  }\n});\nObject.defineProperty(exports, \"WillCreateFilesRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.WillCreateFilesRequest;\n  }\n});\nObject.defineProperty(exports, \"DidRenameFilesNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.DidRenameFilesNotification;\n  }\n});\nObject.defineProperty(exports, \"WillRenameFilesRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.WillRenameFilesRequest;\n  }\n});\nObject.defineProperty(exports, \"DidDeleteFilesNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.DidDeleteFilesNotification;\n  }\n});\nObject.defineProperty(exports, \"WillDeleteFilesRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_fileOperations_1.WillDeleteFilesRequest;\n  }\n});\nconst protocol_moniker_1 = require(\"./protocol.moniker\");\nObject.defineProperty(exports, \"UniquenessLevel\", {\n  enumerable: true,\n  get: function () {\n    return protocol_moniker_1.UniquenessLevel;\n  }\n});\nObject.defineProperty(exports, \"MonikerKind\", {\n  enumerable: true,\n  get: function () {\n    return protocol_moniker_1.MonikerKind;\n  }\n});\nObject.defineProperty(exports, \"MonikerRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_moniker_1.MonikerRequest;\n  }\n});\nconst protocol_typeHierarchy_1 = require(\"./protocol.typeHierarchy\");\nObject.defineProperty(exports, \"TypeHierarchyPrepareRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;\n  }\n});\nObject.defineProperty(exports, \"TypeHierarchySubtypesRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;\n  }\n});\nObject.defineProperty(exports, \"TypeHierarchySupertypesRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;\n  }\n});\nconst protocol_inlineValue_1 = require(\"./protocol.inlineValue\");\nObject.defineProperty(exports, \"InlineValueRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlineValue_1.InlineValueRequest;\n  }\n});\nObject.defineProperty(exports, \"InlineValueRefreshRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlineValue_1.InlineValueRefreshRequest;\n  }\n});\nconst protocol_inlayHint_1 = require(\"./protocol.inlayHint\");\nObject.defineProperty(exports, \"InlayHintRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlayHint_1.InlayHintRequest;\n  }\n});\nObject.defineProperty(exports, \"InlayHintResolveRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlayHint_1.InlayHintResolveRequest;\n  }\n});\nObject.defineProperty(exports, \"InlayHintRefreshRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlayHint_1.InlayHintRefreshRequest;\n  }\n});\nconst protocol_diagnostic_1 = require(\"./protocol.diagnostic\");\nObject.defineProperty(exports, \"DiagnosticServerCancellationData\", {\n  enumerable: true,\n  get: function () {\n    return protocol_diagnostic_1.DiagnosticServerCancellationData;\n  }\n});\nObject.defineProperty(exports, \"DocumentDiagnosticReportKind\", {\n  enumerable: true,\n  get: function () {\n    return protocol_diagnostic_1.DocumentDiagnosticReportKind;\n  }\n});\nObject.defineProperty(exports, \"DocumentDiagnosticRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_diagnostic_1.DocumentDiagnosticRequest;\n  }\n});\nObject.defineProperty(exports, \"WorkspaceDiagnosticRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_diagnostic_1.WorkspaceDiagnosticRequest;\n  }\n});\nObject.defineProperty(exports, \"DiagnosticRefreshRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_diagnostic_1.DiagnosticRefreshRequest;\n  }\n});\nconst protocol_notebook_1 = require(\"./protocol.notebook\");\nObject.defineProperty(exports, \"NotebookCellKind\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.NotebookCellKind;\n  }\n});\nObject.defineProperty(exports, \"ExecutionSummary\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.ExecutionSummary;\n  }\n});\nObject.defineProperty(exports, \"NotebookCell\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.NotebookCell;\n  }\n});\nObject.defineProperty(exports, \"NotebookDocument\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.NotebookDocument;\n  }\n});\nObject.defineProperty(exports, \"NotebookDocumentSyncRegistrationType\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.NotebookDocumentSyncRegistrationType;\n  }\n});\nObject.defineProperty(exports, \"DidOpenNotebookDocumentNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.DidOpenNotebookDocumentNotification;\n  }\n});\nObject.defineProperty(exports, \"NotebookCellArrayChange\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.NotebookCellArrayChange;\n  }\n});\nObject.defineProperty(exports, \"DidChangeNotebookDocumentNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.DidChangeNotebookDocumentNotification;\n  }\n});\nObject.defineProperty(exports, \"DidSaveNotebookDocumentNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.DidSaveNotebookDocumentNotification;\n  }\n});\nObject.defineProperty(exports, \"DidCloseNotebookDocumentNotification\", {\n  enumerable: true,\n  get: function () {\n    return protocol_notebook_1.DidCloseNotebookDocumentNotification;\n  }\n});\nconst protocol_inlineCompletion_1 = require(\"./protocol.inlineCompletion\");\nObject.defineProperty(exports, \"InlineCompletionRequest\", {\n  enumerable: true,\n  get: function () {\n    return protocol_inlineCompletion_1.InlineCompletionRequest;\n  }\n});\n// @ts-ignore: to avoid inlining LocationLink as dynamic import\nlet __noDynamicImport;\n/**\n * The TextDocumentFilter namespace provides helper functions to work with\n * {@link TextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar TextDocumentFilter;\n(function (TextDocumentFilter) {\n  function is(value) {\n    const candidate = value;\n    return Is.string(candidate) || Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);\n  }\n  TextDocumentFilter.is = is;\n})(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));\n/**\n * The NotebookDocumentFilter namespace provides helper functions to work with\n * {@link NotebookDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookDocumentFilter;\n(function (NotebookDocumentFilter) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));\n  }\n  NotebookDocumentFilter.is = is;\n})(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));\n/**\n * The NotebookCellTextDocumentFilter namespace provides helper functions to work with\n * {@link NotebookCellTextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookCellTextDocumentFilter;\n(function (NotebookCellTextDocumentFilter) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === undefined || Is.string(candidate.language));\n  }\n  NotebookCellTextDocumentFilter.is = is;\n})(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));\n/**\n * The DocumentSelector namespace provides helper functions to work with\n * {@link DocumentSelector}s.\n */\nvar DocumentSelector;\n(function (DocumentSelector) {\n  function is(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    for (let elem of value) {\n      if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  DocumentSelector.is = is;\n})(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));\n/**\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\n * handler on the client side.\n */\nvar RegistrationRequest;\n(function (RegistrationRequest) {\n  RegistrationRequest.method = 'client/registerCapability';\n  RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n  RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);\n})(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));\n/**\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\n * handler on the client side.\n */\nvar UnregistrationRequest;\n(function (UnregistrationRequest) {\n  UnregistrationRequest.method = 'client/unregisterCapability';\n  UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n  UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);\n})(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));\nvar ResourceOperationKind;\n(function (ResourceOperationKind) {\n  /**\n   * Supports creating new files and folders.\n   */\n  ResourceOperationKind.Create = 'create';\n  /**\n   * Supports renaming existing files and folders.\n   */\n  ResourceOperationKind.Rename = 'rename';\n  /**\n   * Supports deleting existing files and folders.\n   */\n  ResourceOperationKind.Delete = 'delete';\n})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));\nvar FailureHandlingKind;\n(function (FailureHandlingKind) {\n  /**\n   * Applying the workspace change is simply aborted if one of the changes provided\n   * fails. All operations executed before the failing operation stay executed.\n   */\n  FailureHandlingKind.Abort = 'abort';\n  /**\n   * All operations are executed transactional. That means they either all\n   * succeed or no changes at all are applied to the workspace.\n   */\n  FailureHandlingKind.Transactional = 'transactional';\n  /**\n   * If the workspace edit contains only textual file changes they are executed transactional.\n   * If resource changes (create, rename or delete file) are part of the change the failure\n   * handling strategy is abort.\n   */\n  FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\n  /**\n   * The client tries to undo the operations already executed. But there is no\n   * guarantee that this is succeeding.\n   */\n  FailureHandlingKind.Undo = 'undo';\n})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));\n/**\n * A set of predefined position encoding kinds.\n *\n * @since 3.17.0\n */\nvar PositionEncodingKind;\n(function (PositionEncodingKind) {\n  /**\n   * Character offsets count UTF-8 code units (e.g. bytes).\n   */\n  PositionEncodingKind.UTF8 = 'utf-8';\n  /**\n   * Character offsets count UTF-16 code units.\n   *\n   * This is the default and must always be supported\n   * by servers\n   */\n  PositionEncodingKind.UTF16 = 'utf-16';\n  /**\n   * Character offsets count UTF-32 code units.\n   *\n   * Implementation note: these are the same as Unicode codepoints,\n   * so this `PositionEncodingKind` may also be used for an\n   * encoding-agnostic representation of character offsets.\n   */\n  PositionEncodingKind.UTF32 = 'utf-32';\n})(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));\n/**\n * The StaticRegistrationOptions namespace provides helper functions to work with\n * {@link StaticRegistrationOptions} literals.\n */\nvar StaticRegistrationOptions;\n(function (StaticRegistrationOptions) {\n  function hasId(value) {\n    const candidate = value;\n    return candidate && Is.string(candidate.id) && candidate.id.length > 0;\n  }\n  StaticRegistrationOptions.hasId = hasId;\n})(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));\n/**\n * The TextDocumentRegistrationOptions namespace provides helper functions to work with\n * {@link TextDocumentRegistrationOptions} literals.\n */\nvar TextDocumentRegistrationOptions;\n(function (TextDocumentRegistrationOptions) {\n  function is(value) {\n    const candidate = value;\n    return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));\n  }\n  TextDocumentRegistrationOptions.is = is;\n})(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));\n/**\n * The WorkDoneProgressOptions namespace provides helper functions to work with\n * {@link WorkDoneProgressOptions} literals.\n */\nvar WorkDoneProgressOptions;\n(function (WorkDoneProgressOptions) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));\n  }\n  WorkDoneProgressOptions.is = is;\n  function hasWorkDoneProgress(value) {\n    const candidate = value;\n    return candidate && Is.boolean(candidate.workDoneProgress);\n  }\n  WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;\n})(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));\n/**\n * The initialize request is sent from the client to the server.\n * It is sent once as the request after starting up the server.\n * The requests parameter is of type {@link InitializeParams}\n * the response if of type {@link InitializeResult} of a Thenable that\n * resolves to such.\n */\nvar InitializeRequest;\n(function (InitializeRequest) {\n  InitializeRequest.method = 'initialize';\n  InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);\n})(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));\n/**\n * Known error codes for an `InitializeErrorCodes`;\n */\nvar InitializeErrorCodes;\n(function (InitializeErrorCodes) {\n  /**\n   * If the protocol version provided by the client can't be handled by the server.\n   *\n   * @deprecated This initialize error got replaced by client capabilities. There is\n   * no version handshake in version 3.0x\n   */\n  InitializeErrorCodes.unknownProtocolVersion = 1;\n})(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));\n/**\n * The initialized notification is sent from the client to the\n * server after the client is fully initialized and the server\n * is allowed to send requests from the server to the client.\n */\nvar InitializedNotification;\n(function (InitializedNotification) {\n  InitializedNotification.method = 'initialized';\n  InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);\n})(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));\n//---- Shutdown Method ----\n/**\n * A shutdown request is sent from the client to the server.\n * It is sent once when the client decides to shutdown the\n * server. The only notification that is sent after a shutdown request\n * is the exit event.\n */\nvar ShutdownRequest;\n(function (ShutdownRequest) {\n  ShutdownRequest.method = 'shutdown';\n  ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);\n})(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));\n//---- Exit Notification ----\n/**\n * The exit event is sent from the client to the server to\n * ask the server to exit its process.\n */\nvar ExitNotification;\n(function (ExitNotification) {\n  ExitNotification.method = 'exit';\n  ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);\n})(ExitNotification || (exports.ExitNotification = ExitNotification = {}));\n/**\n * The configuration change notification is sent from the client to the server\n * when the client's configuration has changed. The notification contains\n * the changed configuration as defined by the language client.\n */\nvar DidChangeConfigurationNotification;\n(function (DidChangeConfigurationNotification) {\n  DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';\n  DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);\n})(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));\n//---- Message show and log notifications ----\n/**\n * The message type\n */\nvar MessageType;\n(function (MessageType) {\n  /**\n   * An error message.\n   */\n  MessageType.Error = 1;\n  /**\n   * A warning message.\n   */\n  MessageType.Warning = 2;\n  /**\n   * An information message.\n   */\n  MessageType.Info = 3;\n  /**\n   * A log message.\n   */\n  MessageType.Log = 4;\n  /**\n   * A debug message.\n   *\n   * @since 3.18.0\n   */\n  MessageType.Debug = 5;\n})(MessageType || (exports.MessageType = MessageType = {}));\n/**\n * The show message notification is sent from a server to a client to ask\n * the client to display a particular message in the user interface.\n */\nvar ShowMessageNotification;\n(function (ShowMessageNotification) {\n  ShowMessageNotification.method = 'window/showMessage';\n  ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n  ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);\n})(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));\n/**\n * The show message request is sent from the server to the client to show a message\n * and a set of options actions to the user.\n */\nvar ShowMessageRequest;\n(function (ShowMessageRequest) {\n  ShowMessageRequest.method = 'window/showMessageRequest';\n  ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n  ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);\n})(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));\n/**\n * The log message notification is sent from the server to the client to ask\n * the client to log a particular message.\n */\nvar LogMessageNotification;\n(function (LogMessageNotification) {\n  LogMessageNotification.method = 'window/logMessage';\n  LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n  LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);\n})(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));\n//---- Telemetry notification\n/**\n * The telemetry event notification is sent from the server to the client to ask\n * the client to log telemetry data.\n */\nvar TelemetryEventNotification;\n(function (TelemetryEventNotification) {\n  TelemetryEventNotification.method = 'telemetry/event';\n  TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n  TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);\n})(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));\n/**\n * Defines how the host (editor) should sync\n * document changes to the language server.\n */\nvar TextDocumentSyncKind;\n(function (TextDocumentSyncKind) {\n  /**\n   * Documents should not be synced at all.\n   */\n  TextDocumentSyncKind.None = 0;\n  /**\n   * Documents are synced by always sending the full content\n   * of the document.\n   */\n  TextDocumentSyncKind.Full = 1;\n  /**\n   * Documents are synced by sending the full content on open.\n   * After that only incremental updates to the document are\n   * send.\n   */\n  TextDocumentSyncKind.Incremental = 2;\n})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));\n/**\n * The document open notification is sent from the client to the server to signal\n * newly opened text documents. The document's truth is now managed by the client\n * and the server must not try to read the document's truth using the document's\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\n * mean that its content is presented in an editor. An open notification must not\n * be sent more than once without a corresponding close notification send before.\n * This means open and close notification must be balanced and the max open count\n * is one.\n */\nvar DidOpenTextDocumentNotification;\n(function (DidOpenTextDocumentNotification) {\n  DidOpenTextDocumentNotification.method = 'textDocument/didOpen';\n  DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);\n})(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));\nvar TextDocumentContentChangeEvent;\n(function (TextDocumentContentChangeEvent) {\n  /**\n   * Checks whether the information describes a delta event.\n   */\n  function isIncremental(event) {\n    let candidate = event;\n    return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n  }\n  TextDocumentContentChangeEvent.isIncremental = isIncremental;\n  /**\n   * Checks whether the information describes a full replacement event.\n   */\n  function isFull(event) {\n    let candidate = event;\n    return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n  }\n  TextDocumentContentChangeEvent.isFull = isFull;\n})(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));\n/**\n * The document change notification is sent from the client to the server to signal\n * changes to a text document.\n */\nvar DidChangeTextDocumentNotification;\n(function (DidChangeTextDocumentNotification) {\n  DidChangeTextDocumentNotification.method = 'textDocument/didChange';\n  DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);\n})(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));\n/**\n * The document close notification is sent from the client to the server when\n * the document got closed in the client. The document's truth now exists where\n * the document's uri points to (e.g. if the document's uri is a file uri the\n * truth now exists on disk). As with the open notification the close notification\n * is about managing the document's content. Receiving a close notification\n * doesn't mean that the document was open in an editor before. A close\n * notification requires a previous open notification to be sent.\n */\nvar DidCloseTextDocumentNotification;\n(function (DidCloseTextDocumentNotification) {\n  DidCloseTextDocumentNotification.method = 'textDocument/didClose';\n  DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);\n})(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));\n/**\n * The document save notification is sent from the client to the server when\n * the document got saved in the client.\n */\nvar DidSaveTextDocumentNotification;\n(function (DidSaveTextDocumentNotification) {\n  DidSaveTextDocumentNotification.method = 'textDocument/didSave';\n  DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);\n})(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nvar TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n  /**\n   * Manually triggered, e.g. by the user pressing save, by starting debugging,\n   * or by an API call.\n   */\n  TextDocumentSaveReason.Manual = 1;\n  /**\n   * Automatic after a delay.\n   */\n  TextDocumentSaveReason.AfterDelay = 2;\n  /**\n   * When the editor lost focus.\n   */\n  TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));\n/**\n * A document will save notification is sent from the client to the server before\n * the document is actually saved.\n */\nvar WillSaveTextDocumentNotification;\n(function (WillSaveTextDocumentNotification) {\n  WillSaveTextDocumentNotification.method = 'textDocument/willSave';\n  WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);\n})(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));\n/**\n * A document will save request is sent from the client to the server before\n * the document is actually saved. The request can return an array of TextEdits\n * which will be applied to the text document before it is saved. Please note that\n * clients might drop results if computing the text edits took too long or if a\n * server constantly fails on this request. This is done to keep the save fast and\n * reliable.\n */\nvar WillSaveTextDocumentWaitUntilRequest;\n(function (WillSaveTextDocumentWaitUntilRequest) {\n  WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';\n  WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);\n})(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));\n/**\n * The watched files notification is sent from the client to the server when\n * the client detects changes to file watched by the language client.\n */\nvar DidChangeWatchedFilesNotification;\n(function (DidChangeWatchedFilesNotification) {\n  DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';\n  DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n  DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);\n})(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));\n/**\n * The file event type\n */\nvar FileChangeType;\n(function (FileChangeType) {\n  /**\n   * The file got created.\n   */\n  FileChangeType.Created = 1;\n  /**\n   * The file got changed.\n   */\n  FileChangeType.Changed = 2;\n  /**\n   * The file got deleted.\n   */\n  FileChangeType.Deleted = 3;\n})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));\nvar RelativePattern;\n(function (RelativePattern) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);\n  }\n  RelativePattern.is = is;\n})(RelativePattern || (exports.RelativePattern = RelativePattern = {}));\nvar WatchKind;\n(function (WatchKind) {\n  /**\n   * Interested in create events.\n   */\n  WatchKind.Create = 1;\n  /**\n   * Interested in change events\n   */\n  WatchKind.Change = 2;\n  /**\n   * Interested in delete events\n   */\n  WatchKind.Delete = 4;\n})(WatchKind || (exports.WatchKind = WatchKind = {}));\n/**\n * Diagnostics notification are sent from the server to the client to signal\n * results of validation runs.\n */\nvar PublishDiagnosticsNotification;\n(function (PublishDiagnosticsNotification) {\n  PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';\n  PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n  PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);\n})(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));\n/**\n * How a completion was triggered\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n  /**\n   * Completion was triggered by typing an identifier (24x7 code\n   * complete), manual invocation (e.g Ctrl+Space) or via API.\n   */\n  CompletionTriggerKind.Invoked = 1;\n  /**\n   * Completion was triggered by a trigger character specified by\n   * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n   */\n  CompletionTriggerKind.TriggerCharacter = 2;\n  /**\n   * Completion was re-triggered as current completion list is incomplete\n   */\n  CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\n})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));\n/**\n * Request to request completion at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response\n * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\n * or a Thenable that resolves to such.\n *\n * The request can delay the computation of the {@link CompletionItem.detail `detail`}\n * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\n */\nvar CompletionRequest;\n(function (CompletionRequest) {\n  CompletionRequest.method = 'textDocument/completion';\n  CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);\n})(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));\n/**\n * Request to resolve additional information for a given completion item.The request's\n * parameter is of type {@link CompletionItem} the response\n * is of type {@link CompletionItem} or a Thenable that resolves to such.\n */\nvar CompletionResolveRequest;\n(function (CompletionResolveRequest) {\n  CompletionResolveRequest.method = 'completionItem/resolve';\n  CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);\n})(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));\n/**\n * Request to request hover information at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response is of\n * type {@link Hover} or a Thenable that resolves to such.\n */\nvar HoverRequest;\n(function (HoverRequest) {\n  HoverRequest.method = 'textDocument/hover';\n  HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);\n})(HoverRequest || (exports.HoverRequest = HoverRequest = {}));\n/**\n * How a signature help was triggered.\n *\n * @since 3.15.0\n */\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n  /**\n   * Signature help was invoked manually by the user or by a command.\n   */\n  SignatureHelpTriggerKind.Invoked = 1;\n  /**\n   * Signature help was triggered by a trigger character.\n   */\n  SignatureHelpTriggerKind.TriggerCharacter = 2;\n  /**\n   * Signature help was triggered by the cursor moving or by the document content changing.\n   */\n  SignatureHelpTriggerKind.ContentChange = 3;\n})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));\nvar SignatureHelpRequest;\n(function (SignatureHelpRequest) {\n  SignatureHelpRequest.method = 'textDocument/signatureHelp';\n  SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);\n})(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));\n/**\n * A request to resolve the definition location of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPosition}\n * the response is of either type {@link Definition} or a typed array of\n * {@link DefinitionLink} or a Thenable that resolves to such.\n */\nvar DefinitionRequest;\n(function (DefinitionRequest) {\n  DefinitionRequest.method = 'textDocument/definition';\n  DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);\n})(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));\n/**\n * A request to resolve project-wide references for the symbol denoted\n * by the given text document position. The request's parameter is of\n * type {@link ReferenceParams} the response is of type\n * {@link Location Location[]} or a Thenable that resolves to such.\n */\nvar ReferencesRequest;\n(function (ReferencesRequest) {\n  ReferencesRequest.method = 'textDocument/references';\n  ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);\n})(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));\n/**\n * Request to resolve a {@link DocumentHighlight} for a given\n * text document position. The request's parameter is of type {@link TextDocumentPosition}\n * the request response is an array of type {@link DocumentHighlight}\n * or a Thenable that resolves to such.\n */\nvar DocumentHighlightRequest;\n(function (DocumentHighlightRequest) {\n  DocumentHighlightRequest.method = 'textDocument/documentHighlight';\n  DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);\n})(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));\n/**\n * A request to list all symbols found in a given text document. The request's\n * parameter is of type {@link TextDocumentIdentifier} the\n * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\n * that resolves to such.\n */\nvar DocumentSymbolRequest;\n(function (DocumentSymbolRequest) {\n  DocumentSymbolRequest.method = 'textDocument/documentSymbol';\n  DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);\n})(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));\n/**\n * A request to provide commands for the given text document and range.\n */\nvar CodeActionRequest;\n(function (CodeActionRequest) {\n  CodeActionRequest.method = 'textDocument/codeAction';\n  CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);\n})(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));\n/**\n * Request to resolve additional information for a given code action.The request's\n * parameter is of type {@link CodeAction} the response\n * is of type {@link CodeAction} or a Thenable that resolves to such.\n */\nvar CodeActionResolveRequest;\n(function (CodeActionResolveRequest) {\n  CodeActionResolveRequest.method = 'codeAction/resolve';\n  CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);\n})(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));\n/**\n * A request to list project-wide symbols matching the query string given\n * by the {@link WorkspaceSymbolParams}. The response is\n * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that\n * resolves to such.\n *\n * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n *  need to advertise support for WorkspaceSymbols via the client capability\n *  `workspace.symbol.resolveSupport`.\n *\n */\nvar WorkspaceSymbolRequest;\n(function (WorkspaceSymbolRequest) {\n  WorkspaceSymbolRequest.method = 'workspace/symbol';\n  WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);\n})(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));\n/**\n * A request to resolve the range inside the workspace\n * symbol's location.\n *\n * @since 3.17.0\n */\nvar WorkspaceSymbolResolveRequest;\n(function (WorkspaceSymbolResolveRequest) {\n  WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';\n  WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);\n})(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));\n/**\n * A request to provide code lens for the given text document.\n */\nvar CodeLensRequest;\n(function (CodeLensRequest) {\n  CodeLensRequest.method = 'textDocument/codeLens';\n  CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);\n})(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));\n/**\n * A request to resolve a command for a given code lens.\n */\nvar CodeLensResolveRequest;\n(function (CodeLensResolveRequest) {\n  CodeLensResolveRequest.method = 'codeLens/resolve';\n  CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);\n})(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));\n/**\n * A request to refresh all code actions\n *\n * @since 3.16.0\n */\nvar CodeLensRefreshRequest;\n(function (CodeLensRefreshRequest) {\n  CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;\n  CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n  CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);\n})(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));\n/**\n * A request to provide document links\n */\nvar DocumentLinkRequest;\n(function (DocumentLinkRequest) {\n  DocumentLinkRequest.method = 'textDocument/documentLink';\n  DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);\n})(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));\n/**\n * Request to resolve additional information for a given document link. The request's\n * parameter is of type {@link DocumentLink} the response\n * is of type {@link DocumentLink} or a Thenable that resolves to such.\n */\nvar DocumentLinkResolveRequest;\n(function (DocumentLinkResolveRequest) {\n  DocumentLinkResolveRequest.method = 'documentLink/resolve';\n  DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);\n})(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));\n/**\n * A request to format a whole document.\n */\nvar DocumentFormattingRequest;\n(function (DocumentFormattingRequest) {\n  DocumentFormattingRequest.method = 'textDocument/formatting';\n  DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);\n})(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));\n/**\n * A request to format a range in a document.\n */\nvar DocumentRangeFormattingRequest;\n(function (DocumentRangeFormattingRequest) {\n  DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';\n  DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);\n})(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));\n/**\n * A request to format ranges in a document.\n *\n * @since 3.18.0\n * @proposed\n */\nvar DocumentRangesFormattingRequest;\n(function (DocumentRangesFormattingRequest) {\n  DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';\n  DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);\n})(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));\n/**\n * A request to format a document on type.\n */\nvar DocumentOnTypeFormattingRequest;\n(function (DocumentOnTypeFormattingRequest) {\n  DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';\n  DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);\n})(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));\n//---- Rename ----------------------------------------------\nvar PrepareSupportDefaultBehavior;\n(function (PrepareSupportDefaultBehavior) {\n  /**\n   * The client's default behavior is to select the identifier\n   * according the to language's syntax rule.\n   */\n  PrepareSupportDefaultBehavior.Identifier = 1;\n})(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));\n/**\n * A request to rename a symbol.\n */\nvar RenameRequest;\n(function (RenameRequest) {\n  RenameRequest.method = 'textDocument/rename';\n  RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);\n})(RenameRequest || (exports.RenameRequest = RenameRequest = {}));\n/**\n * A request to test and perform the setup necessary for a rename.\n *\n * @since 3.16 - support for default behavior\n */\nvar PrepareRenameRequest;\n(function (PrepareRenameRequest) {\n  PrepareRenameRequest.method = 'textDocument/prepareRename';\n  PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);\n})(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));\n/**\n * A request send from the client to the server to execute a command. The request might return\n * a workspace edit which the client will apply to the workspace.\n */\nvar ExecuteCommandRequest;\n(function (ExecuteCommandRequest) {\n  ExecuteCommandRequest.method = 'workspace/executeCommand';\n  ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n  ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);\n})(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));\n/**\n * A request sent from the server to the client to modified certain resources.\n */\nvar ApplyWorkspaceEditRequest;\n(function (ApplyWorkspaceEditRequest) {\n  ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';\n  ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n  ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');\n})(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","WorkspaceSymbolRequest","CodeActionResolveRequest","CodeActionRequest","DocumentSymbolRequest","DocumentHighlightRequest","ReferencesRequest","DefinitionRequest","SignatureHelpRequest","SignatureHelpTriggerKind","HoverRequest","CompletionResolveRequest","CompletionRequest","CompletionTriggerKind","PublishDiagnosticsNotification","WatchKind","RelativePattern","FileChangeType","DidChangeWatchedFilesNotification","WillSaveTextDocumentWaitUntilRequest","WillSaveTextDocumentNotification","TextDocumentSaveReason","DidSaveTextDocumentNotification","DidCloseTextDocumentNotification","DidChangeTextDocumentNotification","TextDocumentContentChangeEvent","DidOpenTextDocumentNotification","TextDocumentSyncKind","TelemetryEventNotification","LogMessageNotification","ShowMessageRequest","ShowMessageNotification","MessageType","DidChangeConfigurationNotification","ExitNotification","ShutdownRequest","InitializedNotification","InitializeErrorCodes","InitializeRequest","WorkDoneProgressOptions","TextDocumentRegistrationOptions","StaticRegistrationOptions","PositionEncodingKind","FailureHandlingKind","ResourceOperationKind","UnregistrationRequest","RegistrationRequest","DocumentSelector","NotebookCellTextDocumentFilter","NotebookDocumentFilter","TextDocumentFilter","MonikerRequest","MonikerKind","UniquenessLevel","WillDeleteFilesRequest","DidDeleteFilesNotification","WillRenameFilesRequest","DidRenameFilesNotification","WillCreateFilesRequest","DidCreateFilesNotification","FileOperationPatternKind","LinkedEditingRangeRequest","ShowDocumentRequest","SemanticTokensRegistrationType","SemanticTokensRefreshRequest","SemanticTokensRangeRequest","SemanticTokensDeltaRequest","SemanticTokensRequest","TokenFormat","CallHierarchyPrepareRequest","CallHierarchyOutgoingCallsRequest","CallHierarchyIncomingCallsRequest","WorkDoneProgressCancelNotification","WorkDoneProgressCreateRequest","WorkDoneProgress","SelectionRangeRequest","DeclarationRequest","FoldingRangeRefreshRequest","FoldingRangeRequest","ColorPresentationRequest","DocumentColorRequest","ConfigurationRequest","DidChangeWorkspaceFoldersNotification","WorkspaceFoldersRequest","TypeDefinitionRequest","ImplementationRequest","ApplyWorkspaceEditRequest","ExecuteCommandRequest","PrepareRenameRequest","RenameRequest","PrepareSupportDefaultBehavior","DocumentOnTypeFormattingRequest","DocumentRangesFormattingRequest","DocumentRangeFormattingRequest","DocumentFormattingRequest","DocumentLinkResolveRequest","DocumentLinkRequest","CodeLensRefreshRequest","CodeLensResolveRequest","CodeLensRequest","WorkspaceSymbolResolveRequest","InlineCompletionRequest","DidCloseNotebookDocumentNotification","DidSaveNotebookDocumentNotification","DidChangeNotebookDocumentNotification","NotebookCellArrayChange","DidOpenNotebookDocumentNotification","NotebookDocumentSyncRegistrationType","NotebookDocument","NotebookCell","ExecutionSummary","NotebookCellKind","DiagnosticRefreshRequest","WorkspaceDiagnosticRequest","DocumentDiagnosticRequest","DocumentDiagnosticReportKind","DiagnosticServerCancellationData","InlayHintRefreshRequest","InlayHintResolveRequest","InlayHintRequest","InlineValueRefreshRequest","InlineValueRequest","TypeHierarchySupertypesRequest","TypeHierarchySubtypesRequest","TypeHierarchyPrepareRequest","messages_1","require","vscode_languageserver_types_1","Is","protocol_implementation_1","enumerable","get","protocol_typeDefinition_1","protocol_workspaceFolder_1","protocol_configuration_1","protocol_colorProvider_1","protocol_foldingRange_1","protocol_declaration_1","protocol_selectionRange_1","protocol_progress_1","protocol_callHierarchy_1","protocol_semanticTokens_1","protocol_showDocument_1","protocol_linkedEditingRange_1","protocol_fileOperations_1","protocol_moniker_1","protocol_typeHierarchy_1","protocol_inlineValue_1","protocol_inlayHint_1","protocol_diagnostic_1","protocol_notebook_1","protocol_inlineCompletion_1","__noDynamicImport","is","candidate","string","language","scheme","pattern","objectLiteral","notebookType","notebook","undefined","Array","isArray","elem","method","messageDirection","MessageDirection","serverToClient","type","ProtocolRequestType","Create","Rename","Delete","Abort","Transactional","TextOnlyTransactional","Undo","UTF8","UTF16","UTF32","hasId","id","length","documentSelector","workDoneProgress","boolean","hasWorkDoneProgress","clientToServer","unknownProtocolVersion","ProtocolNotificationType","ProtocolRequestType0","ProtocolNotificationType0","Error","Warning","Info","Log","Debug","None","Full","Incremental","isIncremental","event","text","range","rangeLength","isFull","Manual","AfterDelay","FocusOut","Created","Changed","Deleted","URI","baseUri","WorkspaceFolder","Change","Invoked","TriggerCharacter","TriggerForIncompleteCompletions","ContentChange","Identifier"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageserver-protocol/lib/common/protocol.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;\nexports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;\nexports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;\nconst messages_1 = require(\"./messages\");\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst protocol_implementation_1 = require(\"./protocol.implementation\");\nObject.defineProperty(exports, \"ImplementationRequest\", { enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } });\nconst protocol_typeDefinition_1 = require(\"./protocol.typeDefinition\");\nObject.defineProperty(exports, \"TypeDefinitionRequest\", { enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } });\nconst protocol_workspaceFolder_1 = require(\"./protocol.workspaceFolder\");\nObject.defineProperty(exports, \"WorkspaceFoldersRequest\", { enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } });\nObject.defineProperty(exports, \"DidChangeWorkspaceFoldersNotification\", { enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } });\nconst protocol_configuration_1 = require(\"./protocol.configuration\");\nObject.defineProperty(exports, \"ConfigurationRequest\", { enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } });\nconst protocol_colorProvider_1 = require(\"./protocol.colorProvider\");\nObject.defineProperty(exports, \"DocumentColorRequest\", { enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } });\nObject.defineProperty(exports, \"ColorPresentationRequest\", { enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } });\nconst protocol_foldingRange_1 = require(\"./protocol.foldingRange\");\nObject.defineProperty(exports, \"FoldingRangeRequest\", { enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } });\nObject.defineProperty(exports, \"FoldingRangeRefreshRequest\", { enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRefreshRequest; } });\nconst protocol_declaration_1 = require(\"./protocol.declaration\");\nObject.defineProperty(exports, \"DeclarationRequest\", { enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } });\nconst protocol_selectionRange_1 = require(\"./protocol.selectionRange\");\nObject.defineProperty(exports, \"SelectionRangeRequest\", { enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } });\nconst protocol_progress_1 = require(\"./protocol.progress\");\nObject.defineProperty(exports, \"WorkDoneProgress\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } });\nObject.defineProperty(exports, \"WorkDoneProgressCreateRequest\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } });\nObject.defineProperty(exports, \"WorkDoneProgressCancelNotification\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } });\nconst protocol_callHierarchy_1 = require(\"./protocol.callHierarchy\");\nObject.defineProperty(exports, \"CallHierarchyIncomingCallsRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } });\nObject.defineProperty(exports, \"CallHierarchyOutgoingCallsRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } });\nObject.defineProperty(exports, \"CallHierarchyPrepareRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } });\nconst protocol_semanticTokens_1 = require(\"./protocol.semanticTokens\");\nObject.defineProperty(exports, \"TokenFormat\", { enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } });\nObject.defineProperty(exports, \"SemanticTokensRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } });\nObject.defineProperty(exports, \"SemanticTokensDeltaRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRangeRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRefreshRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRegistrationType\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } });\nconst protocol_showDocument_1 = require(\"./protocol.showDocument\");\nObject.defineProperty(exports, \"ShowDocumentRequest\", { enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } });\nconst protocol_linkedEditingRange_1 = require(\"./protocol.linkedEditingRange\");\nObject.defineProperty(exports, \"LinkedEditingRangeRequest\", { enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } });\nconst protocol_fileOperations_1 = require(\"./protocol.fileOperations\");\nObject.defineProperty(exports, \"FileOperationPatternKind\", { enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } });\nObject.defineProperty(exports, \"DidCreateFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } });\nObject.defineProperty(exports, \"WillCreateFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } });\nObject.defineProperty(exports, \"DidRenameFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } });\nObject.defineProperty(exports, \"WillRenameFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } });\nObject.defineProperty(exports, \"DidDeleteFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } });\nObject.defineProperty(exports, \"WillDeleteFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } });\nconst protocol_moniker_1 = require(\"./protocol.moniker\");\nObject.defineProperty(exports, \"UniquenessLevel\", { enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } });\nObject.defineProperty(exports, \"MonikerKind\", { enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } });\nObject.defineProperty(exports, \"MonikerRequest\", { enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } });\nconst protocol_typeHierarchy_1 = require(\"./protocol.typeHierarchy\");\nObject.defineProperty(exports, \"TypeHierarchyPrepareRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } });\nObject.defineProperty(exports, \"TypeHierarchySubtypesRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } });\nObject.defineProperty(exports, \"TypeHierarchySupertypesRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } });\nconst protocol_inlineValue_1 = require(\"./protocol.inlineValue\");\nObject.defineProperty(exports, \"InlineValueRequest\", { enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } });\nObject.defineProperty(exports, \"InlineValueRefreshRequest\", { enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } });\nconst protocol_inlayHint_1 = require(\"./protocol.inlayHint\");\nObject.defineProperty(exports, \"InlayHintRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } });\nObject.defineProperty(exports, \"InlayHintResolveRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } });\nObject.defineProperty(exports, \"InlayHintRefreshRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } });\nconst protocol_diagnostic_1 = require(\"./protocol.diagnostic\");\nObject.defineProperty(exports, \"DiagnosticServerCancellationData\", { enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } });\nObject.defineProperty(exports, \"DocumentDiagnosticReportKind\", { enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } });\nObject.defineProperty(exports, \"DocumentDiagnosticRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } });\nObject.defineProperty(exports, \"WorkspaceDiagnosticRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } });\nObject.defineProperty(exports, \"DiagnosticRefreshRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } });\nconst protocol_notebook_1 = require(\"./protocol.notebook\");\nObject.defineProperty(exports, \"NotebookCellKind\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } });\nObject.defineProperty(exports, \"ExecutionSummary\", { enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } });\nObject.defineProperty(exports, \"NotebookCell\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } });\nObject.defineProperty(exports, \"NotebookDocument\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } });\nObject.defineProperty(exports, \"NotebookDocumentSyncRegistrationType\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } });\nObject.defineProperty(exports, \"DidOpenNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"NotebookCellArrayChange\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } });\nObject.defineProperty(exports, \"DidChangeNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"DidSaveNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"DidCloseNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } });\nconst protocol_inlineCompletion_1 = require(\"./protocol.inlineCompletion\");\nObject.defineProperty(exports, \"InlineCompletionRequest\", { enumerable: true, get: function () { return protocol_inlineCompletion_1.InlineCompletionRequest; } });\n// @ts-ignore: to avoid inlining LocationLink as dynamic import\nlet __noDynamicImport;\n/**\n * The TextDocumentFilter namespace provides helper functions to work with\n * {@link TextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar TextDocumentFilter;\n(function (TextDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern));\n    }\n    TextDocumentFilter.is = is;\n})(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));\n/**\n * The NotebookDocumentFilter namespace provides helper functions to work with\n * {@link NotebookDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookDocumentFilter;\n(function (NotebookDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));\n    }\n    NotebookDocumentFilter.is = is;\n})(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));\n/**\n * The NotebookCellTextDocumentFilter namespace provides helper functions to work with\n * {@link NotebookCellTextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookCellTextDocumentFilter;\n(function (NotebookCellTextDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))\n            && (candidate.language === undefined || Is.string(candidate.language));\n    }\n    NotebookCellTextDocumentFilter.is = is;\n})(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));\n/**\n * The DocumentSelector namespace provides helper functions to work with\n * {@link DocumentSelector}s.\n */\nvar DocumentSelector;\n(function (DocumentSelector) {\n    function is(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        for (let elem of value) {\n            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    DocumentSelector.is = is;\n})(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));\n/**\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\n * handler on the client side.\n */\nvar RegistrationRequest;\n(function (RegistrationRequest) {\n    RegistrationRequest.method = 'client/registerCapability';\n    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);\n})(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));\n/**\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\n * handler on the client side.\n */\nvar UnregistrationRequest;\n(function (UnregistrationRequest) {\n    UnregistrationRequest.method = 'client/unregisterCapability';\n    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);\n})(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));\nvar ResourceOperationKind;\n(function (ResourceOperationKind) {\n    /**\n     * Supports creating new files and folders.\n     */\n    ResourceOperationKind.Create = 'create';\n    /**\n     * Supports renaming existing files and folders.\n     */\n    ResourceOperationKind.Rename = 'rename';\n    /**\n     * Supports deleting existing files and folders.\n     */\n    ResourceOperationKind.Delete = 'delete';\n})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));\nvar FailureHandlingKind;\n(function (FailureHandlingKind) {\n    /**\n     * Applying the workspace change is simply aborted if one of the changes provided\n     * fails. All operations executed before the failing operation stay executed.\n     */\n    FailureHandlingKind.Abort = 'abort';\n    /**\n     * All operations are executed transactional. That means they either all\n     * succeed or no changes at all are applied to the workspace.\n     */\n    FailureHandlingKind.Transactional = 'transactional';\n    /**\n     * If the workspace edit contains only textual file changes they are executed transactional.\n     * If resource changes (create, rename or delete file) are part of the change the failure\n     * handling strategy is abort.\n     */\n    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\n    /**\n     * The client tries to undo the operations already executed. But there is no\n     * guarantee that this is succeeding.\n     */\n    FailureHandlingKind.Undo = 'undo';\n})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));\n/**\n * A set of predefined position encoding kinds.\n *\n * @since 3.17.0\n */\nvar PositionEncodingKind;\n(function (PositionEncodingKind) {\n    /**\n     * Character offsets count UTF-8 code units (e.g. bytes).\n     */\n    PositionEncodingKind.UTF8 = 'utf-8';\n    /**\n     * Character offsets count UTF-16 code units.\n     *\n     * This is the default and must always be supported\n     * by servers\n     */\n    PositionEncodingKind.UTF16 = 'utf-16';\n    /**\n     * Character offsets count UTF-32 code units.\n     *\n     * Implementation note: these are the same as Unicode codepoints,\n     * so this `PositionEncodingKind` may also be used for an\n     * encoding-agnostic representation of character offsets.\n     */\n    PositionEncodingKind.UTF32 = 'utf-32';\n})(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));\n/**\n * The StaticRegistrationOptions namespace provides helper functions to work with\n * {@link StaticRegistrationOptions} literals.\n */\nvar StaticRegistrationOptions;\n(function (StaticRegistrationOptions) {\n    function hasId(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.id) && candidate.id.length > 0;\n    }\n    StaticRegistrationOptions.hasId = hasId;\n})(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));\n/**\n * The TextDocumentRegistrationOptions namespace provides helper functions to work with\n * {@link TextDocumentRegistrationOptions} literals.\n */\nvar TextDocumentRegistrationOptions;\n(function (TextDocumentRegistrationOptions) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));\n    }\n    TextDocumentRegistrationOptions.is = is;\n})(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));\n/**\n * The WorkDoneProgressOptions namespace provides helper functions to work with\n * {@link WorkDoneProgressOptions} literals.\n */\nvar WorkDoneProgressOptions;\n(function (WorkDoneProgressOptions) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));\n    }\n    WorkDoneProgressOptions.is = is;\n    function hasWorkDoneProgress(value) {\n        const candidate = value;\n        return candidate && Is.boolean(candidate.workDoneProgress);\n    }\n    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;\n})(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));\n/**\n * The initialize request is sent from the client to the server.\n * It is sent once as the request after starting up the server.\n * The requests parameter is of type {@link InitializeParams}\n * the response if of type {@link InitializeResult} of a Thenable that\n * resolves to such.\n */\nvar InitializeRequest;\n(function (InitializeRequest) {\n    InitializeRequest.method = 'initialize';\n    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);\n})(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));\n/**\n * Known error codes for an `InitializeErrorCodes`;\n */\nvar InitializeErrorCodes;\n(function (InitializeErrorCodes) {\n    /**\n     * If the protocol version provided by the client can't be handled by the server.\n     *\n     * @deprecated This initialize error got replaced by client capabilities. There is\n     * no version handshake in version 3.0x\n     */\n    InitializeErrorCodes.unknownProtocolVersion = 1;\n})(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));\n/**\n * The initialized notification is sent from the client to the\n * server after the client is fully initialized and the server\n * is allowed to send requests from the server to the client.\n */\nvar InitializedNotification;\n(function (InitializedNotification) {\n    InitializedNotification.method = 'initialized';\n    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);\n})(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));\n//---- Shutdown Method ----\n/**\n * A shutdown request is sent from the client to the server.\n * It is sent once when the client decides to shutdown the\n * server. The only notification that is sent after a shutdown request\n * is the exit event.\n */\nvar ShutdownRequest;\n(function (ShutdownRequest) {\n    ShutdownRequest.method = 'shutdown';\n    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);\n})(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));\n//---- Exit Notification ----\n/**\n * The exit event is sent from the client to the server to\n * ask the server to exit its process.\n */\nvar ExitNotification;\n(function (ExitNotification) {\n    ExitNotification.method = 'exit';\n    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);\n})(ExitNotification || (exports.ExitNotification = ExitNotification = {}));\n/**\n * The configuration change notification is sent from the client to the server\n * when the client's configuration has changed. The notification contains\n * the changed configuration as defined by the language client.\n */\nvar DidChangeConfigurationNotification;\n(function (DidChangeConfigurationNotification) {\n    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';\n    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);\n})(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));\n//---- Message show and log notifications ----\n/**\n * The message type\n */\nvar MessageType;\n(function (MessageType) {\n    /**\n     * An error message.\n     */\n    MessageType.Error = 1;\n    /**\n     * A warning message.\n     */\n    MessageType.Warning = 2;\n    /**\n     * An information message.\n     */\n    MessageType.Info = 3;\n    /**\n     * A log message.\n     */\n    MessageType.Log = 4;\n    /**\n     * A debug message.\n     *\n     * @since 3.18.0\n     */\n    MessageType.Debug = 5;\n})(MessageType || (exports.MessageType = MessageType = {}));\n/**\n * The show message notification is sent from a server to a client to ask\n * the client to display a particular message in the user interface.\n */\nvar ShowMessageNotification;\n(function (ShowMessageNotification) {\n    ShowMessageNotification.method = 'window/showMessage';\n    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);\n})(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));\n/**\n * The show message request is sent from the server to the client to show a message\n * and a set of options actions to the user.\n */\nvar ShowMessageRequest;\n(function (ShowMessageRequest) {\n    ShowMessageRequest.method = 'window/showMessageRequest';\n    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);\n})(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));\n/**\n * The log message notification is sent from the server to the client to ask\n * the client to log a particular message.\n */\nvar LogMessageNotification;\n(function (LogMessageNotification) {\n    LogMessageNotification.method = 'window/logMessage';\n    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);\n})(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));\n//---- Telemetry notification\n/**\n * The telemetry event notification is sent from the server to the client to ask\n * the client to log telemetry data.\n */\nvar TelemetryEventNotification;\n(function (TelemetryEventNotification) {\n    TelemetryEventNotification.method = 'telemetry/event';\n    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);\n})(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));\n/**\n * Defines how the host (editor) should sync\n * document changes to the language server.\n */\nvar TextDocumentSyncKind;\n(function (TextDocumentSyncKind) {\n    /**\n     * Documents should not be synced at all.\n     */\n    TextDocumentSyncKind.None = 0;\n    /**\n     * Documents are synced by always sending the full content\n     * of the document.\n     */\n    TextDocumentSyncKind.Full = 1;\n    /**\n     * Documents are synced by sending the full content on open.\n     * After that only incremental updates to the document are\n     * send.\n     */\n    TextDocumentSyncKind.Incremental = 2;\n})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));\n/**\n * The document open notification is sent from the client to the server to signal\n * newly opened text documents. The document's truth is now managed by the client\n * and the server must not try to read the document's truth using the document's\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\n * mean that its content is presented in an editor. An open notification must not\n * be sent more than once without a corresponding close notification send before.\n * This means open and close notification must be balanced and the max open count\n * is one.\n */\nvar DidOpenTextDocumentNotification;\n(function (DidOpenTextDocumentNotification) {\n    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';\n    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);\n})(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));\nvar TextDocumentContentChangeEvent;\n(function (TextDocumentContentChangeEvent) {\n    /**\n     * Checks whether the information describes a delta event.\n     */\n    function isIncremental(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    TextDocumentContentChangeEvent.isIncremental = isIncremental;\n    /**\n     * Checks whether the information describes a full replacement event.\n     */\n    function isFull(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n    TextDocumentContentChangeEvent.isFull = isFull;\n})(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));\n/**\n * The document change notification is sent from the client to the server to signal\n * changes to a text document.\n */\nvar DidChangeTextDocumentNotification;\n(function (DidChangeTextDocumentNotification) {\n    DidChangeTextDocumentNotification.method = 'textDocument/didChange';\n    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);\n})(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));\n/**\n * The document close notification is sent from the client to the server when\n * the document got closed in the client. The document's truth now exists where\n * the document's uri points to (e.g. if the document's uri is a file uri the\n * truth now exists on disk). As with the open notification the close notification\n * is about managing the document's content. Receiving a close notification\n * doesn't mean that the document was open in an editor before. A close\n * notification requires a previous open notification to be sent.\n */\nvar DidCloseTextDocumentNotification;\n(function (DidCloseTextDocumentNotification) {\n    DidCloseTextDocumentNotification.method = 'textDocument/didClose';\n    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);\n})(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));\n/**\n * The document save notification is sent from the client to the server when\n * the document got saved in the client.\n */\nvar DidSaveTextDocumentNotification;\n(function (DidSaveTextDocumentNotification) {\n    DidSaveTextDocumentNotification.method = 'textDocument/didSave';\n    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);\n})(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nvar TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));\n/**\n * A document will save notification is sent from the client to the server before\n * the document is actually saved.\n */\nvar WillSaveTextDocumentNotification;\n(function (WillSaveTextDocumentNotification) {\n    WillSaveTextDocumentNotification.method = 'textDocument/willSave';\n    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);\n})(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));\n/**\n * A document will save request is sent from the client to the server before\n * the document is actually saved. The request can return an array of TextEdits\n * which will be applied to the text document before it is saved. Please note that\n * clients might drop results if computing the text edits took too long or if a\n * server constantly fails on this request. This is done to keep the save fast and\n * reliable.\n */\nvar WillSaveTextDocumentWaitUntilRequest;\n(function (WillSaveTextDocumentWaitUntilRequest) {\n    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';\n    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);\n})(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));\n/**\n * The watched files notification is sent from the client to the server when\n * the client detects changes to file watched by the language client.\n */\nvar DidChangeWatchedFilesNotification;\n(function (DidChangeWatchedFilesNotification) {\n    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';\n    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);\n})(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));\n/**\n * The file event type\n */\nvar FileChangeType;\n(function (FileChangeType) {\n    /**\n     * The file got created.\n     */\n    FileChangeType.Created = 1;\n    /**\n     * The file got changed.\n     */\n    FileChangeType.Changed = 2;\n    /**\n     * The file got deleted.\n     */\n    FileChangeType.Deleted = 3;\n})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));\nvar RelativePattern;\n(function (RelativePattern) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);\n    }\n    RelativePattern.is = is;\n})(RelativePattern || (exports.RelativePattern = RelativePattern = {}));\nvar WatchKind;\n(function (WatchKind) {\n    /**\n     * Interested in create events.\n     */\n    WatchKind.Create = 1;\n    /**\n     * Interested in change events\n     */\n    WatchKind.Change = 2;\n    /**\n     * Interested in delete events\n     */\n    WatchKind.Delete = 4;\n})(WatchKind || (exports.WatchKind = WatchKind = {}));\n/**\n * Diagnostics notification are sent from the server to the client to signal\n * results of validation runs.\n */\nvar PublishDiagnosticsNotification;\n(function (PublishDiagnosticsNotification) {\n    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';\n    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);\n})(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));\n/**\n * How a completion was triggered\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    /**\n     * Completion was triggered by typing an identifier (24x7 code\n     * complete), manual invocation (e.g Ctrl+Space) or via API.\n     */\n    CompletionTriggerKind.Invoked = 1;\n    /**\n     * Completion was triggered by a trigger character specified by\n     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n     */\n    CompletionTriggerKind.TriggerCharacter = 2;\n    /**\n     * Completion was re-triggered as current completion list is incomplete\n     */\n    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\n})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));\n/**\n * Request to request completion at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response\n * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\n * or a Thenable that resolves to such.\n *\n * The request can delay the computation of the {@link CompletionItem.detail `detail`}\n * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\n */\nvar CompletionRequest;\n(function (CompletionRequest) {\n    CompletionRequest.method = 'textDocument/completion';\n    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);\n})(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));\n/**\n * Request to resolve additional information for a given completion item.The request's\n * parameter is of type {@link CompletionItem} the response\n * is of type {@link CompletionItem} or a Thenable that resolves to such.\n */\nvar CompletionResolveRequest;\n(function (CompletionResolveRequest) {\n    CompletionResolveRequest.method = 'completionItem/resolve';\n    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);\n})(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));\n/**\n * Request to request hover information at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response is of\n * type {@link Hover} or a Thenable that resolves to such.\n */\nvar HoverRequest;\n(function (HoverRequest) {\n    HoverRequest.method = 'textDocument/hover';\n    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);\n})(HoverRequest || (exports.HoverRequest = HoverRequest = {}));\n/**\n * How a signature help was triggered.\n *\n * @since 3.15.0\n */\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    /**\n     * Signature help was invoked manually by the user or by a command.\n     */\n    SignatureHelpTriggerKind.Invoked = 1;\n    /**\n     * Signature help was triggered by a trigger character.\n     */\n    SignatureHelpTriggerKind.TriggerCharacter = 2;\n    /**\n     * Signature help was triggered by the cursor moving or by the document content changing.\n     */\n    SignatureHelpTriggerKind.ContentChange = 3;\n})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));\nvar SignatureHelpRequest;\n(function (SignatureHelpRequest) {\n    SignatureHelpRequest.method = 'textDocument/signatureHelp';\n    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);\n})(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));\n/**\n * A request to resolve the definition location of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPosition}\n * the response is of either type {@link Definition} or a typed array of\n * {@link DefinitionLink} or a Thenable that resolves to such.\n */\nvar DefinitionRequest;\n(function (DefinitionRequest) {\n    DefinitionRequest.method = 'textDocument/definition';\n    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);\n})(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));\n/**\n * A request to resolve project-wide references for the symbol denoted\n * by the given text document position. The request's parameter is of\n * type {@link ReferenceParams} the response is of type\n * {@link Location Location[]} or a Thenable that resolves to such.\n */\nvar ReferencesRequest;\n(function (ReferencesRequest) {\n    ReferencesRequest.method = 'textDocument/references';\n    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);\n})(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));\n/**\n * Request to resolve a {@link DocumentHighlight} for a given\n * text document position. The request's parameter is of type {@link TextDocumentPosition}\n * the request response is an array of type {@link DocumentHighlight}\n * or a Thenable that resolves to such.\n */\nvar DocumentHighlightRequest;\n(function (DocumentHighlightRequest) {\n    DocumentHighlightRequest.method = 'textDocument/documentHighlight';\n    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);\n})(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));\n/**\n * A request to list all symbols found in a given text document. The request's\n * parameter is of type {@link TextDocumentIdentifier} the\n * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\n * that resolves to such.\n */\nvar DocumentSymbolRequest;\n(function (DocumentSymbolRequest) {\n    DocumentSymbolRequest.method = 'textDocument/documentSymbol';\n    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);\n})(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));\n/**\n * A request to provide commands for the given text document and range.\n */\nvar CodeActionRequest;\n(function (CodeActionRequest) {\n    CodeActionRequest.method = 'textDocument/codeAction';\n    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);\n})(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));\n/**\n * Request to resolve additional information for a given code action.The request's\n * parameter is of type {@link CodeAction} the response\n * is of type {@link CodeAction} or a Thenable that resolves to such.\n */\nvar CodeActionResolveRequest;\n(function (CodeActionResolveRequest) {\n    CodeActionResolveRequest.method = 'codeAction/resolve';\n    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);\n})(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));\n/**\n * A request to list project-wide symbols matching the query string given\n * by the {@link WorkspaceSymbolParams}. The response is\n * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that\n * resolves to such.\n *\n * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n *  need to advertise support for WorkspaceSymbols via the client capability\n *  `workspace.symbol.resolveSupport`.\n *\n */\nvar WorkspaceSymbolRequest;\n(function (WorkspaceSymbolRequest) {\n    WorkspaceSymbolRequest.method = 'workspace/symbol';\n    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);\n})(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));\n/**\n * A request to resolve the range inside the workspace\n * symbol's location.\n *\n * @since 3.17.0\n */\nvar WorkspaceSymbolResolveRequest;\n(function (WorkspaceSymbolResolveRequest) {\n    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';\n    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);\n})(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));\n/**\n * A request to provide code lens for the given text document.\n */\nvar CodeLensRequest;\n(function (CodeLensRequest) {\n    CodeLensRequest.method = 'textDocument/codeLens';\n    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);\n})(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));\n/**\n * A request to resolve a command for a given code lens.\n */\nvar CodeLensResolveRequest;\n(function (CodeLensResolveRequest) {\n    CodeLensResolveRequest.method = 'codeLens/resolve';\n    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);\n})(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));\n/**\n * A request to refresh all code actions\n *\n * @since 3.16.0\n */\nvar CodeLensRefreshRequest;\n(function (CodeLensRefreshRequest) {\n    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;\n    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);\n})(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));\n/**\n * A request to provide document links\n */\nvar DocumentLinkRequest;\n(function (DocumentLinkRequest) {\n    DocumentLinkRequest.method = 'textDocument/documentLink';\n    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);\n})(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));\n/**\n * Request to resolve additional information for a given document link. The request's\n * parameter is of type {@link DocumentLink} the response\n * is of type {@link DocumentLink} or a Thenable that resolves to such.\n */\nvar DocumentLinkResolveRequest;\n(function (DocumentLinkResolveRequest) {\n    DocumentLinkResolveRequest.method = 'documentLink/resolve';\n    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);\n})(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));\n/**\n * A request to format a whole document.\n */\nvar DocumentFormattingRequest;\n(function (DocumentFormattingRequest) {\n    DocumentFormattingRequest.method = 'textDocument/formatting';\n    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);\n})(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));\n/**\n * A request to format a range in a document.\n */\nvar DocumentRangeFormattingRequest;\n(function (DocumentRangeFormattingRequest) {\n    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';\n    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);\n})(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));\n/**\n * A request to format ranges in a document.\n *\n * @since 3.18.0\n * @proposed\n */\nvar DocumentRangesFormattingRequest;\n(function (DocumentRangesFormattingRequest) {\n    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';\n    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);\n})(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));\n/**\n * A request to format a document on type.\n */\nvar DocumentOnTypeFormattingRequest;\n(function (DocumentOnTypeFormattingRequest) {\n    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';\n    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);\n})(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));\n//---- Rename ----------------------------------------------\nvar PrepareSupportDefaultBehavior;\n(function (PrepareSupportDefaultBehavior) {\n    /**\n     * The client's default behavior is to select the identifier\n     * according the to language's syntax rule.\n     */\n    PrepareSupportDefaultBehavior.Identifier = 1;\n})(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));\n/**\n * A request to rename a symbol.\n */\nvar RenameRequest;\n(function (RenameRequest) {\n    RenameRequest.method = 'textDocument/rename';\n    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);\n})(RenameRequest || (exports.RenameRequest = RenameRequest = {}));\n/**\n * A request to test and perform the setup necessary for a rename.\n *\n * @since 3.16 - support for default behavior\n */\nvar PrepareRenameRequest;\n(function (PrepareRenameRequest) {\n    PrepareRenameRequest.method = 'textDocument/prepareRename';\n    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);\n})(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));\n/**\n * A request send from the client to the server to execute a command. The request might return\n * a workspace edit which the client will apply to the workspace.\n */\nvar ExecuteCommandRequest;\n(function (ExecuteCommandRequest) {\n    ExecuteCommandRequest.method = 'workspace/executeCommand';\n    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);\n})(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));\n/**\n * A request sent from the server to the client to modified certain resources.\n */\nvar ApplyWorkspaceEditRequest;\n(function (ApplyWorkspaceEditRequest) {\n    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';\n    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');\n})(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}