{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FoldingRangeFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass FoldingRangeFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.FoldingRangeRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'foldingRange');\n    capability.dynamicRegistration = true;\n    capability.rangeLimit = 5000;\n    capability.lineFoldingOnly = true;\n    capability.foldingRangeKind = {\n      valueSet: [vscode_languageserver_protocol_1.FoldingRangeKind.Comment, vscode_languageserver_protocol_1.FoldingRangeKind.Imports, vscode_languageserver_protocol_1.FoldingRangeKind.Region]\n    };\n    capability.foldingRange = {\n      collapsedText: false\n    };\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'foldingRange').refreshSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    this._client.onRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type, async () => {\n      for (const provider of this.getAllProviders()) {\n        provider.onDidChangeFoldingRange.fire();\n      }\n    });\n    let [id, options] = this.getRegistration(documentSelector, capabilities.foldingRangeProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const eventEmitter = new vscode_1.EventEmitter();\n    const provider = {\n      onDidChangeFoldingRanges: eventEmitter.event,\n      provideFoldingRanges: (document, context, token) => {\n        const client = this._client;\n        const provideFoldingRanges = (document, _, token) => {\n          const requestParams = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, requestParams, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asFoldingRanges(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideFoldingRanges ? middleware.provideFoldingRanges(document, context, token, provideFoldingRanges) : provideFoldingRanges(document, context, token);\n      }\n    };\n    return [vscode_1.languages.registerFoldingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), {\n      provider: provider,\n      onDidChangeFoldingRange: eventEmitter\n    }];\n  }\n}\nexports.FoldingRangeFeature = FoldingRangeFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","FoldingRangeFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","TextDocumentLanguageFeature","constructor","client","FoldingRangeRequest","type","fillClientCapabilities","capabilities","capability","ensure","dynamicRegistration","rangeLimit","lineFoldingOnly","foldingRangeKind","valueSet","FoldingRangeKind","Comment","Imports","Region","foldingRange","collapsedText","refreshSupport","initialize","documentSelector","_client","onRequest","FoldingRangeRefreshRequest","provider","getAllProviders","onDidChangeFoldingRange","fire","id","options","getRegistration","foldingRangeProvider","register","registerOptions","registerLanguageProvider","selector","eventEmitter","EventEmitter","onDidChangeFoldingRanges","event","provideFoldingRanges","document","context","token","_","requestParams","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","sendRequest","then","result","isCancellationRequested","protocol2CodeConverter","asFoldingRanges","error","handleFailedRequest","middleware","languages","registerFoldingRangeProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/foldingRange.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FoldingRangeFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass FoldingRangeFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.FoldingRangeRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'foldingRange');\n        capability.dynamicRegistration = true;\n        capability.rangeLimit = 5000;\n        capability.lineFoldingOnly = true;\n        capability.foldingRangeKind = { valueSet: [vscode_languageserver_protocol_1.FoldingRangeKind.Comment, vscode_languageserver_protocol_1.FoldingRangeKind.Imports, vscode_languageserver_protocol_1.FoldingRangeKind.Region] };\n        capability.foldingRange = { collapsedText: false };\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'foldingRange').refreshSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        this._client.onRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type, async () => {\n            for (const provider of this.getAllProviders()) {\n                provider.onDidChangeFoldingRange.fire();\n            }\n        });\n        let [id, options] = this.getRegistration(documentSelector, capabilities.foldingRangeProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const eventEmitter = new vscode_1.EventEmitter();\n        const provider = {\n            onDidChangeFoldingRanges: eventEmitter.event,\n            provideFoldingRanges: (document, context, token) => {\n                const client = this._client;\n                const provideFoldingRanges = (document, _, token) => {\n                    const requestParams = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, requestParams, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asFoldingRanges(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideFoldingRanges\n                    ? middleware.provideFoldingRanges(document, context, token, provideFoldingRanges)\n                    : provideFoldingRanges(document, context, token);\n            }\n        };\n        return [vscode_1.languages.registerFoldingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), { provider: provider, onDidChangeFoldingRange: eventEmitter }];\n    }\n}\nexports.FoldingRangeFeature = FoldingRangeFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}