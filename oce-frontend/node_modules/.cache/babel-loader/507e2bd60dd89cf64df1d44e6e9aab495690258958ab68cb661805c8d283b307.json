{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst api_1 = require(\"../common/api\");\nclass MessageBuffer extends api_1.AbstractMessageBuffer {\n  constructor(encoding = 'utf-8') {\n    super(encoding);\n    this.asciiDecoder = new TextDecoder('ascii');\n  }\n  emptyBuffer() {\n    return MessageBuffer.emptyBuffer;\n  }\n  fromString(value, _encoding) {\n    return new TextEncoder().encode(value);\n  }\n  toString(value, encoding) {\n    if (encoding === 'ascii') {\n      return this.asciiDecoder.decode(value);\n    } else {\n      return new TextDecoder(encoding).decode(value);\n    }\n  }\n  asNative(buffer, length) {\n    if (length === undefined) {\n      return buffer;\n    } else {\n      return buffer.slice(0, length);\n    }\n  }\n  allocNative(length) {\n    return new Uint8Array(length);\n  }\n}\nMessageBuffer.emptyBuffer = new Uint8Array(0);\nclass ReadableStreamWrapper {\n  constructor(socket) {\n    this.socket = socket;\n    this._onData = new api_1.Emitter();\n    this._messageListener = event => {\n      const blob = event.data;\n      blob.arrayBuffer().then(buffer => {\n        this._onData.fire(new Uint8Array(buffer));\n      }, () => {\n        (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);\n      });\n    };\n    this.socket.addEventListener('message', this._messageListener);\n  }\n  onClose(listener) {\n    this.socket.addEventListener('close', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n  }\n  onError(listener) {\n    this.socket.addEventListener('error', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n  }\n  onEnd(listener) {\n    this.socket.addEventListener('end', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n  }\n  onData(listener) {\n    return this._onData.event(listener);\n  }\n}\nclass WritableStreamWrapper {\n  constructor(socket) {\n    this.socket = socket;\n  }\n  onClose(listener) {\n    this.socket.addEventListener('close', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n  }\n  onError(listener) {\n    this.socket.addEventListener('error', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n  }\n  onEnd(listener) {\n    this.socket.addEventListener('end', listener);\n    return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n  }\n  write(data, encoding) {\n    if (typeof data === 'string') {\n      if (encoding !== undefined && encoding !== 'utf-8') {\n        throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);\n      }\n      this.socket.send(data);\n    } else {\n      this.socket.send(data);\n    }\n    return Promise.resolve();\n  }\n  end() {\n    this.socket.close();\n  }\n}\nconst _textEncoder = new TextEncoder();\nconst _ril = Object.freeze({\n  messageBuffer: Object.freeze({\n    create: encoding => new MessageBuffer(encoding)\n  }),\n  applicationJson: Object.freeze({\n    encoder: Object.freeze({\n      name: 'application/json',\n      encode: (msg, options) => {\n        if (options.charset !== 'utf-8') {\n          throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);\n        }\n        return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));\n      }\n    }),\n    decoder: Object.freeze({\n      name: 'application/json',\n      decode: (buffer, options) => {\n        if (!(buffer instanceof Uint8Array)) {\n          throw new Error(`In a Browser environments only Uint8Arrays are supported.`);\n        }\n        return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));\n      }\n    })\n  }),\n  stream: Object.freeze({\n    asReadableStream: socket => new ReadableStreamWrapper(socket),\n    asWritableStream: socket => new WritableStreamWrapper(socket)\n  }),\n  console: console,\n  timer: Object.freeze({\n    setTimeout(callback, ms, ...args) {\n      const handle = setTimeout(callback, ms, ...args);\n      return {\n        dispose: () => clearTimeout(handle)\n      };\n    },\n    setImmediate(callback, ...args) {\n      const handle = setTimeout(callback, 0, ...args);\n      return {\n        dispose: () => clearTimeout(handle)\n      };\n    },\n    setInterval(callback, ms, ...args) {\n      const handle = setInterval(callback, ms, ...args);\n      return {\n        dispose: () => clearInterval(handle)\n      };\n    }\n  })\n});\nfunction RIL() {\n  return _ril;\n}\n(function (RIL) {\n  function install() {\n    api_1.RAL.install(_ril);\n  }\n  RIL.install = install;\n})(RIL || (RIL = {}));\nexports.default = RIL;","map":{"version":3,"names":["Object","defineProperty","exports","value","api_1","require","MessageBuffer","AbstractMessageBuffer","constructor","encoding","asciiDecoder","TextDecoder","emptyBuffer","fromString","_encoding","TextEncoder","encode","toString","decode","asNative","buffer","length","undefined","slice","allocNative","Uint8Array","ReadableStreamWrapper","socket","_onData","Emitter","_messageListener","event","blob","data","arrayBuffer","then","fire","RAL","console","error","addEventListener","onClose","listener","Disposable","create","removeEventListener","onError","onEnd","onData","WritableStreamWrapper","write","Error","send","Promise","resolve","end","close","_textEncoder","_ril","freeze","messageBuffer","applicationJson","encoder","name","msg","options","charset","JSON","stringify","decoder","parse","stream","asReadableStream","asWritableStream","timer","setTimeout","callback","ms","args","handle","dispose","clearTimeout","setImmediate","setInterval","clearInterval","RIL","install","default"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-jsonrpc/lib/browser/ril.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst api_1 = require(\"../common/api\");\nclass MessageBuffer extends api_1.AbstractMessageBuffer {\n    constructor(encoding = 'utf-8') {\n        super(encoding);\n        this.asciiDecoder = new TextDecoder('ascii');\n    }\n    emptyBuffer() {\n        return MessageBuffer.emptyBuffer;\n    }\n    fromString(value, _encoding) {\n        return (new TextEncoder()).encode(value);\n    }\n    toString(value, encoding) {\n        if (encoding === 'ascii') {\n            return this.asciiDecoder.decode(value);\n        }\n        else {\n            return (new TextDecoder(encoding)).decode(value);\n        }\n    }\n    asNative(buffer, length) {\n        if (length === undefined) {\n            return buffer;\n        }\n        else {\n            return buffer.slice(0, length);\n        }\n    }\n    allocNative(length) {\n        return new Uint8Array(length);\n    }\n}\nMessageBuffer.emptyBuffer = new Uint8Array(0);\nclass ReadableStreamWrapper {\n    constructor(socket) {\n        this.socket = socket;\n        this._onData = new api_1.Emitter();\n        this._messageListener = (event) => {\n            const blob = event.data;\n            blob.arrayBuffer().then((buffer) => {\n                this._onData.fire(new Uint8Array(buffer));\n            }, () => {\n                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);\n            });\n        };\n        this.socket.addEventListener('message', this._messageListener);\n    }\n    onClose(listener) {\n        this.socket.addEventListener('close', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n    }\n    onError(listener) {\n        this.socket.addEventListener('error', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n    }\n    onEnd(listener) {\n        this.socket.addEventListener('end', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n    }\n    onData(listener) {\n        return this._onData.event(listener);\n    }\n}\nclass WritableStreamWrapper {\n    constructor(socket) {\n        this.socket = socket;\n    }\n    onClose(listener) {\n        this.socket.addEventListener('close', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n    }\n    onError(listener) {\n        this.socket.addEventListener('error', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n    }\n    onEnd(listener) {\n        this.socket.addEventListener('end', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n    }\n    write(data, encoding) {\n        if (typeof data === 'string') {\n            if (encoding !== undefined && encoding !== 'utf-8') {\n                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);\n            }\n            this.socket.send(data);\n        }\n        else {\n            this.socket.send(data);\n        }\n        return Promise.resolve();\n    }\n    end() {\n        this.socket.close();\n    }\n}\nconst _textEncoder = new TextEncoder();\nconst _ril = Object.freeze({\n    messageBuffer: Object.freeze({\n        create: (encoding) => new MessageBuffer(encoding)\n    }),\n    applicationJson: Object.freeze({\n        encoder: Object.freeze({\n            name: 'application/json',\n            encode: (msg, options) => {\n                if (options.charset !== 'utf-8') {\n                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);\n                }\n                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));\n            }\n        }),\n        decoder: Object.freeze({\n            name: 'application/json',\n            decode: (buffer, options) => {\n                if (!(buffer instanceof Uint8Array)) {\n                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);\n                }\n                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));\n            }\n        })\n    }),\n    stream: Object.freeze({\n        asReadableStream: (socket) => new ReadableStreamWrapper(socket),\n        asWritableStream: (socket) => new WritableStreamWrapper(socket)\n    }),\n    console: console,\n    timer: Object.freeze({\n        setTimeout(callback, ms, ...args) {\n            const handle = setTimeout(callback, ms, ...args);\n            return { dispose: () => clearTimeout(handle) };\n        },\n        setImmediate(callback, ...args) {\n            const handle = setTimeout(callback, 0, ...args);\n            return { dispose: () => clearTimeout(handle) };\n        },\n        setInterval(callback, ms, ...args) {\n            const handle = setInterval(callback, ms, ...args);\n            return { dispose: () => clearInterval(handle) };\n        },\n    })\n});\nfunction RIL() {\n    return _ril;\n}\n(function (RIL) {\n    function install() {\n        api_1.RAL.install(_ril);\n    }\n    RIL.install = install;\n})(RIL || (RIL = {}));\nexports.default = RIL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}