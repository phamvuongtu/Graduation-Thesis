{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InlayHintsFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass InlayHintsFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.InlayHintRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    const inlayHint = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlayHint');\n    inlayHint.dynamicRegistration = true;\n    inlayHint.resolveSupport = {\n      properties: ['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command']\n    };\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlayHint').refreshSupport = true;\n  }\n  initialize(capabilities, documentSelector) {\n    this._client.onRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type, async () => {\n      for (const provider of this.getAllProviders()) {\n        provider.onDidChangeInlayHints.fire();\n      }\n    });\n    const [id, options] = this.getRegistration(documentSelector, capabilities.inlayHintProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const eventEmitter = new vscode_1.EventEmitter();\n    const provider = {\n      onDidChangeInlayHints: eventEmitter.event,\n      provideInlayHints: (document, viewPort, token) => {\n        const client = this._client;\n        const provideInlayHints = async (document, viewPort, token) => {\n          const requestParams = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n            range: client.code2ProtocolConverter.asRange(viewPort)\n          };\n          try {\n            const values = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, requestParams, token);\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return client.protocol2CodeConverter.asInlayHints(values, token);\n          } catch (error) {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, token, error, null);\n          }\n        };\n        const middleware = client.middleware;\n        return middleware.provideInlayHints ? middleware.provideInlayHints(document, viewPort, token, provideInlayHints) : provideInlayHints(document, viewPort, token);\n      }\n    };\n    provider.resolveInlayHint = options.resolveProvider === true ? (hint, token) => {\n      const client = this._client;\n      const resolveInlayHint = async (item, token) => {\n        try {\n          const value = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, client.code2ProtocolConverter.asInlayHint(item), token);\n          if (token.isCancellationRequested) {\n            return null;\n          }\n          const result = client.protocol2CodeConverter.asInlayHint(value, token);\n          return token.isCancellationRequested ? null : result;\n        } catch (error) {\n          return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, token, error, null);\n        }\n      };\n      const middleware = client.middleware;\n      return middleware.resolveInlayHint ? middleware.resolveInlayHint(hint, token, resolveInlayHint) : resolveInlayHint(hint, token);\n    } : undefined;\n    return [this.registerProvider(selector, provider), {\n      provider: provider,\n      onDidChangeInlayHints: eventEmitter\n    }];\n  }\n  registerProvider(selector, provider) {\n    return vscode_1.languages.registerInlayHintsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n  }\n}\nexports.InlayHintsFeature = InlayHintsFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","InlayHintsFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","TextDocumentLanguageFeature","constructor","client","InlayHintRequest","type","fillClientCapabilities","capabilities","inlayHint","ensure","dynamicRegistration","resolveSupport","properties","refreshSupport","initialize","documentSelector","_client","onRequest","InlayHintRefreshRequest","provider","getAllProviders","onDidChangeInlayHints","fire","id","options","getRegistration","inlayHintProvider","register","registerOptions","registerLanguageProvider","selector","eventEmitter","EventEmitter","event","provideInlayHints","document","viewPort","token","requestParams","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","range","asRange","values","sendRequest","isCancellationRequested","protocol2CodeConverter","asInlayHints","error","handleFailedRequest","middleware","resolveInlayHint","resolveProvider","hint","item","InlayHintResolveRequest","asInlayHint","result","undefined","registerProvider","languages","registerInlayHintsProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/inlayHint.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlayHintsFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass InlayHintsFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.InlayHintRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        const inlayHint = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlayHint');\n        inlayHint.dynamicRegistration = true;\n        inlayHint.resolveSupport = {\n            properties: ['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command']\n        };\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlayHint').refreshSupport = true;\n    }\n    initialize(capabilities, documentSelector) {\n        this._client.onRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type, async () => {\n            for (const provider of this.getAllProviders()) {\n                provider.onDidChangeInlayHints.fire();\n            }\n        });\n        const [id, options] = this.getRegistration(documentSelector, capabilities.inlayHintProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const eventEmitter = new vscode_1.EventEmitter();\n        const provider = {\n            onDidChangeInlayHints: eventEmitter.event,\n            provideInlayHints: (document, viewPort, token) => {\n                const client = this._client;\n                const provideInlayHints = async (document, viewPort, token) => {\n                    const requestParams = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                        range: client.code2ProtocolConverter.asRange(viewPort)\n                    };\n                    try {\n                        const values = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, requestParams, token);\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return client.protocol2CodeConverter.asInlayHints(values, token);\n                    }\n                    catch (error) {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, token, error, null);\n                    }\n                };\n                const middleware = client.middleware;\n                return middleware.provideInlayHints\n                    ? middleware.provideInlayHints(document, viewPort, token, provideInlayHints)\n                    : provideInlayHints(document, viewPort, token);\n            }\n        };\n        provider.resolveInlayHint = options.resolveProvider === true\n            ? (hint, token) => {\n                const client = this._client;\n                const resolveInlayHint = async (item, token) => {\n                    try {\n                        const value = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, client.code2ProtocolConverter.asInlayHint(item), token);\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        const result = client.protocol2CodeConverter.asInlayHint(value, token);\n                        return token.isCancellationRequested ? null : result;\n                    }\n                    catch (error) {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, token, error, null);\n                    }\n                };\n                const middleware = client.middleware;\n                return middleware.resolveInlayHint\n                    ? middleware.resolveInlayHint(hint, token, resolveInlayHint)\n                    : resolveInlayHint(hint, token);\n            }\n            : undefined;\n        return [this.registerProvider(selector, provider), { provider: provider, onDidChangeInlayHints: eventEmitter }];\n    }\n    registerProvider(selector, provider) {\n        return vscode_1.languages.registerInlayHintsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);\n    }\n}\nexports.InlayHintsFeature = InlayHintsFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}