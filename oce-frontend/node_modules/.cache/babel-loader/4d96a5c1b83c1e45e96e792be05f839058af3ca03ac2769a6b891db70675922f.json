{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProgressFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst progressPart_1 = require(\"./progressPart\");\nfunction ensure(target, key) {\n  if (target[key] === void 0) {\n    target[key] = Object.create(null);\n  }\n  return target[key];\n}\nclass ProgressFeature {\n  constructor(_client) {\n    this._client = _client;\n    this.activeParts = new Set();\n  }\n  getState() {\n    return {\n      kind: 'window',\n      id: vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.method,\n      registrations: this.activeParts.size > 0\n    };\n  }\n  fillClientCapabilities(capabilities) {\n    ensure(capabilities, 'window').workDoneProgress = true;\n  }\n  initialize() {\n    const client = this._client;\n    const deleteHandler = part => {\n      this.activeParts.delete(part);\n    };\n    const createHandler = params => {\n      this.activeParts.add(new progressPart_1.ProgressPart(this._client, params.token, deleteHandler));\n    };\n    client.onRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, createHandler);\n  }\n  clear() {\n    for (const part of this.activeParts) {\n      part.done();\n    }\n    this.activeParts.clear();\n  }\n}\nexports.ProgressFeature = ProgressFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","ProgressFeature","vscode_languageserver_protocol_1","require","progressPart_1","ensure","target","key","create","constructor","_client","activeParts","Set","getState","kind","id","WorkDoneProgressCreateRequest","method","registrations","size","fillClientCapabilities","capabilities","workDoneProgress","initialize","client","deleteHandler","part","delete","createHandler","params","add","ProgressPart","token","onRequest","type","clear","done"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/progress.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProgressFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst progressPart_1 = require(\"./progressPart\");\nfunction ensure(target, key) {\n    if (target[key] === void 0) {\n        target[key] = Object.create(null);\n    }\n    return target[key];\n}\nclass ProgressFeature {\n    constructor(_client) {\n        this._client = _client;\n        this.activeParts = new Set();\n    }\n    getState() {\n        return { kind: 'window', id: vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.method, registrations: this.activeParts.size > 0 };\n    }\n    fillClientCapabilities(capabilities) {\n        ensure(capabilities, 'window').workDoneProgress = true;\n    }\n    initialize() {\n        const client = this._client;\n        const deleteHandler = (part) => {\n            this.activeParts.delete(part);\n        };\n        const createHandler = (params) => {\n            this.activeParts.add(new progressPart_1.ProgressPart(this._client, params.token, deleteHandler));\n        };\n        client.onRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, createHandler);\n    }\n    clear() {\n        for (const part of this.activeParts) {\n            part.done();\n        }\n        this.activeParts.clear();\n    }\n}\nexports.ProgressFeature = ProgressFeature;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,gCAAgC,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAClF,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAChD,SAASE,MAAMA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACzB,IAAID,MAAM,CAACC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;IACxBD,MAAM,CAACC,GAAG,CAAC,GAAGV,MAAM,CAACW,MAAM,CAAC,IAAI,CAAC;EACrC;EACA,OAAOF,MAAM,CAACC,GAAG,CAAC;AACtB;AACA,MAAMN,eAAe,CAAC;EAClBQ,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EACAC,QAAQA,CAAA,EAAG;IACP,OAAO;MAAEC,IAAI,EAAE,QAAQ;MAAEC,EAAE,EAAEb,gCAAgC,CAACc,6BAA6B,CAACC,MAAM;MAAEC,aAAa,EAAE,IAAI,CAACP,WAAW,CAACQ,IAAI,GAAG;IAAE,CAAC;EAClJ;EACAC,sBAAsBA,CAACC,YAAY,EAAE;IACjChB,MAAM,CAACgB,YAAY,EAAE,QAAQ,CAAC,CAACC,gBAAgB,GAAG,IAAI;EAC1D;EACAC,UAAUA,CAAA,EAAG;IACT,MAAMC,MAAM,GAAG,IAAI,CAACd,OAAO;IAC3B,MAAMe,aAAa,GAAIC,IAAI,IAAK;MAC5B,IAAI,CAACf,WAAW,CAACgB,MAAM,CAACD,IAAI,CAAC;IACjC,CAAC;IACD,MAAME,aAAa,GAAIC,MAAM,IAAK;MAC9B,IAAI,CAAClB,WAAW,CAACmB,GAAG,CAAC,IAAI1B,cAAc,CAAC2B,YAAY,CAAC,IAAI,CAACrB,OAAO,EAAEmB,MAAM,CAACG,KAAK,EAAEP,aAAa,CAAC,CAAC;IACpG,CAAC;IACDD,MAAM,CAACS,SAAS,CAAC/B,gCAAgC,CAACc,6BAA6B,CAACkB,IAAI,EAAEN,aAAa,CAAC;EACxG;EACAO,KAAKA,CAAA,EAAG;IACJ,KAAK,MAAMT,IAAI,IAAI,IAAI,CAACf,WAAW,EAAE;MACjCe,IAAI,CAACU,IAAI,CAAC,CAAC;IACf;IACA,IAAI,CAACzB,WAAW,CAACwB,KAAK,CAAC,CAAC;EAC5B;AACJ;AACApC,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}