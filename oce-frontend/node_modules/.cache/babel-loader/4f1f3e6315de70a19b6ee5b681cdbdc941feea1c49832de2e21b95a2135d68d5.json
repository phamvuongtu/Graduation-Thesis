{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSystemWatcherFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass FileSystemWatcherFeature {\n  constructor(client, notifyFileEvent) {\n    this._client = client;\n    this._notifyFileEvent = notifyFileEvent;\n    this._watchers = new Map();\n  }\n  getState() {\n    return {\n      kind: 'workspace',\n      id: this.registrationType.method,\n      registrations: this._watchers.size > 0\n    };\n  }\n  get registrationType() {\n    return vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type;\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').dynamicRegistration = true;\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').relativePatternSupport = true;\n  }\n  initialize(_capabilities, _documentSelector) {}\n  register(data) {\n    if (!Array.isArray(data.registerOptions.watchers)) {\n      return;\n    }\n    const disposables = [];\n    for (const watcher of data.registerOptions.watchers) {\n      const globPattern = this._client.protocol2CodeConverter.asGlobPattern(watcher.globPattern);\n      if (globPattern === undefined) {\n        continue;\n      }\n      let watchCreate = true,\n        watchChange = true,\n        watchDelete = true;\n      if (watcher.kind !== undefined && watcher.kind !== null) {\n        watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0;\n        watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) !== 0;\n        watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) !== 0;\n      }\n      const fileSystemWatcher = vscode_1.workspace.createFileSystemWatcher(globPattern, !watchCreate, !watchChange, !watchDelete);\n      this.hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, disposables);\n      disposables.push(fileSystemWatcher);\n    }\n    this._watchers.set(data.id, disposables);\n  }\n  registerRaw(id, fileSystemWatchers) {\n    let disposables = [];\n    for (let fileSystemWatcher of fileSystemWatchers) {\n      this.hookListeners(fileSystemWatcher, true, true, true, disposables);\n    }\n    this._watchers.set(id, disposables);\n  }\n  hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {\n    if (watchCreate) {\n      fileSystemWatcher.onDidCreate(resource => this._notifyFileEvent({\n        uri: this._client.code2ProtocolConverter.asUri(resource),\n        type: vscode_languageserver_protocol_1.FileChangeType.Created\n      }), null, listeners);\n    }\n    if (watchChange) {\n      fileSystemWatcher.onDidChange(resource => this._notifyFileEvent({\n        uri: this._client.code2ProtocolConverter.asUri(resource),\n        type: vscode_languageserver_protocol_1.FileChangeType.Changed\n      }), null, listeners);\n    }\n    if (watchDelete) {\n      fileSystemWatcher.onDidDelete(resource => this._notifyFileEvent({\n        uri: this._client.code2ProtocolConverter.asUri(resource),\n        type: vscode_languageserver_protocol_1.FileChangeType.Deleted\n      }), null, listeners);\n    }\n  }\n  unregister(id) {\n    let disposables = this._watchers.get(id);\n    if (disposables) {\n      for (let disposable of disposables) {\n        disposable.dispose();\n      }\n    }\n  }\n  clear() {\n    this._watchers.forEach(disposables => {\n      for (let disposable of disposables) {\n        disposable.dispose();\n      }\n    });\n    this._watchers.clear();\n  }\n}\nexports.FileSystemWatcherFeature = FileSystemWatcherFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","FileSystemWatcherFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","constructor","client","notifyFileEvent","_client","_notifyFileEvent","_watchers","Map","getState","kind","id","registrationType","method","registrations","size","DidChangeWatchedFilesNotification","type","fillClientCapabilities","capabilities","ensure","dynamicRegistration","relativePatternSupport","initialize","_capabilities","_documentSelector","register","data","Array","isArray","registerOptions","watchers","disposables","watcher","globPattern","protocol2CodeConverter","asGlobPattern","undefined","watchCreate","watchChange","watchDelete","WatchKind","Create","Change","Delete","fileSystemWatcher","workspace","createFileSystemWatcher","hookListeners","push","set","registerRaw","fileSystemWatchers","listeners","onDidCreate","resource","uri","code2ProtocolConverter","asUri","FileChangeType","Created","onDidChange","Changed","onDidDelete","Deleted","unregister","get","disposable","dispose","clear","forEach"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/fileSystemWatcher.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileSystemWatcherFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass FileSystemWatcherFeature {\n    constructor(client, notifyFileEvent) {\n        this._client = client;\n        this._notifyFileEvent = notifyFileEvent;\n        this._watchers = new Map();\n    }\n    getState() {\n        return { kind: 'workspace', id: this.registrationType.method, registrations: this._watchers.size > 0 };\n    }\n    get registrationType() {\n        return vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type;\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').dynamicRegistration = true;\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').relativePatternSupport = true;\n    }\n    initialize(_capabilities, _documentSelector) {\n    }\n    register(data) {\n        if (!Array.isArray(data.registerOptions.watchers)) {\n            return;\n        }\n        const disposables = [];\n        for (const watcher of data.registerOptions.watchers) {\n            const globPattern = this._client.protocol2CodeConverter.asGlobPattern(watcher.globPattern);\n            if (globPattern === undefined) {\n                continue;\n            }\n            let watchCreate = true, watchChange = true, watchDelete = true;\n            if (watcher.kind !== undefined && watcher.kind !== null) {\n                watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0;\n                watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) !== 0;\n                watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) !== 0;\n            }\n            const fileSystemWatcher = vscode_1.workspace.createFileSystemWatcher(globPattern, !watchCreate, !watchChange, !watchDelete);\n            this.hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, disposables);\n            disposables.push(fileSystemWatcher);\n        }\n        this._watchers.set(data.id, disposables);\n    }\n    registerRaw(id, fileSystemWatchers) {\n        let disposables = [];\n        for (let fileSystemWatcher of fileSystemWatchers) {\n            this.hookListeners(fileSystemWatcher, true, true, true, disposables);\n        }\n        this._watchers.set(id, disposables);\n    }\n    hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {\n        if (watchCreate) {\n            fileSystemWatcher.onDidCreate((resource) => this._notifyFileEvent({\n                uri: this._client.code2ProtocolConverter.asUri(resource),\n                type: vscode_languageserver_protocol_1.FileChangeType.Created\n            }), null, listeners);\n        }\n        if (watchChange) {\n            fileSystemWatcher.onDidChange((resource) => this._notifyFileEvent({\n                uri: this._client.code2ProtocolConverter.asUri(resource),\n                type: vscode_languageserver_protocol_1.FileChangeType.Changed\n            }), null, listeners);\n        }\n        if (watchDelete) {\n            fileSystemWatcher.onDidDelete((resource) => this._notifyFileEvent({\n                uri: this._client.code2ProtocolConverter.asUri(resource),\n                type: vscode_languageserver_protocol_1.FileChangeType.Deleted\n            }), null, listeners);\n        }\n    }\n    unregister(id) {\n        let disposables = this._watchers.get(id);\n        if (disposables) {\n            for (let disposable of disposables) {\n                disposable.dispose();\n            }\n        }\n    }\n    clear() {\n        this._watchers.forEach((disposables) => {\n            for (let disposable of disposables) {\n                disposable.dispose();\n            }\n        });\n        this._watchers.clear();\n    }\n}\nexports.FileSystemWatcherFeature = FileSystemWatcherFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}