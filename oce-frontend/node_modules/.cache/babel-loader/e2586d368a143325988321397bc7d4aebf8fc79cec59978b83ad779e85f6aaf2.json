{"ast":null,"code":"\"use strict\";\n\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorProviderFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass ColorProviderFeature extends features_1.TextDocumentLanguageFeature {\n  constructor(client) {\n    super(client, vscode_languageserver_protocol_1.DocumentColorRequest.type);\n  }\n  fillClientCapabilities(capabilities) {\n    (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'colorProvider').dynamicRegistration = true;\n  }\n  initialize(capabilities, documentSelector) {\n    let [id, options] = this.getRegistration(documentSelector, capabilities.colorProvider);\n    if (!id || !options) {\n      return;\n    }\n    this.register({\n      id: id,\n      registerOptions: options\n    });\n  }\n  registerLanguageProvider(options) {\n    const selector = options.documentSelector;\n    const provider = {\n      provideColorPresentations: (color, context, token) => {\n        const client = this._client;\n        const provideColorPresentations = (color, context, token) => {\n          const requestParams = {\n            color,\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),\n            range: client.code2ProtocolConverter.asRange(context.range)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return this._client.protocol2CodeConverter.asColorPresentations(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideColorPresentations ? middleware.provideColorPresentations(color, context, token, provideColorPresentations) : provideColorPresentations(color, context, token);\n      },\n      provideDocumentColors: (document, token) => {\n        const client = this._client;\n        const provideDocumentColors = (document, token) => {\n          const requestParams = {\n            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n          };\n          return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then(result => {\n            if (token.isCancellationRequested) {\n              return null;\n            }\n            return this._client.protocol2CodeConverter.asColorInformations(result, token);\n          }, error => {\n            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, token, error, null);\n          });\n        };\n        const middleware = client.middleware;\n        return middleware.provideDocumentColors ? middleware.provideDocumentColors(document, token, provideDocumentColors) : provideDocumentColors(document, token);\n      }\n    };\n    return [vscode_1.languages.registerColorProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n  }\n}\nexports.ColorProviderFeature = ColorProviderFeature;","map":{"version":3,"names":["Object","defineProperty","exports","value","ColorProviderFeature","vscode_1","require","vscode_languageserver_protocol_1","features_1","TextDocumentLanguageFeature","constructor","client","DocumentColorRequest","type","fillClientCapabilities","capabilities","ensure","dynamicRegistration","initialize","documentSelector","id","options","getRegistration","colorProvider","register","registerOptions","registerLanguageProvider","selector","provider","provideColorPresentations","color","context","token","_client","requestParams","textDocument","code2ProtocolConverter","asTextDocumentIdentifier","document","range","asRange","sendRequest","ColorPresentationRequest","then","result","isCancellationRequested","protocol2CodeConverter","asColorPresentations","error","handleFailedRequest","middleware","provideDocumentColors","asColorInformations","languages","registerColorProvider","asDocumentSelector"],"sources":["/Users/phamtu/Downloads/Code/OCE/oce-frontend/node_modules/vscode-languageclient/lib/common/colorProvider.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorProviderFeature = void 0;\nconst vscode_1 = require(\"vscode\");\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst features_1 = require(\"./features\");\nclass ColorProviderFeature extends features_1.TextDocumentLanguageFeature {\n    constructor(client) {\n        super(client, vscode_languageserver_protocol_1.DocumentColorRequest.type);\n    }\n    fillClientCapabilities(capabilities) {\n        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'colorProvider').dynamicRegistration = true;\n    }\n    initialize(capabilities, documentSelector) {\n        let [id, options] = this.getRegistration(documentSelector, capabilities.colorProvider);\n        if (!id || !options) {\n            return;\n        }\n        this.register({ id: id, registerOptions: options });\n    }\n    registerLanguageProvider(options) {\n        const selector = options.documentSelector;\n        const provider = {\n            provideColorPresentations: (color, context, token) => {\n                const client = this._client;\n                const provideColorPresentations = (color, context, token) => {\n                    const requestParams = {\n                        color,\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),\n                        range: client.code2ProtocolConverter.asRange(context.range)\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return this._client.protocol2CodeConverter.asColorPresentations(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideColorPresentations\n                    ? middleware.provideColorPresentations(color, context, token, provideColorPresentations)\n                    : provideColorPresentations(color, context, token);\n            },\n            provideDocumentColors: (document, token) => {\n                const client = this._client;\n                const provideDocumentColors = (document, token) => {\n                    const requestParams = {\n                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)\n                    };\n                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then((result) => {\n                        if (token.isCancellationRequested) {\n                            return null;\n                        }\n                        return this._client.protocol2CodeConverter.asColorInformations(result, token);\n                    }, (error) => {\n                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, token, error, null);\n                    });\n                };\n                const middleware = client.middleware;\n                return middleware.provideDocumentColors\n                    ? middleware.provideDocumentColors(document, token, provideDocumentColors)\n                    : provideDocumentColors(document, token);\n            }\n        };\n        return [vscode_1.languages.registerColorProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];\n    }\n}\nexports.ColorProviderFeature = ColorProviderFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}